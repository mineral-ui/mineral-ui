// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Select demo examples controlled 1`] = `
.css-0,
[data-css-0] {
  width: 100%;
}

.css-0 > span,
[data-css-0] > span {
  width: 100%;
}

.css-1,
[data-css-1] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: inline-block;
  width: 100%;
}

.css-1 *,
[data-css-1] *,
.css-1 *::before,
[data-css-1] *::before,
.css-1 *::after,
[data-css-1] *::after {
  box-sizing: inherit;
}

.css-1 > span,
[data-css-1] > span {
  width: 100%;
}

.css-2,
[data-css-2] {
  display: inline-block;
}

.css-3,
[data-css-3] {
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-3 [role="img"],
[data-css-3] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-3 [role="img"]:first-child,
[data-css-3] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-3 :not([role="img"]) ~ [role="img"],
[data-css-3] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-3 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-3] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-7,
[data-css-7] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-7 *,
[data-css-7] *,
.css-7 *::before,
[data-css-7] *::before,
.css-7 *::after,
[data-css-7] *::after {
  box-sizing: inherit;
}

.css-7:hover > div:last-child,
[data-css-7]:hover > div:last-child,
.css-7[data-simulate-hover] > div:last-child,
[data-css-7][data-simulate-hover] > div:last-child {
  border-color: #2e6fd9;
}

.css-7:focus > div:last-child,
[data-css-7]:focus > div:last-child,
.css-7[data-simulate-focus] > div:last-child,
[data-css-7][data-simulate-focus] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7:active > div:last-child,
[data-css-7]:active > div:last-child,
.css-7[data-simulate-active] > div:last-child,
[data-css-7][data-simulate-active] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7 [role="img"],
[data-css-7] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-7 [role="img"]:first-child,
[data-css-7] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-7 :not([role="img"]) ~ [role="img"],
[data-css-7] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-7 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-7] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-20,
[data-css-20] {
  align-items: center;
  color: #8e99ab;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  font-style: italic;
  height: 2.857142857142857em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-20::placeholder,
[data-css-20]::placeholder,
.css-20[data-simulate-placeholder],
[data-css-20][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-input-placeholder,
[data-css-20]::-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20:-ms-input-placeholder,
[data-css-20]:-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-clear,
[data-css-20]::-ms-clear,
.css-20[data-simulate-msclear],
[data-css-20][data-simulate-msclear] {
  display: none;
}

.css-20:focus ~ div:last-child,
[data-css-20]:focus ~ div:last-child,
.css-20[data-simulate-focus] ~ div:last-child,
[data-css-20][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-34,
[data-css-34] {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  user-select: none;
  width: 100%;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.css-35,
[data-css-35] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.css-36,
[data-css-36] {
  background-color: #fff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

<Component>
  <MyForm>
    <Select
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      onChange={[Function]}
      placeholder="Select..."
      placement="bottom-start"
      size="large"
    >
      <Select
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        getItemProps={[Function]}
        getMenuProps={[Function]}
        getTriggerProps={[Function]}
        id="select-88"
        isOpen={false}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onChange={[Function]}
        onClose={[Function]}
        onOpen={[Function]}
        placement="bottom-start"
      >
        <ThemedComponent
          className="css-0"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          getItemProps={[Function]}
          getMenuProps={[Function]}
          getTriggerProps={[Function]}
          id="select-88"
          isOpen={false}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onChange={[Function]}
          onClose={[Function]}
          onOpen={[Function]}
          placement="bottom-start"
        >
          <Themed(Dropdown)
            className="css-0"
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            getItemProps={[Function]}
            getMenuProps={[Function]}
            getTriggerProps={[Function]}
            id="select-88"
            isOpen={false}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onChange={[Function]}
            onClose={[Function]}
            onOpen={[Function]}
            placement="bottom-start"
          >
            <ThemeProvider>
              <ThemeProvider>
                <Dropdown
                  className="css-0"
                  data={
                    Array [
                      Object {
                        "text": "Alpha",
                        "value": "alpha",
                      },
                      Object {
                        "text": "Beta",
                        "value": "beta",
                      },
                      Object {
                        "text": "Gamma",
                        "value": "gamma",
                      },
                    ]
                  }
                  getItemProps={[Function]}
                  getMenuProps={[Function]}
                  getTriggerProps={[Function]}
                  id="select-88"
                  isOpen={false}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onChange={[Function]}
                  onClose={[Function]}
                  onOpen={[Function]}
                  placement="bottom-start"
                >
                  <Popover
                    className="css-0"
                    content={
                      <DropdownContent
                        data={
                          Array [
                            Object {
                              "text": "Alpha",
                              "value": "alpha",
                            },
                            Object {
                              "text": "Beta",
                              "value": "beta",
                            },
                            Object {
                              "text": "Gamma",
                              "value": "gamma",
                            },
                          ]
                        }
                        getItemProps={[Function]}
                        getMenuProps={[Function]}
                        id="select-88-content"
                        modifiers={
                          Object {
                            "contentWidth": Object {
                              "enabled": true,
                              "fn": [Function],
                            },
                          }
                        }
                        placement="bottom-start"
                        wide={undefined}
                      />
                    }
                    focusTriggerOnClose={true}
                    getItemProps={[Function]}
                    getMenuProps={[Function]}
                    getTriggerProps={[Function]}
                    hasArrow={true}
                    id="select-88"
                    isOpen={false}
                    onChange={[Function]}
                    onClose={[Function]}
                    onOpen={[Function]}
                    placement="bottom"
                    triggerRef={[Function]}
                    wrapContent={false}
                  >
                    <Popover
                      className="css-0"
                      content={
                        <DropdownContent
                          data={
                            Array [
                              Object {
                                "text": "Alpha",
                                "value": "alpha",
                              },
                              Object {
                                "text": "Beta",
                                "value": "beta",
                              },
                              Object {
                                "text": "Gamma",
                                "value": "gamma",
                              },
                            ]
                          }
                          getItemProps={[Function]}
                          getMenuProps={[Function]}
                          id="select-88-content"
                          modifiers={
                            Object {
                              "contentWidth": Object {
                                "enabled": true,
                                "fn": [Function],
                              },
                            }
                          }
                          placement="bottom-start"
                          wide={undefined}
                        />
                      }
                      focusTriggerOnClose={true}
                      getItemProps={[Function]}
                      getMenuProps={[Function]}
                      getTriggerProps={[Function]}
                      hasArrow={true}
                      id="select-88"
                      isOpen={false}
                      onChange={[Function]}
                      onClose={[Function]}
                      onOpen={[Function]}
                      placement="bottom"
                      tag="span"
                      triggerRef={[Function]}
                      wrapContent={false}
                    >
                      <Manager
                        className="css-1"
                        id="select-88"
                        onChange={[Function]}
                        tag="span"
                      >
                        <span
                          className="css-1"
                          id="select-88"
                          onChange={[Function]}
                        >
                          <PopoverTrigger
                            aria-describedby="select-88-content"
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            aria-owns="select-88-content"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            <PopoverTrigger
                              component="span"
                            >
                              <Target
                                className="css-2"
                                component="span"
                              >
                                <span
                                  className="css-2"
                                >
                                  <SelectTrigger
                                    aria-describedby="select-88-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-88-content"
                                    isOpen={false}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    placeholder="Select..."
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                    triggerRef={[Function]}
                                  >
                                    <SelectTrigger
                                      afterItems={
                                        Array [
                                          <IconArrowDropdownDown
                                            css={
                                              Object {
                                                "margin": "0.5em",
                                              }
                                            }
                                            size="1.5em"
                                          />,
                                          <input
                                            name={undefined}
                                            type="hidden"
                                            value=""
                                          />,
                                        ]
                                      }
                                      aria-describedby="select-88-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-88-content"
                                      control={[Function]}
                                      controlProps={
                                        Object {
                                          "hasPlaceholder": true,
                                          "variant": undefined,
                                        }
                                      }
                                      fauxControlRef={[Function]}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                    >
                                      <FauxControl
                                        afterItems={
                                          Array [
                                            <IconArrowDropdownDown
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              size="1.5em"
                                            />,
                                            <input
                                              name={undefined}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-88-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-88-content"
                                        className="css-3"
                                        control={[Function]}
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                      >
                                        <FauxControl
                                          aria-describedby="select-88-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-88-content"
                                          className="css-3"
                                          control={[Function]}
                                          innerRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          tabIndex={0}
                                        >
                                          <div
                                            aria-describedby="select-88-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-88-content"
                                            className="css-7"
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            tabIndex={0}
                                          >
                                            <glamorous(Trigger)
                                              controlPropsIn={
                                                Object {
                                                  "hasPlaceholder": true,
                                                  "variant": undefined,
                                                }
                                              }
                                              hasPlaceholder={true}
                                              key="control"
                                              size="large"
                                            >
                                              <div
                                                className="css-20"
                                              >
                                                <TriggerContent>
                                                  <span
                                                    className="css-34"
                                                  >
                                                    Select...
                                                  </span>
                                                </TriggerContent>
                                              </div>
                                            </glamorous(Trigger)>
                                            <IconArrowDropdownDown
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              key="arrow"
                                              size="1.5em"
                                            >
                                              <Icon
                                                css={
                                                  Object {
                                                    "margin": "0.5em",
                                                  }
                                                }
                                                rtl={false}
                                                size="1.5em"
                                              >
                                                <glamorous(svg)
                                                  aria-hidden={true}
                                                  css={
                                                    Object {
                                                      "margin": "0.5em",
                                                    }
                                                  }
                                                  role="img"
                                                  rtl={false}
                                                  size="1.5em"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="css-35"
                                                    role="img"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <g>
                                                      <path
                                                        d="M12 17.5l-8-8h16z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </glamorous(svg)>
                                              </Icon>
                                            </IconArrowDropdownDown>
                                            <input
                                              key="input"
                                              type="hidden"
                                              value=""
                                            />
                                            <Underlay>
                                              <div
                                                className="css-36"
                                              />
                                            </Underlay>
                                          </div>
                                        </FauxControl>
                                      </FauxControl>
                                    </SelectTrigger>
                                  </SelectTrigger>
                                </span>
                              </Target>
                            </PopoverTrigger>
                          </PopoverTrigger>
                        </span>
                      </Manager>
                    </Popover>
                  </Popover>
                </Dropdown>
              </ThemeProvider>
            </ThemeProvider>
          </Themed(Dropdown)>
        </ThemedComponent>
      </Select>
    </Select>
  </MyForm>
</Component>
`;

exports[`Select demo examples data 1`] = `
.css-0,
[data-css-0] {
  width: 100%;
}

.css-0 > span,
[data-css-0] > span {
  width: 100%;
}

.css-1,
[data-css-1] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: inline-block;
  width: 100%;
}

.css-1 *,
[data-css-1] *,
.css-1 *::before,
[data-css-1] *::before,
.css-1 *::after,
[data-css-1] *::after {
  box-sizing: inherit;
}

.css-1 > span,
[data-css-1] > span {
  width: 100%;
}

.css-2,
[data-css-2] {
  display: inline-block;
}

.css-3,
[data-css-3] {
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-3 [role="img"],
[data-css-3] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-3 [role="img"]:first-child,
[data-css-3] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-3 :not([role="img"]) ~ [role="img"],
[data-css-3] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-3 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-3] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-7,
[data-css-7] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-7 *,
[data-css-7] *,
.css-7 *::before,
[data-css-7] *::before,
.css-7 *::after,
[data-css-7] *::after {
  box-sizing: inherit;
}

.css-7:hover > div:last-child,
[data-css-7]:hover > div:last-child,
.css-7[data-simulate-hover] > div:last-child,
[data-css-7][data-simulate-hover] > div:last-child {
  border-color: #2e6fd9;
}

.css-7:focus > div:last-child,
[data-css-7]:focus > div:last-child,
.css-7[data-simulate-focus] > div:last-child,
[data-css-7][data-simulate-focus] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7:active > div:last-child,
[data-css-7]:active > div:last-child,
.css-7[data-simulate-active] > div:last-child,
[data-css-7][data-simulate-active] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7 [role="img"],
[data-css-7] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-7 [role="img"]:first-child,
[data-css-7] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-7 :not([role="img"]) ~ [role="img"],
[data-css-7] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-7 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-7] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-20,
[data-css-20] {
  align-items: center;
  color: #8e99ab;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  font-style: italic;
  height: 2.857142857142857em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-20::placeholder,
[data-css-20]::placeholder,
.css-20[data-simulate-placeholder],
[data-css-20][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-input-placeholder,
[data-css-20]::-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20:-ms-input-placeholder,
[data-css-20]:-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-clear,
[data-css-20]::-ms-clear,
.css-20[data-simulate-msclear],
[data-css-20][data-simulate-msclear] {
  display: none;
}

.css-20:focus ~ div:last-child,
[data-css-20]:focus ~ div:last-child,
.css-20[data-simulate-focus] ~ div:last-child,
[data-css-20][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-34,
[data-css-34] {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  user-select: none;
  width: 100%;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.css-35,
[data-css-35] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.css-36,
[data-css-36] {
  background-color: #fff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

<Component>
  <Select
    data={
      Array [
        Object {
          "secondaryText": "Secondary text",
          "text": "Menu item",
          "value": "basic",
        },
        Object {
          "iconStart": <IconCloud />,
          "text": "Icon at start",
          "value": "iconStart",
        },
        Object {
          "iconEnd": <IconCloud />,
          "text": "Icon at end",
          "value": "iconEnd",
        },
        Object {
          "divider": true,
        },
        Object {
          "text": "Danger variant",
          "value": "variant",
          "variant": "danger",
        },
        Object {
          "disabled": true,
          "onClick": [Function],
          "text": "Disabled menu item",
          "value": "disabled",
        },
        Object {
          "avatar": "/images/avatar.svg",
          "render": [Function],
          "text": "Custom render",
          "value": "custom",
        },
      ]
    }
    placeholder="Select..."
    placement="bottom-start"
    size="large"
  >
    <Select
      data={
        Array [
          Object {
            "secondaryText": "Secondary text",
            "text": "Menu item",
            "value": "basic",
          },
          Object {
            "iconStart": <IconCloud />,
            "text": "Icon at start",
            "value": "iconStart",
          },
          Object {
            "iconEnd": <IconCloud />,
            "text": "Icon at end",
            "value": "iconEnd",
          },
          Object {
            "divider": true,
          },
          Object {
            "text": "Danger variant",
            "value": "variant",
            "variant": "danger",
          },
          Object {
            "disabled": true,
            "onClick": [Function],
            "text": "Disabled menu item",
            "value": "disabled",
          },
          Object {
            "avatar": "/images/avatar.svg",
            "render": [Function],
            "text": "Custom render",
            "value": "custom",
          },
        ]
      }
      getItemProps={[Function]}
      getMenuProps={[Function]}
      getTriggerProps={[Function]}
      id="select-90"
      isOpen={false}
      modifiers={
        Object {
          "contentWidth": Object {
            "enabled": true,
            "fn": [Function],
          },
        }
      }
      onClose={[Function]}
      onOpen={[Function]}
      placement="bottom-start"
    >
      <ThemedComponent
        className="css-0"
        data={
          Array [
            Object {
              "secondaryText": "Secondary text",
              "text": "Menu item",
              "value": "basic",
            },
            Object {
              "iconStart": <IconCloud />,
              "text": "Icon at start",
              "value": "iconStart",
            },
            Object {
              "iconEnd": <IconCloud />,
              "text": "Icon at end",
              "value": "iconEnd",
            },
            Object {
              "divider": true,
            },
            Object {
              "text": "Danger variant",
              "value": "variant",
              "variant": "danger",
            },
            Object {
              "disabled": true,
              "onClick": [Function],
              "text": "Disabled menu item",
              "value": "disabled",
            },
            Object {
              "avatar": "/images/avatar.svg",
              "render": [Function],
              "text": "Custom render",
              "value": "custom",
            },
          ]
        }
        getItemProps={[Function]}
        getMenuProps={[Function]}
        getTriggerProps={[Function]}
        id="select-90"
        isOpen={false}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placement="bottom-start"
      >
        <Themed(Dropdown)
          className="css-0"
          data={
            Array [
              Object {
                "secondaryText": "Secondary text",
                "text": "Menu item",
                "value": "basic",
              },
              Object {
                "iconStart": <IconCloud />,
                "text": "Icon at start",
                "value": "iconStart",
              },
              Object {
                "iconEnd": <IconCloud />,
                "text": "Icon at end",
                "value": "iconEnd",
              },
              Object {
                "divider": true,
              },
              Object {
                "text": "Danger variant",
                "value": "variant",
                "variant": "danger",
              },
              Object {
                "disabled": true,
                "onClick": [Function],
                "text": "Disabled menu item",
                "value": "disabled",
              },
              Object {
                "avatar": "/images/avatar.svg",
                "render": [Function],
                "text": "Custom render",
                "value": "custom",
              },
            ]
          }
          getItemProps={[Function]}
          getMenuProps={[Function]}
          getTriggerProps={[Function]}
          id="select-90"
          isOpen={false}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placement="bottom-start"
        >
          <ThemeProvider>
            <ThemeProvider>
              <Dropdown
                className="css-0"
                data={
                  Array [
                    Object {
                      "secondaryText": "Secondary text",
                      "text": "Menu item",
                      "value": "basic",
                    },
                    Object {
                      "iconStart": <IconCloud />,
                      "text": "Icon at start",
                      "value": "iconStart",
                    },
                    Object {
                      "iconEnd": <IconCloud />,
                      "text": "Icon at end",
                      "value": "iconEnd",
                    },
                    Object {
                      "divider": true,
                    },
                    Object {
                      "text": "Danger variant",
                      "value": "variant",
                      "variant": "danger",
                    },
                    Object {
                      "disabled": true,
                      "onClick": [Function],
                      "text": "Disabled menu item",
                      "value": "disabled",
                    },
                    Object {
                      "avatar": "/images/avatar.svg",
                      "render": [Function],
                      "text": "Custom render",
                      "value": "custom",
                    },
                  ]
                }
                getItemProps={[Function]}
                getMenuProps={[Function]}
                getTriggerProps={[Function]}
                id="select-90"
                isOpen={false}
                modifiers={
                  Object {
                    "contentWidth": Object {
                      "enabled": true,
                      "fn": [Function],
                    },
                  }
                }
                onClose={[Function]}
                onOpen={[Function]}
                placement="bottom-start"
              >
                <Popover
                  className="css-0"
                  content={
                    <DropdownContent
                      data={
                        Array [
                          Object {
                            "secondaryText": "Secondary text",
                            "text": "Menu item",
                            "value": "basic",
                          },
                          Object {
                            "iconStart": <IconCloud />,
                            "text": "Icon at start",
                            "value": "iconStart",
                          },
                          Object {
                            "iconEnd": <IconCloud />,
                            "text": "Icon at end",
                            "value": "iconEnd",
                          },
                          Object {
                            "divider": true,
                          },
                          Object {
                            "text": "Danger variant",
                            "value": "variant",
                            "variant": "danger",
                          },
                          Object {
                            "disabled": true,
                            "onClick": [Function],
                            "text": "Disabled menu item",
                            "value": "disabled",
                          },
                          Object {
                            "avatar": "/images/avatar.svg",
                            "render": [Function],
                            "text": "Custom render",
                            "value": "custom",
                          },
                        ]
                      }
                      getItemProps={[Function]}
                      getMenuProps={[Function]}
                      id="select-90-content"
                      modifiers={
                        Object {
                          "contentWidth": Object {
                            "enabled": true,
                            "fn": [Function],
                          },
                        }
                      }
                      placement="bottom-start"
                      wide={undefined}
                    />
                  }
                  focusTriggerOnClose={true}
                  getItemProps={[Function]}
                  getMenuProps={[Function]}
                  getTriggerProps={[Function]}
                  hasArrow={true}
                  id="select-90"
                  isOpen={false}
                  onClose={[Function]}
                  onOpen={[Function]}
                  placement="bottom"
                  triggerRef={[Function]}
                  wrapContent={false}
                >
                  <Popover
                    className="css-0"
                    content={
                      <DropdownContent
                        data={
                          Array [
                            Object {
                              "secondaryText": "Secondary text",
                              "text": "Menu item",
                              "value": "basic",
                            },
                            Object {
                              "iconStart": <IconCloud />,
                              "text": "Icon at start",
                              "value": "iconStart",
                            },
                            Object {
                              "iconEnd": <IconCloud />,
                              "text": "Icon at end",
                              "value": "iconEnd",
                            },
                            Object {
                              "divider": true,
                            },
                            Object {
                              "text": "Danger variant",
                              "value": "variant",
                              "variant": "danger",
                            },
                            Object {
                              "disabled": true,
                              "onClick": [Function],
                              "text": "Disabled menu item",
                              "value": "disabled",
                            },
                            Object {
                              "avatar": "/images/avatar.svg",
                              "render": [Function],
                              "text": "Custom render",
                              "value": "custom",
                            },
                          ]
                        }
                        getItemProps={[Function]}
                        getMenuProps={[Function]}
                        id="select-90-content"
                        modifiers={
                          Object {
                            "contentWidth": Object {
                              "enabled": true,
                              "fn": [Function],
                            },
                          }
                        }
                        placement="bottom-start"
                        wide={undefined}
                      />
                    }
                    focusTriggerOnClose={true}
                    getItemProps={[Function]}
                    getMenuProps={[Function]}
                    getTriggerProps={[Function]}
                    hasArrow={true}
                    id="select-90"
                    isOpen={false}
                    onClose={[Function]}
                    onOpen={[Function]}
                    placement="bottom"
                    tag="span"
                    triggerRef={[Function]}
                    wrapContent={false}
                  >
                    <Manager
                      className="css-1"
                      id="select-90"
                      tag="span"
                    >
                      <span
                        className="css-1"
                        id="select-90"
                      >
                        <PopoverTrigger
                          aria-describedby="select-90-content"
                          aria-expanded={false}
                          aria-haspopup="listbox"
                          aria-owns="select-90-content"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          role="button"
                          tabIndex={0}
                        >
                          <PopoverTrigger
                            component="span"
                          >
                            <Target
                              className="css-2"
                              component="span"
                            >
                              <span
                                className="css-2"
                              >
                                <SelectTrigger
                                  aria-describedby="select-90-content"
                                  aria-expanded={false}
                                  aria-haspopup="listbox"
                                  aria-owns="select-90-content"
                                  isOpen={false}
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  placeholder="Select..."
                                  role="button"
                                  size="large"
                                  tabIndex={0}
                                  triggerRef={[Function]}
                                >
                                  <SelectTrigger
                                    afterItems={
                                      Array [
                                        <IconArrowDropdownDown
                                          css={
                                            Object {
                                              "margin": "0.5em",
                                            }
                                          }
                                          size="1.5em"
                                        />,
                                        <input
                                          name={undefined}
                                          type="hidden"
                                          value=""
                                        />,
                                      ]
                                    }
                                    aria-describedby="select-90-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-90-content"
                                    control={[Function]}
                                    controlProps={
                                      Object {
                                        "hasPlaceholder": true,
                                        "variant": undefined,
                                      }
                                    }
                                    fauxControlRef={[Function]}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                  >
                                    <FauxControl
                                      afterItems={
                                        Array [
                                          <IconArrowDropdownDown
                                            css={
                                              Object {
                                                "margin": "0.5em",
                                              }
                                            }
                                            size="1.5em"
                                          />,
                                          <input
                                            name={undefined}
                                            type="hidden"
                                            value=""
                                          />,
                                        ]
                                      }
                                      aria-describedby="select-90-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-90-content"
                                      className="css-3"
                                      control={[Function]}
                                      controlProps={
                                        Object {
                                          "hasPlaceholder": true,
                                          "variant": undefined,
                                        }
                                      }
                                      fauxControlRef={[Function]}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                    >
                                      <FauxControl
                                        aria-describedby="select-90-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-90-content"
                                        className="css-3"
                                        control={[Function]}
                                        innerRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        <div
                                          aria-describedby="select-90-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-90-content"
                                          className="css-7"
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          tabIndex={0}
                                        >
                                          <glamorous(Trigger)
                                            controlPropsIn={
                                              Object {
                                                "hasPlaceholder": true,
                                                "variant": undefined,
                                              }
                                            }
                                            hasPlaceholder={true}
                                            key="control"
                                            size="large"
                                          >
                                            <div
                                              className="css-20"
                                            >
                                              <TriggerContent>
                                                <span
                                                  className="css-34"
                                                >
                                                  Select...
                                                </span>
                                              </TriggerContent>
                                            </div>
                                          </glamorous(Trigger)>
                                          <IconArrowDropdownDown
                                            css={
                                              Object {
                                                "margin": "0.5em",
                                              }
                                            }
                                            key="arrow"
                                            size="1.5em"
                                          >
                                            <Icon
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              rtl={false}
                                              size="1.5em"
                                            >
                                              <glamorous(svg)
                                                aria-hidden={true}
                                                css={
                                                  Object {
                                                    "margin": "0.5em",
                                                  }
                                                }
                                                role="img"
                                                rtl={false}
                                                size="1.5em"
                                                viewBox="0 0 24 24"
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="css-35"
                                                  role="img"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <g>
                                                    <path
                                                      d="M12 17.5l-8-8h16z"
                                                    />
                                                  </g>
                                                </svg>
                                              </glamorous(svg)>
                                            </Icon>
                                          </IconArrowDropdownDown>
                                          <input
                                            key="input"
                                            type="hidden"
                                            value=""
                                          />
                                          <Underlay>
                                            <div
                                              className="css-36"
                                            />
                                          </Underlay>
                                        </div>
                                      </FauxControl>
                                    </FauxControl>
                                  </SelectTrigger>
                                </SelectTrigger>
                              </span>
                            </Target>
                          </PopoverTrigger>
                        </PopoverTrigger>
                      </span>
                    </Manager>
                  </Popover>
                </Popover>
              </Dropdown>
            </ThemeProvider>
          </ThemeProvider>
        </Themed(Dropdown)>
      </ThemedComponent>
    </Select>
  </Select>
</Component>
`;

exports[`Select demo examples disabled 1`] = `
.css-0,
[data-css-0] {
  width: 100%;
}

.css-0 > span,
[data-css-0] > span {
  width: 100%;
}

.css-1,
[data-css-1] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: inline-block;
  width: 100%;
}

.css-1 *,
[data-css-1] *,
.css-1 *::before,
[data-css-1] *::before,
.css-1 *::after,
[data-css-1] *::after {
  box-sizing: inherit;
}

.css-1 > span,
[data-css-1] > span {
  width: 100%;
}

.css-2,
[data-css-2] {
  display: inline-block;
}

.css-3,
[data-css-3] {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  user-select: none;
  width: 100%;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.css-4,
[data-css-4] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.css-5,
[data-css-5] {
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-5 [role="img"],
[data-css-5] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-5 [role="img"]:first-child,
[data-css-5] [role="img"]:first-child {
  fill: #afbacc;
  margin: 0 0.5em;
}

.css-5 :not([role="img"]) ~ [role="img"],
[data-css-5] :not([role="img"]) ~ [role="img"] {
  fill: #afbacc;
}

.css-5 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-5] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #afbacc;
  margin-left: 0.5em;
}

.css-9,
[data-css-9] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-9 *,
[data-css-9] *,
.css-9 *::before,
[data-css-9] *::before,
.css-9 *::after,
[data-css-9] *::after {
  box-sizing: inherit;
}

.css-9:active > div:last-child,
[data-css-9]:active > div:last-child,
.css-9[data-simulate-active] > div:last-child,
[data-css-9][data-simulate-active] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: none;
}

.css-9 [role="img"],
[data-css-9] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-9 [role="img"]:first-child,
[data-css-9] [role="img"]:first-child {
  fill: #afbacc;
  margin: 0 0.5em;
}

.css-9 :not([role="img"]) ~ [role="img"],
[data-css-9] :not([role="img"]) ~ [role="img"] {
  fill: #afbacc;
}

.css-9 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-9] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #afbacc;
  margin-left: 0.5em;
}

.css-16,
[data-css-16] {
  align-items: center;
  color: #afbacc;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  font-style: italic;
  height: 2.857142857142857em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-16::placeholder,
[data-css-16]::placeholder,
.css-16[data-simulate-placeholder],
[data-css-16][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-16::-ms-input-placeholder,
[data-css-16]::-ms-input-placeholder,
.css-16[data-simulate-msinputplaceholder],
[data-css-16][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-16:-ms-input-placeholder,
[data-css-16]:-ms-input-placeholder,
.css-16[data-simulate-msinputplaceholder],
[data-css-16][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-16::-ms-clear,
[data-css-16]::-ms-clear,
.css-16[data-simulate-msclear],
[data-css-16][data-simulate-msclear] {
  display: none;
}

.css-16:focus ~ div:last-child,
[data-css-16]:focus ~ div:last-child,
.css-16[data-simulate-focus] ~ div:last-child,
[data-css-16][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-30,
[data-css-30] {
  background-color: #ebeff5;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

<Select
  data={
    Array [
      Object {
        "text": "Alpha",
        "value": "alpha",
      },
      Object {
        "text": "Beta",
        "value": "beta",
      },
      Object {
        "text": "Gamma",
        "value": "gamma",
      },
    ]
  }
  disabled={true}
  placeholder="Select..."
  placement="bottom-start"
  size="large"
>
  <Select
    data={
      Array [
        Object {
          "text": "Alpha",
          "value": "alpha",
        },
        Object {
          "text": "Beta",
          "value": "beta",
        },
        Object {
          "text": "Gamma",
          "value": "gamma",
        },
      ]
    }
    disabled={true}
    getItemProps={[Function]}
    getMenuProps={[Function]}
    getTriggerProps={[Function]}
    id="select-94"
    isOpen={false}
    modifiers={
      Object {
        "contentWidth": Object {
          "enabled": true,
          "fn": [Function],
        },
      }
    }
    onClose={[Function]}
    onOpen={[Function]}
    placement="bottom-start"
  >
    <ThemedComponent
      className="css-0"
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      disabled={true}
      getItemProps={[Function]}
      getMenuProps={[Function]}
      getTriggerProps={[Function]}
      id="select-94"
      isOpen={false}
      modifiers={
        Object {
          "contentWidth": Object {
            "enabled": true,
            "fn": [Function],
          },
        }
      }
      onClose={[Function]}
      onOpen={[Function]}
      placement="bottom-start"
    >
      <Themed(Dropdown)
        className="css-0"
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        disabled={true}
        getItemProps={[Function]}
        getMenuProps={[Function]}
        getTriggerProps={[Function]}
        id="select-94"
        isOpen={false}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placement="bottom-start"
      >
        <ThemeProvider>
          <ThemeProvider>
            <Dropdown
              className="css-0"
              data={
                Array [
                  Object {
                    "text": "Alpha",
                    "value": "alpha",
                  },
                  Object {
                    "text": "Beta",
                    "value": "beta",
                  },
                  Object {
                    "text": "Gamma",
                    "value": "gamma",
                  },
                ]
              }
              disabled={true}
              getItemProps={[Function]}
              getMenuProps={[Function]}
              getTriggerProps={[Function]}
              id="select-94"
              isOpen={false}
              modifiers={
                Object {
                  "contentWidth": Object {
                    "enabled": true,
                    "fn": [Function],
                  },
                }
              }
              onClose={[Function]}
              onOpen={[Function]}
              placement="bottom-start"
            >
              <Popover
                className="css-0"
                content={
                  <DropdownContent
                    data={
                      Array [
                        Object {
                          "text": "Alpha",
                          "value": "alpha",
                        },
                        Object {
                          "text": "Beta",
                          "value": "beta",
                        },
                        Object {
                          "text": "Gamma",
                          "value": "gamma",
                        },
                      ]
                    }
                    getItemProps={[Function]}
                    getMenuProps={[Function]}
                    id="select-94-content"
                    modifiers={
                      Object {
                        "contentWidth": Object {
                          "enabled": true,
                          "fn": [Function],
                        },
                      }
                    }
                    placement="bottom-start"
                    wide={undefined}
                  />
                }
                disabled={true}
                focusTriggerOnClose={true}
                getItemProps={[Function]}
                getMenuProps={[Function]}
                getTriggerProps={[Function]}
                hasArrow={true}
                id="select-94"
                isOpen={false}
                onClose={[Function]}
                onOpen={[Function]}
                placement="bottom"
                triggerRef={[Function]}
                wrapContent={false}
              >
                <Popover
                  className="css-0"
                  content={
                    <DropdownContent
                      data={
                        Array [
                          Object {
                            "text": "Alpha",
                            "value": "alpha",
                          },
                          Object {
                            "text": "Beta",
                            "value": "beta",
                          },
                          Object {
                            "text": "Gamma",
                            "value": "gamma",
                          },
                        ]
                      }
                      getItemProps={[Function]}
                      getMenuProps={[Function]}
                      id="select-94-content"
                      modifiers={
                        Object {
                          "contentWidth": Object {
                            "enabled": true,
                            "fn": [Function],
                          },
                        }
                      }
                      placement="bottom-start"
                      wide={undefined}
                    />
                  }
                  disabled={true}
                  focusTriggerOnClose={true}
                  getItemProps={[Function]}
                  getMenuProps={[Function]}
                  getTriggerProps={[Function]}
                  hasArrow={true}
                  id="select-94"
                  isOpen={false}
                  onClose={[Function]}
                  onOpen={[Function]}
                  placement="bottom"
                  tag="span"
                  triggerRef={[Function]}
                  wrapContent={false}
                >
                  <Manager
                    className="css-1"
                    id="select-94"
                    tag="span"
                  >
                    <span
                      className="css-1"
                      id="select-94"
                    >
                      <PopoverTrigger
                        aria-describedby="select-94-content"
                        aria-disabled={true}
                        aria-expanded={false}
                        aria-haspopup="listbox"
                        aria-owns="select-94-content"
                        disabled={true}
                        onBlur={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        role="button"
                      >
                        <PopoverTrigger
                          component="span"
                        >
                          <Target
                            className="css-2"
                            component="span"
                          >
                            <span
                              className="css-2"
                            >
                              <SelectTrigger
                                aria-describedby="select-94-content"
                                aria-disabled={true}
                                aria-expanded={false}
                                aria-haspopup="listbox"
                                aria-owns="select-94-content"
                                disabled={true}
                                isOpen={false}
                                onBlur={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                placeholder="Select..."
                                role="button"
                                size="large"
                                triggerRef={[Function]}
                              >
                                <SelectTrigger
                                  afterItems={
                                    Array [
                                      <IconArrowDropdownDown
                                        css={
                                          Object {
                                            "margin": "0.5em",
                                          }
                                        }
                                        size="1.5em"
                                      />,
                                      <input
                                        name={undefined}
                                        type="hidden"
                                        value=""
                                      />,
                                    ]
                                  }
                                  aria-describedby="select-94-content"
                                  aria-disabled={true}
                                  aria-expanded={false}
                                  aria-haspopup="listbox"
                                  aria-owns="select-94-content"
                                  control={[Function]}
                                  controlProps={
                                    Object {
                                      "hasPlaceholder": true,
                                      "variant": undefined,
                                    }
                                  }
                                  disabled={true}
                                  fauxControlRef={[Function]}
                                  onBlur={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  role="button"
                                  size="large"
                                >
                                  <FauxControl
                                    afterItems={
                                      Array [
                                        <IconArrowDropdownDown
                                          css={
                                            Object {
                                              "margin": "0.5em",
                                            }
                                          }
                                          size="1.5em"
                                        />,
                                        <input
                                          name={undefined}
                                          type="hidden"
                                          value=""
                                        />,
                                      ]
                                    }
                                    aria-describedby="select-94-content"
                                    aria-disabled={true}
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-94-content"
                                    className="css-5"
                                    control={[Function]}
                                    controlProps={
                                      Object {
                                        "hasPlaceholder": true,
                                        "variant": undefined,
                                      }
                                    }
                                    disabled={true}
                                    fauxControlRef={[Function]}
                                    onBlur={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    role="button"
                                    size="large"
                                  >
                                    <FauxControl
                                      aria-describedby="select-94-content"
                                      aria-disabled={true}
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-94-content"
                                      className="css-5"
                                      control={[Function]}
                                      disabled={true}
                                      innerRef={[Function]}
                                      onBlur={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                    >
                                      <div
                                        aria-describedby="select-94-content"
                                        aria-disabled={true}
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-94-content"
                                        className="css-9"
                                        onBlur={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                      >
                                        <glamorous(Trigger)
                                          controlPropsIn={
                                            Object {
                                              "hasPlaceholder": true,
                                              "variant": undefined,
                                            }
                                          }
                                          disabled={true}
                                          hasPlaceholder={true}
                                          key="control"
                                          size="large"
                                        >
                                          <div
                                            className="css-16"
                                          >
                                            <TriggerContent>
                                              <span
                                                className="css-3"
                                              >
                                                Select...
                                              </span>
                                            </TriggerContent>
                                          </div>
                                        </glamorous(Trigger)>
                                        <IconArrowDropdownDown
                                          css={
                                            Object {
                                              "margin": "0.5em",
                                            }
                                          }
                                          key="arrow"
                                          size="1.5em"
                                        >
                                          <Icon
                                            css={
                                              Object {
                                                "margin": "0.5em",
                                              }
                                            }
                                            rtl={false}
                                            size="1.5em"
                                          >
                                            <glamorous(svg)
                                              aria-hidden={true}
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              role="img"
                                              rtl={false}
                                              size="1.5em"
                                              viewBox="0 0 24 24"
                                            >
                                              <svg
                                                aria-hidden={true}
                                                className="css-4"
                                                role="img"
                                                viewBox="0 0 24 24"
                                              >
                                                <g>
                                                  <path
                                                    d="M12 17.5l-8-8h16z"
                                                  />
                                                </g>
                                              </svg>
                                            </glamorous(svg)>
                                          </Icon>
                                        </IconArrowDropdownDown>
                                        <input
                                          key="input"
                                          type="hidden"
                                          value=""
                                        />
                                        <Underlay
                                          disabled={true}
                                        >
                                          <div
                                            className="css-30"
                                          />
                                        </Underlay>
                                      </div>
                                    </FauxControl>
                                  </FauxControl>
                                </SelectTrigger>
                              </SelectTrigger>
                            </span>
                          </Target>
                        </PopoverTrigger>
                      </PopoverTrigger>
                    </span>
                  </Manager>
                </Popover>
              </Popover>
            </Dropdown>
          </ThemeProvider>
        </ThemeProvider>
      </Themed(Dropdown)>
    </ThemedComponent>
  </Select>
</Select>
`;

exports[`Select demo examples form-field 1`] = `
.css-0,
[data-css-0] {
  width: 100%;
}

.css-0 > span,
[data-css-0] > span {
  width: 100%;
}

.css-1,
[data-css-1] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: inline-block;
  width: 100%;
}

.css-1 *,
[data-css-1] *,
.css-1 *::before,
[data-css-1] *::before,
.css-1 *::after,
[data-css-1] *::after {
  box-sizing: inherit;
}

.css-1 > span,
[data-css-1] > span {
  width: 100%;
}

.css-2,
[data-css-2] {
  display: inline-block;
}

.css-3,
[data-css-3] {
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-3 [role="img"],
[data-css-3] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-3 [role="img"]:first-child,
[data-css-3] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-3 :not([role="img"]) ~ [role="img"],
[data-css-3] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-3 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-3] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-7,
[data-css-7] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-7 *,
[data-css-7] *,
.css-7 *::before,
[data-css-7] *::before,
.css-7 *::after,
[data-css-7] *::after {
  box-sizing: inherit;
}

.css-7:hover > div:last-child,
[data-css-7]:hover > div:last-child,
.css-7[data-simulate-hover] > div:last-child,
[data-css-7][data-simulate-hover] > div:last-child {
  border-color: #2e6fd9;
}

.css-7:focus > div:last-child,
[data-css-7]:focus > div:last-child,
.css-7[data-simulate-focus] > div:last-child,
[data-css-7][data-simulate-focus] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7:active > div:last-child,
[data-css-7]:active > div:last-child,
.css-7[data-simulate-active] > div:last-child,
[data-css-7][data-simulate-active] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7 [role="img"],
[data-css-7] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-7 [role="img"]:first-child,
[data-css-7] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-7 :not([role="img"]) ~ [role="img"],
[data-css-7] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-7 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-7] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-20,
[data-css-20] {
  align-items: center;
  color: #8e99ab;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  font-style: italic;
  height: 2.857142857142857em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-20::placeholder,
[data-css-20]::placeholder,
.css-20[data-simulate-placeholder],
[data-css-20][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-input-placeholder,
[data-css-20]::-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20:-ms-input-placeholder,
[data-css-20]:-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-clear,
[data-css-20]::-ms-clear,
.css-20[data-simulate-msclear],
[data-css-20][data-simulate-msclear] {
  display: none;
}

.css-20:focus ~ div:last-child,
[data-css-20]:focus ~ div:last-child,
.css-20[data-simulate-focus] ~ div:last-child,
[data-css-20][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-34,
[data-css-34] {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  user-select: none;
  width: 100%;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.css-35,
[data-css-35] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.css-36,
[data-css-36] {
  background-color: #fff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.css-37,
[data-css-37] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
}

.css-37 *,
[data-css-37] *,
.css-37 *::before,
[data-css-37] *::before,
.css-37 *::after,
[data-css-37] *::after {
  box-sizing: inherit;
}

.css-38,
[data-css-38] {
  color: #58606e;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  font-size: 0.875em;
  font-weight: 600;
  justify-content: space-between;
  margin-bottom: 0.5em;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
}

.css-38 > *,
[data-css-38] > * {
  align-self: flex-end;
  display: inline-block;
  -webkit-align-self: flex-end;
}

.css-39,
[data-css-39] {
  color: #db2929;
  font-size: 0.6875em;
}

.css-40,
[data-css-40] {
  color: #58606e;
  font-size: 0.6875em;
  margin-top: 0.18181818181818182em;
}

<glamorous(div)>
  <div
    className="css-1p1xtzc"
  >
    <FormField
      caption="Lorem ipsum dolor sit amet, consectetur adipiscing elit."
      data={
        Array [
          Object {
            "text": "Alabama",
            "value": "AL",
          },
          Object {
            "text": "Alaska",
            "value": "AK",
          },
          Object {
            "text": "Arizona",
            "value": "AZ",
          },
          Object {
            "text": "Arkansas",
            "value": "AR",
          },
          Object {
            "text": "California",
            "value": "CA",
          },
          Object {
            "text": "Colorado",
            "value": "CO",
          },
          Object {
            "text": "Connecticut",
            "value": "CT",
          },
          Object {
            "text": "Delaware",
            "value": "DE",
          },
          Object {
            "text": "Florida",
            "value": "FL",
          },
          Object {
            "text": "Georgia",
            "value": "GA",
          },
          Object {
            "text": "Hawaii",
            "value": "HI",
          },
          Object {
            "text": "Idaho",
            "value": "ID",
          },
          Object {
            "text": "Illinois",
            "value": "IL",
          },
          Object {
            "text": "Indiana",
            "value": "IN",
          },
          Object {
            "text": "Iowa",
            "value": "IA",
          },
          Object {
            "text": "Kansas",
            "value": "KS",
          },
          Object {
            "text": "Kentucky",
            "value": "KY",
          },
          Object {
            "text": "Louisiana",
            "value": "LA",
          },
          Object {
            "text": "Maine",
            "value": "ME",
          },
          Object {
            "text": "Maryland",
            "value": "MD",
          },
          Object {
            "text": "Massachusetts",
            "value": "MA",
          },
          Object {
            "text": "Michigan",
            "value": "MI",
          },
          Object {
            "text": "Minnesota",
            "value": "MN",
          },
          Object {
            "text": "Mississippi",
            "value": "MS",
          },
          Object {
            "text": "Missouri",
            "value": "MO",
          },
          Object {
            "text": "Montana",
            "value": "MT",
          },
          Object {
            "text": "Nebraska",
            "value": "NE",
          },
          Object {
            "text": "Nevada",
            "value": "NV",
          },
          Object {
            "text": "New Hampshire",
            "value": "NH",
          },
          Object {
            "text": "New Jersey",
            "value": "NJ",
          },
          Object {
            "text": "New Mexico",
            "value": "NM",
          },
          Object {
            "text": "New York",
            "value": "NY",
          },
          Object {
            "text": "North Carolina",
            "value": "NC",
          },
          Object {
            "text": "North Dakota",
            "value": "ND",
          },
          Object {
            "text": "Ohio",
            "value": "OH",
          },
          Object {
            "text": "Oklahoma",
            "value": "OK",
          },
          Object {
            "text": "Oregon",
            "value": "OR",
          },
          Object {
            "text": "Pennsylvania",
            "value": "PA",
          },
          Object {
            "text": "Rhode Island",
            "value": "RI",
          },
          Object {
            "text": "South Carolina",
            "value": "SC",
          },
          Object {
            "text": "South Dakota",
            "value": "SD",
          },
          Object {
            "text": "Tennessee",
            "value": "TN",
          },
          Object {
            "text": "Texas",
            "value": "TX",
          },
          Object {
            "text": "Utah",
            "value": "UT",
          },
          Object {
            "text": "Vermont",
            "value": "VT",
          },
          Object {
            "text": "Virginia",
            "value": "VA",
          },
          Object {
            "text": "Washington",
            "value": "WA",
          },
          Object {
            "text": "West Virginia",
            "value": "WV",
          },
          Object {
            "text": "Wisconsin",
            "value": "WI",
          },
          Object {
            "text": "Wyoming",
            "value": "WY",
          },
        ]
      }
      input={[Function]}
      label="State"
      name="state"
      placeholder="Choose a state..."
      required={true}
      requiredText="Required"
    >
      <FormField>
        <div
          className="css-37"
        >
          <label>
            <glamorous(div)
              key="formField-134-textWrapper"
            >
              <div
                className="css-38"
              >
                <span
                  id="formField-134-labelText"
                >
                  State
                </span>
                <glamorous(span)>
                  <span
                    className="css-39"
                  >
                    Required
                  </span>
                </glamorous(span)>
              </div>
            </glamorous(div)>
            <Select
              aria-describedby="formField-134-caption"
              data={
                Array [
                  Object {
                    "text": "Alabama",
                    "value": "AL",
                  },
                  Object {
                    "text": "Alaska",
                    "value": "AK",
                  },
                  Object {
                    "text": "Arizona",
                    "value": "AZ",
                  },
                  Object {
                    "text": "Arkansas",
                    "value": "AR",
                  },
                  Object {
                    "text": "California",
                    "value": "CA",
                  },
                  Object {
                    "text": "Colorado",
                    "value": "CO",
                  },
                  Object {
                    "text": "Connecticut",
                    "value": "CT",
                  },
                  Object {
                    "text": "Delaware",
                    "value": "DE",
                  },
                  Object {
                    "text": "Florida",
                    "value": "FL",
                  },
                  Object {
                    "text": "Georgia",
                    "value": "GA",
                  },
                  Object {
                    "text": "Hawaii",
                    "value": "HI",
                  },
                  Object {
                    "text": "Idaho",
                    "value": "ID",
                  },
                  Object {
                    "text": "Illinois",
                    "value": "IL",
                  },
                  Object {
                    "text": "Indiana",
                    "value": "IN",
                  },
                  Object {
                    "text": "Iowa",
                    "value": "IA",
                  },
                  Object {
                    "text": "Kansas",
                    "value": "KS",
                  },
                  Object {
                    "text": "Kentucky",
                    "value": "KY",
                  },
                  Object {
                    "text": "Louisiana",
                    "value": "LA",
                  },
                  Object {
                    "text": "Maine",
                    "value": "ME",
                  },
                  Object {
                    "text": "Maryland",
                    "value": "MD",
                  },
                  Object {
                    "text": "Massachusetts",
                    "value": "MA",
                  },
                  Object {
                    "text": "Michigan",
                    "value": "MI",
                  },
                  Object {
                    "text": "Minnesota",
                    "value": "MN",
                  },
                  Object {
                    "text": "Mississippi",
                    "value": "MS",
                  },
                  Object {
                    "text": "Missouri",
                    "value": "MO",
                  },
                  Object {
                    "text": "Montana",
                    "value": "MT",
                  },
                  Object {
                    "text": "Nebraska",
                    "value": "NE",
                  },
                  Object {
                    "text": "Nevada",
                    "value": "NV",
                  },
                  Object {
                    "text": "New Hampshire",
                    "value": "NH",
                  },
                  Object {
                    "text": "New Jersey",
                    "value": "NJ",
                  },
                  Object {
                    "text": "New Mexico",
                    "value": "NM",
                  },
                  Object {
                    "text": "New York",
                    "value": "NY",
                  },
                  Object {
                    "text": "North Carolina",
                    "value": "NC",
                  },
                  Object {
                    "text": "North Dakota",
                    "value": "ND",
                  },
                  Object {
                    "text": "Ohio",
                    "value": "OH",
                  },
                  Object {
                    "text": "Oklahoma",
                    "value": "OK",
                  },
                  Object {
                    "text": "Oregon",
                    "value": "OR",
                  },
                  Object {
                    "text": "Pennsylvania",
                    "value": "PA",
                  },
                  Object {
                    "text": "Rhode Island",
                    "value": "RI",
                  },
                  Object {
                    "text": "South Carolina",
                    "value": "SC",
                  },
                  Object {
                    "text": "South Dakota",
                    "value": "SD",
                  },
                  Object {
                    "text": "Tennessee",
                    "value": "TN",
                  },
                  Object {
                    "text": "Texas",
                    "value": "TX",
                  },
                  Object {
                    "text": "Utah",
                    "value": "UT",
                  },
                  Object {
                    "text": "Vermont",
                    "value": "VT",
                  },
                  Object {
                    "text": "Virginia",
                    "value": "VA",
                  },
                  Object {
                    "text": "Washington",
                    "value": "WA",
                  },
                  Object {
                    "text": "West Virginia",
                    "value": "WV",
                  },
                  Object {
                    "text": "Wisconsin",
                    "value": "WI",
                  },
                  Object {
                    "text": "Wyoming",
                    "value": "WY",
                  },
                ]
              }
              key="formField-134-control"
              name="state"
              placeholder="Choose a state..."
              placement="bottom-start"
              required={true}
              size="large"
            >
              <Select
                aria-describedby="formField-134-caption"
                data={
                  Array [
                    Object {
                      "text": "Alabama",
                      "value": "AL",
                    },
                    Object {
                      "text": "Alaska",
                      "value": "AK",
                    },
                    Object {
                      "text": "Arizona",
                      "value": "AZ",
                    },
                    Object {
                      "text": "Arkansas",
                      "value": "AR",
                    },
                    Object {
                      "text": "California",
                      "value": "CA",
                    },
                    Object {
                      "text": "Colorado",
                      "value": "CO",
                    },
                    Object {
                      "text": "Connecticut",
                      "value": "CT",
                    },
                    Object {
                      "text": "Delaware",
                      "value": "DE",
                    },
                    Object {
                      "text": "Florida",
                      "value": "FL",
                    },
                    Object {
                      "text": "Georgia",
                      "value": "GA",
                    },
                    Object {
                      "text": "Hawaii",
                      "value": "HI",
                    },
                    Object {
                      "text": "Idaho",
                      "value": "ID",
                    },
                    Object {
                      "text": "Illinois",
                      "value": "IL",
                    },
                    Object {
                      "text": "Indiana",
                      "value": "IN",
                    },
                    Object {
                      "text": "Iowa",
                      "value": "IA",
                    },
                    Object {
                      "text": "Kansas",
                      "value": "KS",
                    },
                    Object {
                      "text": "Kentucky",
                      "value": "KY",
                    },
                    Object {
                      "text": "Louisiana",
                      "value": "LA",
                    },
                    Object {
                      "text": "Maine",
                      "value": "ME",
                    },
                    Object {
                      "text": "Maryland",
                      "value": "MD",
                    },
                    Object {
                      "text": "Massachusetts",
                      "value": "MA",
                    },
                    Object {
                      "text": "Michigan",
                      "value": "MI",
                    },
                    Object {
                      "text": "Minnesota",
                      "value": "MN",
                    },
                    Object {
                      "text": "Mississippi",
                      "value": "MS",
                    },
                    Object {
                      "text": "Missouri",
                      "value": "MO",
                    },
                    Object {
                      "text": "Montana",
                      "value": "MT",
                    },
                    Object {
                      "text": "Nebraska",
                      "value": "NE",
                    },
                    Object {
                      "text": "Nevada",
                      "value": "NV",
                    },
                    Object {
                      "text": "New Hampshire",
                      "value": "NH",
                    },
                    Object {
                      "text": "New Jersey",
                      "value": "NJ",
                    },
                    Object {
                      "text": "New Mexico",
                      "value": "NM",
                    },
                    Object {
                      "text": "New York",
                      "value": "NY",
                    },
                    Object {
                      "text": "North Carolina",
                      "value": "NC",
                    },
                    Object {
                      "text": "North Dakota",
                      "value": "ND",
                    },
                    Object {
                      "text": "Ohio",
                      "value": "OH",
                    },
                    Object {
                      "text": "Oklahoma",
                      "value": "OK",
                    },
                    Object {
                      "text": "Oregon",
                      "value": "OR",
                    },
                    Object {
                      "text": "Pennsylvania",
                      "value": "PA",
                    },
                    Object {
                      "text": "Rhode Island",
                      "value": "RI",
                    },
                    Object {
                      "text": "South Carolina",
                      "value": "SC",
                    },
                    Object {
                      "text": "South Dakota",
                      "value": "SD",
                    },
                    Object {
                      "text": "Tennessee",
                      "value": "TN",
                    },
                    Object {
                      "text": "Texas",
                      "value": "TX",
                    },
                    Object {
                      "text": "Utah",
                      "value": "UT",
                    },
                    Object {
                      "text": "Vermont",
                      "value": "VT",
                    },
                    Object {
                      "text": "Virginia",
                      "value": "VA",
                    },
                    Object {
                      "text": "Washington",
                      "value": "WA",
                    },
                    Object {
                      "text": "West Virginia",
                      "value": "WV",
                    },
                    Object {
                      "text": "Wisconsin",
                      "value": "WI",
                    },
                    Object {
                      "text": "Wyoming",
                      "value": "WY",
                    },
                  ]
                }
                getItemProps={[Function]}
                getMenuProps={[Function]}
                getTriggerProps={[Function]}
                id="select-135"
                isOpen={false}
                modifiers={
                  Object {
                    "contentWidth": Object {
                      "enabled": true,
                      "fn": [Function],
                    },
                  }
                }
                onClose={[Function]}
                onOpen={[Function]}
                placement="bottom-start"
                required={true}
              >
                <ThemedComponent
                  aria-describedby="formField-134-caption"
                  className="css-0"
                  data={
                    Array [
                      Object {
                        "text": "Alabama",
                        "value": "AL",
                      },
                      Object {
                        "text": "Alaska",
                        "value": "AK",
                      },
                      Object {
                        "text": "Arizona",
                        "value": "AZ",
                      },
                      Object {
                        "text": "Arkansas",
                        "value": "AR",
                      },
                      Object {
                        "text": "California",
                        "value": "CA",
                      },
                      Object {
                        "text": "Colorado",
                        "value": "CO",
                      },
                      Object {
                        "text": "Connecticut",
                        "value": "CT",
                      },
                      Object {
                        "text": "Delaware",
                        "value": "DE",
                      },
                      Object {
                        "text": "Florida",
                        "value": "FL",
                      },
                      Object {
                        "text": "Georgia",
                        "value": "GA",
                      },
                      Object {
                        "text": "Hawaii",
                        "value": "HI",
                      },
                      Object {
                        "text": "Idaho",
                        "value": "ID",
                      },
                      Object {
                        "text": "Illinois",
                        "value": "IL",
                      },
                      Object {
                        "text": "Indiana",
                        "value": "IN",
                      },
                      Object {
                        "text": "Iowa",
                        "value": "IA",
                      },
                      Object {
                        "text": "Kansas",
                        "value": "KS",
                      },
                      Object {
                        "text": "Kentucky",
                        "value": "KY",
                      },
                      Object {
                        "text": "Louisiana",
                        "value": "LA",
                      },
                      Object {
                        "text": "Maine",
                        "value": "ME",
                      },
                      Object {
                        "text": "Maryland",
                        "value": "MD",
                      },
                      Object {
                        "text": "Massachusetts",
                        "value": "MA",
                      },
                      Object {
                        "text": "Michigan",
                        "value": "MI",
                      },
                      Object {
                        "text": "Minnesota",
                        "value": "MN",
                      },
                      Object {
                        "text": "Mississippi",
                        "value": "MS",
                      },
                      Object {
                        "text": "Missouri",
                        "value": "MO",
                      },
                      Object {
                        "text": "Montana",
                        "value": "MT",
                      },
                      Object {
                        "text": "Nebraska",
                        "value": "NE",
                      },
                      Object {
                        "text": "Nevada",
                        "value": "NV",
                      },
                      Object {
                        "text": "New Hampshire",
                        "value": "NH",
                      },
                      Object {
                        "text": "New Jersey",
                        "value": "NJ",
                      },
                      Object {
                        "text": "New Mexico",
                        "value": "NM",
                      },
                      Object {
                        "text": "New York",
                        "value": "NY",
                      },
                      Object {
                        "text": "North Carolina",
                        "value": "NC",
                      },
                      Object {
                        "text": "North Dakota",
                        "value": "ND",
                      },
                      Object {
                        "text": "Ohio",
                        "value": "OH",
                      },
                      Object {
                        "text": "Oklahoma",
                        "value": "OK",
                      },
                      Object {
                        "text": "Oregon",
                        "value": "OR",
                      },
                      Object {
                        "text": "Pennsylvania",
                        "value": "PA",
                      },
                      Object {
                        "text": "Rhode Island",
                        "value": "RI",
                      },
                      Object {
                        "text": "South Carolina",
                        "value": "SC",
                      },
                      Object {
                        "text": "South Dakota",
                        "value": "SD",
                      },
                      Object {
                        "text": "Tennessee",
                        "value": "TN",
                      },
                      Object {
                        "text": "Texas",
                        "value": "TX",
                      },
                      Object {
                        "text": "Utah",
                        "value": "UT",
                      },
                      Object {
                        "text": "Vermont",
                        "value": "VT",
                      },
                      Object {
                        "text": "Virginia",
                        "value": "VA",
                      },
                      Object {
                        "text": "Washington",
                        "value": "WA",
                      },
                      Object {
                        "text": "West Virginia",
                        "value": "WV",
                      },
                      Object {
                        "text": "Wisconsin",
                        "value": "WI",
                      },
                      Object {
                        "text": "Wyoming",
                        "value": "WY",
                      },
                    ]
                  }
                  getItemProps={[Function]}
                  getMenuProps={[Function]}
                  getTriggerProps={[Function]}
                  id="select-135"
                  isOpen={false}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placement="bottom-start"
                  required={true}
                >
                  <Themed(Dropdown)
                    aria-describedby="formField-134-caption"
                    className="css-0"
                    data={
                      Array [
                        Object {
                          "text": "Alabama",
                          "value": "AL",
                        },
                        Object {
                          "text": "Alaska",
                          "value": "AK",
                        },
                        Object {
                          "text": "Arizona",
                          "value": "AZ",
                        },
                        Object {
                          "text": "Arkansas",
                          "value": "AR",
                        },
                        Object {
                          "text": "California",
                          "value": "CA",
                        },
                        Object {
                          "text": "Colorado",
                          "value": "CO",
                        },
                        Object {
                          "text": "Connecticut",
                          "value": "CT",
                        },
                        Object {
                          "text": "Delaware",
                          "value": "DE",
                        },
                        Object {
                          "text": "Florida",
                          "value": "FL",
                        },
                        Object {
                          "text": "Georgia",
                          "value": "GA",
                        },
                        Object {
                          "text": "Hawaii",
                          "value": "HI",
                        },
                        Object {
                          "text": "Idaho",
                          "value": "ID",
                        },
                        Object {
                          "text": "Illinois",
                          "value": "IL",
                        },
                        Object {
                          "text": "Indiana",
                          "value": "IN",
                        },
                        Object {
                          "text": "Iowa",
                          "value": "IA",
                        },
                        Object {
                          "text": "Kansas",
                          "value": "KS",
                        },
                        Object {
                          "text": "Kentucky",
                          "value": "KY",
                        },
                        Object {
                          "text": "Louisiana",
                          "value": "LA",
                        },
                        Object {
                          "text": "Maine",
                          "value": "ME",
                        },
                        Object {
                          "text": "Maryland",
                          "value": "MD",
                        },
                        Object {
                          "text": "Massachusetts",
                          "value": "MA",
                        },
                        Object {
                          "text": "Michigan",
                          "value": "MI",
                        },
                        Object {
                          "text": "Minnesota",
                          "value": "MN",
                        },
                        Object {
                          "text": "Mississippi",
                          "value": "MS",
                        },
                        Object {
                          "text": "Missouri",
                          "value": "MO",
                        },
                        Object {
                          "text": "Montana",
                          "value": "MT",
                        },
                        Object {
                          "text": "Nebraska",
                          "value": "NE",
                        },
                        Object {
                          "text": "Nevada",
                          "value": "NV",
                        },
                        Object {
                          "text": "New Hampshire",
                          "value": "NH",
                        },
                        Object {
                          "text": "New Jersey",
                          "value": "NJ",
                        },
                        Object {
                          "text": "New Mexico",
                          "value": "NM",
                        },
                        Object {
                          "text": "New York",
                          "value": "NY",
                        },
                        Object {
                          "text": "North Carolina",
                          "value": "NC",
                        },
                        Object {
                          "text": "North Dakota",
                          "value": "ND",
                        },
                        Object {
                          "text": "Ohio",
                          "value": "OH",
                        },
                        Object {
                          "text": "Oklahoma",
                          "value": "OK",
                        },
                        Object {
                          "text": "Oregon",
                          "value": "OR",
                        },
                        Object {
                          "text": "Pennsylvania",
                          "value": "PA",
                        },
                        Object {
                          "text": "Rhode Island",
                          "value": "RI",
                        },
                        Object {
                          "text": "South Carolina",
                          "value": "SC",
                        },
                        Object {
                          "text": "South Dakota",
                          "value": "SD",
                        },
                        Object {
                          "text": "Tennessee",
                          "value": "TN",
                        },
                        Object {
                          "text": "Texas",
                          "value": "TX",
                        },
                        Object {
                          "text": "Utah",
                          "value": "UT",
                        },
                        Object {
                          "text": "Vermont",
                          "value": "VT",
                        },
                        Object {
                          "text": "Virginia",
                          "value": "VA",
                        },
                        Object {
                          "text": "Washington",
                          "value": "WA",
                        },
                        Object {
                          "text": "West Virginia",
                          "value": "WV",
                        },
                        Object {
                          "text": "Wisconsin",
                          "value": "WI",
                        },
                        Object {
                          "text": "Wyoming",
                          "value": "WY",
                        },
                      ]
                    }
                    getItemProps={[Function]}
                    getMenuProps={[Function]}
                    getTriggerProps={[Function]}
                    id="select-135"
                    isOpen={false}
                    modifiers={
                      Object {
                        "contentWidth": Object {
                          "enabled": true,
                          "fn": [Function],
                        },
                      }
                    }
                    onClose={[Function]}
                    onOpen={[Function]}
                    placement="bottom-start"
                    required={true}
                  >
                    <ThemeProvider>
                      <ThemeProvider>
                        <Dropdown
                          aria-describedby="formField-134-caption"
                          className="css-0"
                          data={
                            Array [
                              Object {
                                "text": "Alabama",
                                "value": "AL",
                              },
                              Object {
                                "text": "Alaska",
                                "value": "AK",
                              },
                              Object {
                                "text": "Arizona",
                                "value": "AZ",
                              },
                              Object {
                                "text": "Arkansas",
                                "value": "AR",
                              },
                              Object {
                                "text": "California",
                                "value": "CA",
                              },
                              Object {
                                "text": "Colorado",
                                "value": "CO",
                              },
                              Object {
                                "text": "Connecticut",
                                "value": "CT",
                              },
                              Object {
                                "text": "Delaware",
                                "value": "DE",
                              },
                              Object {
                                "text": "Florida",
                                "value": "FL",
                              },
                              Object {
                                "text": "Georgia",
                                "value": "GA",
                              },
                              Object {
                                "text": "Hawaii",
                                "value": "HI",
                              },
                              Object {
                                "text": "Idaho",
                                "value": "ID",
                              },
                              Object {
                                "text": "Illinois",
                                "value": "IL",
                              },
                              Object {
                                "text": "Indiana",
                                "value": "IN",
                              },
                              Object {
                                "text": "Iowa",
                                "value": "IA",
                              },
                              Object {
                                "text": "Kansas",
                                "value": "KS",
                              },
                              Object {
                                "text": "Kentucky",
                                "value": "KY",
                              },
                              Object {
                                "text": "Louisiana",
                                "value": "LA",
                              },
                              Object {
                                "text": "Maine",
                                "value": "ME",
                              },
                              Object {
                                "text": "Maryland",
                                "value": "MD",
                              },
                              Object {
                                "text": "Massachusetts",
                                "value": "MA",
                              },
                              Object {
                                "text": "Michigan",
                                "value": "MI",
                              },
                              Object {
                                "text": "Minnesota",
                                "value": "MN",
                              },
                              Object {
                                "text": "Mississippi",
                                "value": "MS",
                              },
                              Object {
                                "text": "Missouri",
                                "value": "MO",
                              },
                              Object {
                                "text": "Montana",
                                "value": "MT",
                              },
                              Object {
                                "text": "Nebraska",
                                "value": "NE",
                              },
                              Object {
                                "text": "Nevada",
                                "value": "NV",
                              },
                              Object {
                                "text": "New Hampshire",
                                "value": "NH",
                              },
                              Object {
                                "text": "New Jersey",
                                "value": "NJ",
                              },
                              Object {
                                "text": "New Mexico",
                                "value": "NM",
                              },
                              Object {
                                "text": "New York",
                                "value": "NY",
                              },
                              Object {
                                "text": "North Carolina",
                                "value": "NC",
                              },
                              Object {
                                "text": "North Dakota",
                                "value": "ND",
                              },
                              Object {
                                "text": "Ohio",
                                "value": "OH",
                              },
                              Object {
                                "text": "Oklahoma",
                                "value": "OK",
                              },
                              Object {
                                "text": "Oregon",
                                "value": "OR",
                              },
                              Object {
                                "text": "Pennsylvania",
                                "value": "PA",
                              },
                              Object {
                                "text": "Rhode Island",
                                "value": "RI",
                              },
                              Object {
                                "text": "South Carolina",
                                "value": "SC",
                              },
                              Object {
                                "text": "South Dakota",
                                "value": "SD",
                              },
                              Object {
                                "text": "Tennessee",
                                "value": "TN",
                              },
                              Object {
                                "text": "Texas",
                                "value": "TX",
                              },
                              Object {
                                "text": "Utah",
                                "value": "UT",
                              },
                              Object {
                                "text": "Vermont",
                                "value": "VT",
                              },
                              Object {
                                "text": "Virginia",
                                "value": "VA",
                              },
                              Object {
                                "text": "Washington",
                                "value": "WA",
                              },
                              Object {
                                "text": "West Virginia",
                                "value": "WV",
                              },
                              Object {
                                "text": "Wisconsin",
                                "value": "WI",
                              },
                              Object {
                                "text": "Wyoming",
                                "value": "WY",
                              },
                            ]
                          }
                          getItemProps={[Function]}
                          getMenuProps={[Function]}
                          getTriggerProps={[Function]}
                          id="select-135"
                          isOpen={false}
                          modifiers={
                            Object {
                              "contentWidth": Object {
                                "enabled": true,
                                "fn": [Function],
                              },
                            }
                          }
                          onClose={[Function]}
                          onOpen={[Function]}
                          placement="bottom-start"
                          required={true}
                        >
                          <Popover
                            aria-describedby="formField-134-caption"
                            className="css-0"
                            content={
                              <DropdownContent
                                data={
                                  Array [
                                    Object {
                                      "text": "Alabama",
                                      "value": "AL",
                                    },
                                    Object {
                                      "text": "Alaska",
                                      "value": "AK",
                                    },
                                    Object {
                                      "text": "Arizona",
                                      "value": "AZ",
                                    },
                                    Object {
                                      "text": "Arkansas",
                                      "value": "AR",
                                    },
                                    Object {
                                      "text": "California",
                                      "value": "CA",
                                    },
                                    Object {
                                      "text": "Colorado",
                                      "value": "CO",
                                    },
                                    Object {
                                      "text": "Connecticut",
                                      "value": "CT",
                                    },
                                    Object {
                                      "text": "Delaware",
                                      "value": "DE",
                                    },
                                    Object {
                                      "text": "Florida",
                                      "value": "FL",
                                    },
                                    Object {
                                      "text": "Georgia",
                                      "value": "GA",
                                    },
                                    Object {
                                      "text": "Hawaii",
                                      "value": "HI",
                                    },
                                    Object {
                                      "text": "Idaho",
                                      "value": "ID",
                                    },
                                    Object {
                                      "text": "Illinois",
                                      "value": "IL",
                                    },
                                    Object {
                                      "text": "Indiana",
                                      "value": "IN",
                                    },
                                    Object {
                                      "text": "Iowa",
                                      "value": "IA",
                                    },
                                    Object {
                                      "text": "Kansas",
                                      "value": "KS",
                                    },
                                    Object {
                                      "text": "Kentucky",
                                      "value": "KY",
                                    },
                                    Object {
                                      "text": "Louisiana",
                                      "value": "LA",
                                    },
                                    Object {
                                      "text": "Maine",
                                      "value": "ME",
                                    },
                                    Object {
                                      "text": "Maryland",
                                      "value": "MD",
                                    },
                                    Object {
                                      "text": "Massachusetts",
                                      "value": "MA",
                                    },
                                    Object {
                                      "text": "Michigan",
                                      "value": "MI",
                                    },
                                    Object {
                                      "text": "Minnesota",
                                      "value": "MN",
                                    },
                                    Object {
                                      "text": "Mississippi",
                                      "value": "MS",
                                    },
                                    Object {
                                      "text": "Missouri",
                                      "value": "MO",
                                    },
                                    Object {
                                      "text": "Montana",
                                      "value": "MT",
                                    },
                                    Object {
                                      "text": "Nebraska",
                                      "value": "NE",
                                    },
                                    Object {
                                      "text": "Nevada",
                                      "value": "NV",
                                    },
                                    Object {
                                      "text": "New Hampshire",
                                      "value": "NH",
                                    },
                                    Object {
                                      "text": "New Jersey",
                                      "value": "NJ",
                                    },
                                    Object {
                                      "text": "New Mexico",
                                      "value": "NM",
                                    },
                                    Object {
                                      "text": "New York",
                                      "value": "NY",
                                    },
                                    Object {
                                      "text": "North Carolina",
                                      "value": "NC",
                                    },
                                    Object {
                                      "text": "North Dakota",
                                      "value": "ND",
                                    },
                                    Object {
                                      "text": "Ohio",
                                      "value": "OH",
                                    },
                                    Object {
                                      "text": "Oklahoma",
                                      "value": "OK",
                                    },
                                    Object {
                                      "text": "Oregon",
                                      "value": "OR",
                                    },
                                    Object {
                                      "text": "Pennsylvania",
                                      "value": "PA",
                                    },
                                    Object {
                                      "text": "Rhode Island",
                                      "value": "RI",
                                    },
                                    Object {
                                      "text": "South Carolina",
                                      "value": "SC",
                                    },
                                    Object {
                                      "text": "South Dakota",
                                      "value": "SD",
                                    },
                                    Object {
                                      "text": "Tennessee",
                                      "value": "TN",
                                    },
                                    Object {
                                      "text": "Texas",
                                      "value": "TX",
                                    },
                                    Object {
                                      "text": "Utah",
                                      "value": "UT",
                                    },
                                    Object {
                                      "text": "Vermont",
                                      "value": "VT",
                                    },
                                    Object {
                                      "text": "Virginia",
                                      "value": "VA",
                                    },
                                    Object {
                                      "text": "Washington",
                                      "value": "WA",
                                    },
                                    Object {
                                      "text": "West Virginia",
                                      "value": "WV",
                                    },
                                    Object {
                                      "text": "Wisconsin",
                                      "value": "WI",
                                    },
                                    Object {
                                      "text": "Wyoming",
                                      "value": "WY",
                                    },
                                  ]
                                }
                                getItemProps={[Function]}
                                getMenuProps={[Function]}
                                id="select-135-content"
                                modifiers={
                                  Object {
                                    "contentWidth": Object {
                                      "enabled": true,
                                      "fn": [Function],
                                    },
                                  }
                                }
                                placement="bottom-start"
                                wide={undefined}
                              />
                            }
                            focusTriggerOnClose={true}
                            getItemProps={[Function]}
                            getMenuProps={[Function]}
                            getTriggerProps={[Function]}
                            hasArrow={true}
                            id="select-135"
                            isOpen={false}
                            onClose={[Function]}
                            onOpen={[Function]}
                            placement="bottom"
                            required={true}
                            triggerRef={[Function]}
                            wrapContent={false}
                          >
                            <Popover
                              aria-describedby="formField-134-caption"
                              className="css-0"
                              content={
                                <DropdownContent
                                  data={
                                    Array [
                                      Object {
                                        "text": "Alabama",
                                        "value": "AL",
                                      },
                                      Object {
                                        "text": "Alaska",
                                        "value": "AK",
                                      },
                                      Object {
                                        "text": "Arizona",
                                        "value": "AZ",
                                      },
                                      Object {
                                        "text": "Arkansas",
                                        "value": "AR",
                                      },
                                      Object {
                                        "text": "California",
                                        "value": "CA",
                                      },
                                      Object {
                                        "text": "Colorado",
                                        "value": "CO",
                                      },
                                      Object {
                                        "text": "Connecticut",
                                        "value": "CT",
                                      },
                                      Object {
                                        "text": "Delaware",
                                        "value": "DE",
                                      },
                                      Object {
                                        "text": "Florida",
                                        "value": "FL",
                                      },
                                      Object {
                                        "text": "Georgia",
                                        "value": "GA",
                                      },
                                      Object {
                                        "text": "Hawaii",
                                        "value": "HI",
                                      },
                                      Object {
                                        "text": "Idaho",
                                        "value": "ID",
                                      },
                                      Object {
                                        "text": "Illinois",
                                        "value": "IL",
                                      },
                                      Object {
                                        "text": "Indiana",
                                        "value": "IN",
                                      },
                                      Object {
                                        "text": "Iowa",
                                        "value": "IA",
                                      },
                                      Object {
                                        "text": "Kansas",
                                        "value": "KS",
                                      },
                                      Object {
                                        "text": "Kentucky",
                                        "value": "KY",
                                      },
                                      Object {
                                        "text": "Louisiana",
                                        "value": "LA",
                                      },
                                      Object {
                                        "text": "Maine",
                                        "value": "ME",
                                      },
                                      Object {
                                        "text": "Maryland",
                                        "value": "MD",
                                      },
                                      Object {
                                        "text": "Massachusetts",
                                        "value": "MA",
                                      },
                                      Object {
                                        "text": "Michigan",
                                        "value": "MI",
                                      },
                                      Object {
                                        "text": "Minnesota",
                                        "value": "MN",
                                      },
                                      Object {
                                        "text": "Mississippi",
                                        "value": "MS",
                                      },
                                      Object {
                                        "text": "Missouri",
                                        "value": "MO",
                                      },
                                      Object {
                                        "text": "Montana",
                                        "value": "MT",
                                      },
                                      Object {
                                        "text": "Nebraska",
                                        "value": "NE",
                                      },
                                      Object {
                                        "text": "Nevada",
                                        "value": "NV",
                                      },
                                      Object {
                                        "text": "New Hampshire",
                                        "value": "NH",
                                      },
                                      Object {
                                        "text": "New Jersey",
                                        "value": "NJ",
                                      },
                                      Object {
                                        "text": "New Mexico",
                                        "value": "NM",
                                      },
                                      Object {
                                        "text": "New York",
                                        "value": "NY",
                                      },
                                      Object {
                                        "text": "North Carolina",
                                        "value": "NC",
                                      },
                                      Object {
                                        "text": "North Dakota",
                                        "value": "ND",
                                      },
                                      Object {
                                        "text": "Ohio",
                                        "value": "OH",
                                      },
                                      Object {
                                        "text": "Oklahoma",
                                        "value": "OK",
                                      },
                                      Object {
                                        "text": "Oregon",
                                        "value": "OR",
                                      },
                                      Object {
                                        "text": "Pennsylvania",
                                        "value": "PA",
                                      },
                                      Object {
                                        "text": "Rhode Island",
                                        "value": "RI",
                                      },
                                      Object {
                                        "text": "South Carolina",
                                        "value": "SC",
                                      },
                                      Object {
                                        "text": "South Dakota",
                                        "value": "SD",
                                      },
                                      Object {
                                        "text": "Tennessee",
                                        "value": "TN",
                                      },
                                      Object {
                                        "text": "Texas",
                                        "value": "TX",
                                      },
                                      Object {
                                        "text": "Utah",
                                        "value": "UT",
                                      },
                                      Object {
                                        "text": "Vermont",
                                        "value": "VT",
                                      },
                                      Object {
                                        "text": "Virginia",
                                        "value": "VA",
                                      },
                                      Object {
                                        "text": "Washington",
                                        "value": "WA",
                                      },
                                      Object {
                                        "text": "West Virginia",
                                        "value": "WV",
                                      },
                                      Object {
                                        "text": "Wisconsin",
                                        "value": "WI",
                                      },
                                      Object {
                                        "text": "Wyoming",
                                        "value": "WY",
                                      },
                                    ]
                                  }
                                  getItemProps={[Function]}
                                  getMenuProps={[Function]}
                                  id="select-135-content"
                                  modifiers={
                                    Object {
                                      "contentWidth": Object {
                                        "enabled": true,
                                        "fn": [Function],
                                      },
                                    }
                                  }
                                  placement="bottom-start"
                                  wide={undefined}
                                />
                              }
                              focusTriggerOnClose={true}
                              getItemProps={[Function]}
                              getMenuProps={[Function]}
                              getTriggerProps={[Function]}
                              hasArrow={true}
                              id="select-135"
                              isOpen={false}
                              onClose={[Function]}
                              onOpen={[Function]}
                              placement="bottom"
                              required={true}
                              tag="span"
                              triggerRef={[Function]}
                              wrapContent={false}
                            >
                              <Manager
                                aria-describedby="formField-134-caption"
                                className="css-1"
                                id="select-135"
                                tag="span"
                              >
                                <span
                                  aria-describedby="formField-134-caption"
                                  className="css-1"
                                  id="select-135"
                                >
                                  <PopoverTrigger
                                    aria-describedby="select-135-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-135-content"
                                    aria-required={true}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    role="button"
                                    tabIndex={0}
                                  >
                                    <PopoverTrigger
                                      component="span"
                                    >
                                      <Target
                                        className="css-2"
                                        component="span"
                                      >
                                        <span
                                          className="css-2"
                                        >
                                          <SelectTrigger
                                            aria-describedby="select-135-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-135-content"
                                            aria-required={true}
                                            isOpen={false}
                                            name="state"
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            placeholder="Choose a state..."
                                            role="button"
                                            size="large"
                                            tabIndex={0}
                                            triggerRef={[Function]}
                                          >
                                            <SelectTrigger
                                              afterItems={
                                                Array [
                                                  <IconArrowDropdownDown
                                                    css={
                                                      Object {
                                                        "margin": "0.5em",
                                                      }
                                                    }
                                                    size="1.5em"
                                                  />,
                                                  <input
                                                    name="state"
                                                    type="hidden"
                                                    value=""
                                                  />,
                                                ]
                                              }
                                              aria-describedby="select-135-content"
                                              aria-expanded={false}
                                              aria-haspopup="listbox"
                                              aria-owns="select-135-content"
                                              aria-required={true}
                                              control={[Function]}
                                              controlProps={
                                                Object {
                                                  "hasPlaceholder": true,
                                                  "variant": undefined,
                                                }
                                              }
                                              fauxControlRef={[Function]}
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onKeyDown={[Function]}
                                              onKeyUp={[Function]}
                                              role="button"
                                              size="large"
                                              tabIndex={0}
                                            >
                                              <FauxControl
                                                afterItems={
                                                  Array [
                                                    <IconArrowDropdownDown
                                                      css={
                                                        Object {
                                                          "margin": "0.5em",
                                                        }
                                                      }
                                                      size="1.5em"
                                                    />,
                                                    <input
                                                      name="state"
                                                      type="hidden"
                                                      value=""
                                                    />,
                                                  ]
                                                }
                                                aria-describedby="select-135-content"
                                                aria-expanded={false}
                                                aria-haspopup="listbox"
                                                aria-owns="select-135-content"
                                                aria-required={true}
                                                className="css-3"
                                                control={[Function]}
                                                controlProps={
                                                  Object {
                                                    "hasPlaceholder": true,
                                                    "variant": undefined,
                                                  }
                                                }
                                                fauxControlRef={[Function]}
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                role="button"
                                                size="large"
                                                tabIndex={0}
                                              >
                                                <FauxControl
                                                  aria-describedby="select-135-content"
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-135-content"
                                                  aria-required={true}
                                                  className="css-3"
                                                  control={[Function]}
                                                  innerRef={[Function]}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <div
                                                    aria-describedby="select-135-content"
                                                    aria-expanded={false}
                                                    aria-haspopup="listbox"
                                                    aria-owns="select-135-content"
                                                    aria-required={true}
                                                    className="css-7"
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    role="button"
                                                    tabIndex={0}
                                                  >
                                                    <glamorous(Trigger)
                                                      controlPropsIn={
                                                        Object {
                                                          "hasPlaceholder": true,
                                                          "variant": undefined,
                                                        }
                                                      }
                                                      hasPlaceholder={true}
                                                      key="control"
                                                      size="large"
                                                    >
                                                      <div
                                                        className="css-20"
                                                      >
                                                        <TriggerContent>
                                                          <span
                                                            className="css-34"
                                                          >
                                                            Choose a state...
                                                          </span>
                                                        </TriggerContent>
                                                      </div>
                                                    </glamorous(Trigger)>
                                                    <IconArrowDropdownDown
                                                      css={
                                                        Object {
                                                          "margin": "0.5em",
                                                        }
                                                      }
                                                      key="arrow"
                                                      size="1.5em"
                                                    >
                                                      <Icon
                                                        css={
                                                          Object {
                                                            "margin": "0.5em",
                                                          }
                                                        }
                                                        rtl={false}
                                                        size="1.5em"
                                                      >
                                                        <glamorous(svg)
                                                          aria-hidden={true}
                                                          css={
                                                            Object {
                                                              "margin": "0.5em",
                                                            }
                                                          }
                                                          role="img"
                                                          rtl={false}
                                                          size="1.5em"
                                                          viewBox="0 0 24 24"
                                                        >
                                                          <svg
                                                            aria-hidden={true}
                                                            className="css-35"
                                                            role="img"
                                                            viewBox="0 0 24 24"
                                                          >
                                                            <g>
                                                              <path
                                                                d="M12 17.5l-8-8h16z"
                                                              />
                                                            </g>
                                                          </svg>
                                                        </glamorous(svg)>
                                                      </Icon>
                                                    </IconArrowDropdownDown>
                                                    <input
                                                      key="input"
                                                      name="state"
                                                      type="hidden"
                                                      value=""
                                                    />
                                                    <Underlay>
                                                      <div
                                                        className="css-36"
                                                      />
                                                    </Underlay>
                                                  </div>
                                                </FauxControl>
                                              </FauxControl>
                                            </SelectTrigger>
                                          </SelectTrigger>
                                        </span>
                                      </Target>
                                    </PopoverTrigger>
                                  </PopoverTrigger>
                                </span>
                              </Manager>
                            </Popover>
                          </Popover>
                        </Dropdown>
                      </ThemeProvider>
                    </ThemeProvider>
                  </Themed(Dropdown)>
                </ThemedComponent>
              </Select>
            </Select>
          </label>
          <glamorous(div)
            caption="Lorem ipsum dolor sit amet, consectetur adipiscing elit."
            id="formField-134-caption"
          >
            <div
              className="css-40"
              id="formField-134-caption"
            >
              Lorem ipsum dolor sit amet, consectetur adipiscing elit.
            </div>
          </glamorous(div)>
        </div>
      </FormField>
    </FormField>
  </div>
</glamorous(div)>
`;

exports[`Select demo examples invalid 1`] = `
.css-0,
[data-css-0] {
  width: 100%;
}

.css-0 > span,
[data-css-0] > span {
  width: 100%;
}

.css-1,
[data-css-1] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: inline-block;
  width: 100%;
}

.css-1 *,
[data-css-1] *,
.css-1 *::before,
[data-css-1] *::before,
.css-1 *::after,
[data-css-1] *::after {
  box-sizing: inherit;
}

.css-1 > span,
[data-css-1] > span {
  width: 100%;
}

.css-2,
[data-css-2] {
  display: inline-block;
}

.css-3,
[data-css-3] {
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-3 [role="img"],
[data-css-3] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-3 [role="img"]:first-child,
[data-css-3] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-3 :not([role="img"]) ~ [role="img"],
[data-css-3] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-3 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-3] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-7,
[data-css-7] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-7 *,
[data-css-7] *,
.css-7 *::before,
[data-css-7] *::before,
.css-7 *::after,
[data-css-7] *::after {
  box-sizing: inherit;
}

.css-7:hover > div:last-child,
[data-css-7]:hover > div:last-child,
.css-7[data-simulate-hover] > div:last-child,
[data-css-7][data-simulate-hover] > div:last-child {
  border-color: #2e6fd9;
}

.css-7:focus > div:last-child,
[data-css-7]:focus > div:last-child,
.css-7[data-simulate-focus] > div:last-child,
[data-css-7][data-simulate-focus] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7:active > div:last-child,
[data-css-7]:active > div:last-child,
.css-7[data-simulate-active] > div:last-child,
[data-css-7][data-simulate-active] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7 [role="img"],
[data-css-7] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-7 [role="img"]:first-child,
[data-css-7] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-7 :not([role="img"]) ~ [role="img"],
[data-css-7] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-7 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-7] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-20,
[data-css-20] {
  align-items: center;
  color: #8e99ab;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  font-style: italic;
  height: 2.857142857142857em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-20::placeholder,
[data-css-20]::placeholder,
.css-20[data-simulate-placeholder],
[data-css-20][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-input-placeholder,
[data-css-20]::-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20:-ms-input-placeholder,
[data-css-20]:-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-clear,
[data-css-20]::-ms-clear,
.css-20[data-simulate-msclear],
[data-css-20][data-simulate-msclear] {
  display: none;
}

.css-20:focus ~ div:last-child,
[data-css-20]:focus ~ div:last-child,
.css-20[data-simulate-focus] ~ div:last-child,
[data-css-20][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-34,
[data-css-34] {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  user-select: none;
  width: 100%;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.css-35,
[data-css-35] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.css-36,
[data-css-36] {
  background-color: #fff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

<Select
  data={
    Array [
      Object {
        "text": "Alpha",
        "value": "alpha",
      },
      Object {
        "text": "Beta",
        "value": "beta",
      },
      Object {
        "text": "Gamma",
        "value": "gamma",
      },
    ]
  }
  invalid={true}
  placeholder="Select..."
  placement="bottom-start"
  size="large"
>
  <Select
    data={
      Array [
        Object {
          "text": "Alpha",
          "value": "alpha",
        },
        Object {
          "text": "Beta",
          "value": "beta",
        },
        Object {
          "text": "Gamma",
          "value": "gamma",
        },
      ]
    }
    getItemProps={[Function]}
    getMenuProps={[Function]}
    getTriggerProps={[Function]}
    id="select-100"
    invalid={true}
    isOpen={false}
    modifiers={
      Object {
        "contentWidth": Object {
          "enabled": true,
          "fn": [Function],
        },
      }
    }
    onClose={[Function]}
    onOpen={[Function]}
    placement="bottom-start"
  >
    <ThemedComponent
      className="css-0"
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      getItemProps={[Function]}
      getMenuProps={[Function]}
      getTriggerProps={[Function]}
      id="select-100"
      invalid={true}
      isOpen={false}
      modifiers={
        Object {
          "contentWidth": Object {
            "enabled": true,
            "fn": [Function],
          },
        }
      }
      onClose={[Function]}
      onOpen={[Function]}
      placement="bottom-start"
    >
      <Themed(Dropdown)
        className="css-0"
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        getItemProps={[Function]}
        getMenuProps={[Function]}
        getTriggerProps={[Function]}
        id="select-100"
        invalid={true}
        isOpen={false}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placement="bottom-start"
      >
        <ThemeProvider>
          <ThemeProvider>
            <Dropdown
              className="css-0"
              data={
                Array [
                  Object {
                    "text": "Alpha",
                    "value": "alpha",
                  },
                  Object {
                    "text": "Beta",
                    "value": "beta",
                  },
                  Object {
                    "text": "Gamma",
                    "value": "gamma",
                  },
                ]
              }
              getItemProps={[Function]}
              getMenuProps={[Function]}
              getTriggerProps={[Function]}
              id="select-100"
              invalid={true}
              isOpen={false}
              modifiers={
                Object {
                  "contentWidth": Object {
                    "enabled": true,
                    "fn": [Function],
                  },
                }
              }
              onClose={[Function]}
              onOpen={[Function]}
              placement="bottom-start"
            >
              <Popover
                className="css-0"
                content={
                  <DropdownContent
                    data={
                      Array [
                        Object {
                          "text": "Alpha",
                          "value": "alpha",
                        },
                        Object {
                          "text": "Beta",
                          "value": "beta",
                        },
                        Object {
                          "text": "Gamma",
                          "value": "gamma",
                        },
                      ]
                    }
                    getItemProps={[Function]}
                    getMenuProps={[Function]}
                    id="select-100-content"
                    modifiers={
                      Object {
                        "contentWidth": Object {
                          "enabled": true,
                          "fn": [Function],
                        },
                      }
                    }
                    placement="bottom-start"
                    wide={undefined}
                  />
                }
                focusTriggerOnClose={true}
                getItemProps={[Function]}
                getMenuProps={[Function]}
                getTriggerProps={[Function]}
                hasArrow={true}
                id="select-100"
                invalid={true}
                isOpen={false}
                onClose={[Function]}
                onOpen={[Function]}
                placement="bottom"
                triggerRef={[Function]}
                wrapContent={false}
              >
                <Popover
                  className="css-0"
                  content={
                    <DropdownContent
                      data={
                        Array [
                          Object {
                            "text": "Alpha",
                            "value": "alpha",
                          },
                          Object {
                            "text": "Beta",
                            "value": "beta",
                          },
                          Object {
                            "text": "Gamma",
                            "value": "gamma",
                          },
                        ]
                      }
                      getItemProps={[Function]}
                      getMenuProps={[Function]}
                      id="select-100-content"
                      modifiers={
                        Object {
                          "contentWidth": Object {
                            "enabled": true,
                            "fn": [Function],
                          },
                        }
                      }
                      placement="bottom-start"
                      wide={undefined}
                    />
                  }
                  focusTriggerOnClose={true}
                  getItemProps={[Function]}
                  getMenuProps={[Function]}
                  getTriggerProps={[Function]}
                  hasArrow={true}
                  id="select-100"
                  invalid={true}
                  isOpen={false}
                  onClose={[Function]}
                  onOpen={[Function]}
                  placement="bottom"
                  tag="span"
                  triggerRef={[Function]}
                  wrapContent={false}
                >
                  <Manager
                    className="css-1"
                    id="select-100"
                    tag="span"
                  >
                    <span
                      className="css-1"
                      id="select-100"
                    >
                      <PopoverTrigger
                        aria-describedby="select-100-content"
                        aria-expanded={false}
                        aria-haspopup="listbox"
                        aria-invalid={true}
                        aria-owns="select-100-content"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        role="button"
                        tabIndex={0}
                      >
                        <PopoverTrigger
                          component="span"
                        >
                          <Target
                            className="css-2"
                            component="span"
                          >
                            <span
                              className="css-2"
                            >
                              <SelectTrigger
                                aria-describedby="select-100-content"
                                aria-expanded={false}
                                aria-haspopup="listbox"
                                aria-invalid={true}
                                aria-owns="select-100-content"
                                isOpen={false}
                                onBlur={[Function]}
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                placeholder="Select..."
                                role="button"
                                size="large"
                                tabIndex={0}
                                triggerRef={[Function]}
                              >
                                <SelectTrigger
                                  afterItems={
                                    Array [
                                      <IconArrowDropdownDown
                                        css={
                                          Object {
                                            "margin": "0.5em",
                                          }
                                        }
                                        size="1.5em"
                                      />,
                                      <input
                                        name={undefined}
                                        type="hidden"
                                        value=""
                                      />,
                                    ]
                                  }
                                  aria-describedby="select-100-content"
                                  aria-expanded={false}
                                  aria-haspopup="listbox"
                                  aria-invalid={true}
                                  aria-owns="select-100-content"
                                  control={[Function]}
                                  controlProps={
                                    Object {
                                      "hasPlaceholder": true,
                                      "variant": undefined,
                                    }
                                  }
                                  fauxControlRef={[Function]}
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  role="button"
                                  size="large"
                                  tabIndex={0}
                                >
                                  <FauxControl
                                    afterItems={
                                      Array [
                                        <IconArrowDropdownDown
                                          css={
                                            Object {
                                              "margin": "0.5em",
                                            }
                                          }
                                          size="1.5em"
                                        />,
                                        <input
                                          name={undefined}
                                          type="hidden"
                                          value=""
                                        />,
                                      ]
                                    }
                                    aria-describedby="select-100-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-invalid={true}
                                    aria-owns="select-100-content"
                                    className="css-3"
                                    control={[Function]}
                                    controlProps={
                                      Object {
                                        "hasPlaceholder": true,
                                        "variant": undefined,
                                      }
                                    }
                                    fauxControlRef={[Function]}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                  >
                                    <FauxControl
                                      aria-describedby="select-100-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-invalid={true}
                                      aria-owns="select-100-content"
                                      className="css-3"
                                      control={[Function]}
                                      innerRef={[Function]}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      tabIndex={0}
                                    >
                                      <div
                                        aria-describedby="select-100-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-invalid={true}
                                        aria-owns="select-100-content"
                                        className="css-7"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        <glamorous(Trigger)
                                          controlPropsIn={
                                            Object {
                                              "hasPlaceholder": true,
                                              "variant": undefined,
                                            }
                                          }
                                          hasPlaceholder={true}
                                          key="control"
                                          size="large"
                                        >
                                          <div
                                            className="css-20"
                                          >
                                            <TriggerContent>
                                              <span
                                                className="css-34"
                                              >
                                                Select...
                                              </span>
                                            </TriggerContent>
                                          </div>
                                        </glamorous(Trigger)>
                                        <IconArrowDropdownDown
                                          css={
                                            Object {
                                              "margin": "0.5em",
                                            }
                                          }
                                          key="arrow"
                                          size="1.5em"
                                        >
                                          <Icon
                                            css={
                                              Object {
                                                "margin": "0.5em",
                                              }
                                            }
                                            rtl={false}
                                            size="1.5em"
                                          >
                                            <glamorous(svg)
                                              aria-hidden={true}
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              role="img"
                                              rtl={false}
                                              size="1.5em"
                                              viewBox="0 0 24 24"
                                            >
                                              <svg
                                                aria-hidden={true}
                                                className="css-35"
                                                role="img"
                                                viewBox="0 0 24 24"
                                              >
                                                <g>
                                                  <path
                                                    d="M12 17.5l-8-8h16z"
                                                  />
                                                </g>
                                              </svg>
                                            </glamorous(svg)>
                                          </Icon>
                                        </IconArrowDropdownDown>
                                        <input
                                          key="input"
                                          type="hidden"
                                          value=""
                                        />
                                        <Underlay>
                                          <div
                                            className="css-36"
                                          />
                                        </Underlay>
                                      </div>
                                    </FauxControl>
                                  </FauxControl>
                                </SelectTrigger>
                              </SelectTrigger>
                            </span>
                          </Target>
                        </PopoverTrigger>
                      </PopoverTrigger>
                    </span>
                  </Manager>
                </Popover>
              </Popover>
            </Dropdown>
          </ThemeProvider>
        </ThemeProvider>
      </Themed(Dropdown)>
    </ThemedComponent>
  </Select>
</Select>
`;

exports[`Select demo examples overflow 1`] = `
.css-0,
[data-css-0] {
  width: 100%;
}

.css-0 > span,
[data-css-0] > span {
  width: 100%;
}

.css-1,
[data-css-1] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: inline-block;
  width: 100%;
}

.css-1 *,
[data-css-1] *,
.css-1 *::before,
[data-css-1] *::before,
.css-1 *::after,
[data-css-1] *::after {
  box-sizing: inherit;
}

.css-1 > span,
[data-css-1] > span {
  width: 100%;
}

.css-2,
[data-css-2] {
  display: inline-block;
}

.css-3,
[data-css-3] {
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-3 [role="img"],
[data-css-3] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-3 [role="img"]:first-child,
[data-css-3] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-3 :not([role="img"]) ~ [role="img"],
[data-css-3] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-3 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-3] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-7,
[data-css-7] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-7 *,
[data-css-7] *,
.css-7 *::before,
[data-css-7] *::before,
.css-7 *::after,
[data-css-7] *::after {
  box-sizing: inherit;
}

.css-7:hover > div:last-child,
[data-css-7]:hover > div:last-child,
.css-7[data-simulate-hover] > div:last-child,
[data-css-7][data-simulate-hover] > div:last-child {
  border-color: #2e6fd9;
}

.css-7:focus > div:last-child,
[data-css-7]:focus > div:last-child,
.css-7[data-simulate-focus] > div:last-child,
[data-css-7][data-simulate-focus] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7:active > div:last-child,
[data-css-7]:active > div:last-child,
.css-7[data-simulate-active] > div:last-child,
[data-css-7][data-simulate-active] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7 [role="img"],
[data-css-7] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-7 [role="img"]:first-child,
[data-css-7] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-7 :not([role="img"]) ~ [role="img"],
[data-css-7] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-7 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-7] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-20,
[data-css-20] {
  align-items: center;
  color: #8e99ab;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  font-style: italic;
  height: 2.857142857142857em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-20::placeholder,
[data-css-20]::placeholder,
.css-20[data-simulate-placeholder],
[data-css-20][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-input-placeholder,
[data-css-20]::-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20:-ms-input-placeholder,
[data-css-20]:-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-clear,
[data-css-20]::-ms-clear,
.css-20[data-simulate-msclear],
[data-css-20][data-simulate-msclear] {
  display: none;
}

.css-20:focus ~ div:last-child,
[data-css-20]:focus ~ div:last-child,
.css-20[data-simulate-focus] ~ div:last-child,
[data-css-20][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-34,
[data-css-34] {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  user-select: none;
  width: 100%;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.css-35,
[data-css-35] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.css-36,
[data-css-36] {
  background-color: #fff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.css-37,
[data-css-37] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #fff;
  border: 1px solid #ebeff5;
  border-radius: 0.1875em;
  box-shadow: 0 2px 4px 0 rgba(0,0,0,0.2), 0 4px 8px 0 rgba(0,0,0,0.2);
  max-height: 23em;
  overflow-y: auto;
  user-select: none;
  width: 14em;
  z-index: 100;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.css-37 *,
[data-css-37] *,
.css-37 *::before,
[data-css-37] *::before,
.css-37 *::after,
[data-css-37] *::after {
  box-sizing: inherit;
}

.css-38,
[data-css-38] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
}

.css-38 *,
[data-css-38] *,
.css-38 *::before,
[data-css-38] *::before,
.css-38 *::after,
[data-css-38] *::after {
  box-sizing: inherit;
}

.css-39,
[data-css-39] {
  margin: 0.5em 0;
}

.css-39:first-child,
[data-css-39]:first-child,
.css-39 + .css-39,
[data-css-39] + [data-css-39] {
  margin-top: 0;
}

.css-39:last-child,
[data-css-39]:last-child,
.css-39[data-simulate-lastchild],
[data-css-39][data-simulate-lastchild] {
  margin-bottom: 0;
}

.css-45,
[data-css-45] {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  justify-content: space-between;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
}

.css-46,
[data-css-46] {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  flex-wrap: wrap;
  font-size: 0.875em;
  justify-content: space-between;
  padding: 0.21428571428571427em 0 0.2857142857142857em;
  white-space: normal;
  word-break: break-all;
  -webkit-flex: 1 1 auto;
  -webkit-box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
}

.css-47,
[data-css-47] {
  margin-right: 0.5714285714285714em;
  word-break: break-word;
}

.css-48,
[data-css-48] {
  color: #58606e;
  font-size: 0.75em;
  padding-top: 0.25em;
  word-break: break-word;
}

.css-49,
[data-css-49] {
  color: #333840;
  cursor: pointer;
  font-weight: 400;
  padding: 0.5em 1em;
}

.css-49:focus,
[data-css-49]:focus,
.css-49[data-simulate-focus],
[data-css-49][data-simulate-focus] {
  background-color: #f5f7fa;
  outline: 0;
}

.css-49:hover,
[data-css-49]:hover,
.css-49[data-simulate-hover],
[data-css-49][data-simulate-hover] {
  background-color: #f5f7fa;
}

.css-49:active,
[data-css-49]:active,
.css-49[data-simulate-active],
[data-css-49][data-simulate-active] {
  background-color: #ebeff5;
}

.css-49 [role="img"],
[data-css-49] [role="img"] {
  box-sizing: content-box;
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-49 [role="img"]:first-child,
[data-css-49] [role="img"]:first-child {
  margin-right: 0.5em;
}

.css-49 [role="img"]:last-child,
[data-css-49] [role="img"]:last-child {
  margin-left: 0.5em;
}

.css-60,
[data-css-60] {
  background-color: aliceblue;
  margin: 0 0 105px 0;
  overflow: hidden;
  padding: 25px;
}

<glamorous(div)>
  <div
    className="css-60"
  >
    <Select
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      isOpen={true}
      placeholder="Select..."
      placement="bottom-start"
      size="large"
    >
      <Select
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        getItemProps={[Function]}
        getMenuProps={[Function]}
        getTriggerProps={[Function]}
        id="select-121"
        isOpen={true}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placement="bottom-start"
      >
        <ThemedComponent
          className="css-0"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          getItemProps={[Function]}
          getMenuProps={[Function]}
          getTriggerProps={[Function]}
          id="select-121"
          isOpen={true}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placement="bottom-start"
        >
          <Themed(Dropdown)
            className="css-0"
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            getItemProps={[Function]}
            getMenuProps={[Function]}
            getTriggerProps={[Function]}
            id="select-121"
            isOpen={true}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onClose={[Function]}
            onOpen={[Function]}
            placement="bottom-start"
          >
            <ThemeProvider>
              <ThemeProvider>
                <Dropdown
                  className="css-0"
                  data={
                    Array [
                      Object {
                        "text": "Alpha",
                        "value": "alpha",
                      },
                      Object {
                        "text": "Beta",
                        "value": "beta",
                      },
                      Object {
                        "text": "Gamma",
                        "value": "gamma",
                      },
                    ]
                  }
                  getItemProps={[Function]}
                  getMenuProps={[Function]}
                  getTriggerProps={[Function]}
                  id="select-121"
                  isOpen={true}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placement="bottom-start"
                >
                  <Popover
                    className="css-0"
                    content={
                      <DropdownContent
                        data={
                          Array [
                            Object {
                              "text": "Alpha",
                              "value": "alpha",
                            },
                            Object {
                              "text": "Beta",
                              "value": "beta",
                            },
                            Object {
                              "text": "Gamma",
                              "value": "gamma",
                            },
                          ]
                        }
                        getItemProps={[Function]}
                        getMenuProps={[Function]}
                        id="select-121-content"
                        modifiers={
                          Object {
                            "contentWidth": Object {
                              "enabled": true,
                              "fn": [Function],
                            },
                          }
                        }
                        placement="bottom-start"
                        wide={undefined}
                      />
                    }
                    focusTriggerOnClose={true}
                    getItemProps={[Function]}
                    getMenuProps={[Function]}
                    getTriggerProps={[Function]}
                    hasArrow={true}
                    id="select-121"
                    isOpen={true}
                    onClose={[Function]}
                    onOpen={[Function]}
                    placement="bottom"
                    triggerRef={[Function]}
                    wrapContent={false}
                  >
                    <Popover
                      className="css-0"
                      content={
                        <DropdownContent
                          data={
                            Array [
                              Object {
                                "text": "Alpha",
                                "value": "alpha",
                              },
                              Object {
                                "text": "Beta",
                                "value": "beta",
                              },
                              Object {
                                "text": "Gamma",
                                "value": "gamma",
                              },
                            ]
                          }
                          getItemProps={[Function]}
                          getMenuProps={[Function]}
                          id="select-121-content"
                          modifiers={
                            Object {
                              "contentWidth": Object {
                                "enabled": true,
                                "fn": [Function],
                              },
                            }
                          }
                          placement="bottom-start"
                          wide={undefined}
                        />
                      }
                      focusTriggerOnClose={true}
                      getItemProps={[Function]}
                      getMenuProps={[Function]}
                      getTriggerProps={[Function]}
                      hasArrow={true}
                      id="select-121"
                      isOpen={true}
                      onClose={[Function]}
                      onOpen={[Function]}
                      placement="bottom"
                      tag="span"
                      triggerRef={[Function]}
                      wrapContent={false}
                    >
                      <Manager
                        className="css-1"
                        id="select-121"
                        tag="span"
                      >
                        <span
                          className="css-1"
                          id="select-121"
                        >
                          <PopoverTrigger
                            aria-activedescendant="select-121-menu"
                            aria-describedby="select-121-content"
                            aria-expanded={true}
                            aria-haspopup="listbox"
                            aria-owns="select-121-content"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            <PopoverTrigger
                              component="span"
                            >
                              <Target
                                className="css-2"
                                component="span"
                              >
                                <span
                                  className="css-2"
                                >
                                  <SelectTrigger
                                    aria-activedescendant="select-121-menu"
                                    aria-describedby="select-121-content"
                                    aria-expanded={true}
                                    aria-haspopup="listbox"
                                    aria-owns="select-121-content"
                                    isOpen={true}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    placeholder="Select..."
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                    triggerRef={[Function]}
                                  >
                                    <SelectTrigger
                                      afterItems={
                                        Array [
                                          <IconArrowDropdownUp
                                            css={
                                              Object {
                                                "margin": "0.5em",
                                              }
                                            }
                                            size="1.5em"
                                          />,
                                          <input
                                            name={undefined}
                                            type="hidden"
                                            value=""
                                          />,
                                        ]
                                      }
                                      aria-activedescendant="select-121-menu"
                                      aria-describedby="select-121-content"
                                      aria-expanded={true}
                                      aria-haspopup="listbox"
                                      aria-owns="select-121-content"
                                      control={[Function]}
                                      controlProps={
                                        Object {
                                          "hasPlaceholder": true,
                                          "variant": undefined,
                                        }
                                      }
                                      fauxControlRef={[Function]}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                    >
                                      <FauxControl
                                        afterItems={
                                          Array [
                                            <IconArrowDropdownUp
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              size="1.5em"
                                            />,
                                            <input
                                              name={undefined}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-activedescendant="select-121-menu"
                                        aria-describedby="select-121-content"
                                        aria-expanded={true}
                                        aria-haspopup="listbox"
                                        aria-owns="select-121-content"
                                        className="css-3"
                                        control={[Function]}
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                      >
                                        <FauxControl
                                          aria-activedescendant="select-121-menu"
                                          aria-describedby="select-121-content"
                                          aria-expanded={true}
                                          aria-haspopup="listbox"
                                          aria-owns="select-121-content"
                                          className="css-3"
                                          control={[Function]}
                                          innerRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          tabIndex={0}
                                        >
                                          <div
                                            aria-activedescendant="select-121-menu"
                                            aria-describedby="select-121-content"
                                            aria-expanded={true}
                                            aria-haspopup="listbox"
                                            aria-owns="select-121-content"
                                            className="css-7"
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            tabIndex={0}
                                          >
                                            <glamorous(Trigger)
                                              controlPropsIn={
                                                Object {
                                                  "hasPlaceholder": true,
                                                  "variant": undefined,
                                                }
                                              }
                                              hasPlaceholder={true}
                                              key="control"
                                              size="large"
                                            >
                                              <div
                                                className="css-20"
                                              >
                                                <TriggerContent>
                                                  <span
                                                    className="css-34"
                                                  >
                                                    Select...
                                                  </span>
                                                </TriggerContent>
                                              </div>
                                            </glamorous(Trigger)>
                                            <IconArrowDropdownUp
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              key="arrow"
                                              size="1.5em"
                                            >
                                              <Icon
                                                css={
                                                  Object {
                                                    "margin": "0.5em",
                                                  }
                                                }
                                                rtl={false}
                                                size="1.5em"
                                              >
                                                <glamorous(svg)
                                                  aria-hidden={true}
                                                  css={
                                                    Object {
                                                      "margin": "0.5em",
                                                    }
                                                  }
                                                  role="img"
                                                  rtl={false}
                                                  size="1.5em"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="css-35"
                                                    role="img"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <g>
                                                      <path
                                                        d="M12 7.5l8 8H4z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </glamorous(svg)>
                                              </Icon>
                                            </IconArrowDropdownUp>
                                            <input
                                              key="input"
                                              type="hidden"
                                              value=""
                                            />
                                            <Underlay>
                                              <div
                                                className="css-36"
                                              />
                                            </Underlay>
                                          </div>
                                        </FauxControl>
                                      </FauxControl>
                                    </SelectTrigger>
                                  </SelectTrigger>
                                </span>
                              </Target>
                            </PopoverTrigger>
                          </PopoverTrigger>
                          <DropdownContent
                            data={
                              Array [
                                Object {
                                  "text": "Alpha",
                                  "value": "alpha",
                                },
                                Object {
                                  "text": "Beta",
                                  "value": "beta",
                                },
                                Object {
                                  "text": "Gamma",
                                  "value": "gamma",
                                },
                              ]
                            }
                            getItemProps={[Function]}
                            getMenuProps={[Function]}
                            id="select-121-content"
                            modifiers={
                              Object {
                                "contentWidth": Object {
                                  "enabled": true,
                                  "fn": [Function],
                                },
                              }
                            }
                            placement="bottom-start"
                          >
                            <DropdownContent
                              id="select-121-content"
                              modifiers={
                                Object {
                                  "contentWidth": Object {
                                    "enabled": true,
                                    "fn": [Function],
                                  },
                                }
                              }
                              placement="bottom-start"
                            >
                              <ThemedComponent
                                className="css-37"
                                id="select-121-content"
                                modifiers={
                                  Object {
                                    "contentWidth": Object {
                                      "enabled": true,
                                      "fn": [Function],
                                    },
                                  }
                                }
                                placement="bottom-start"
                              >
                                <RtlPopper
                                  className="css-37"
                                  id="select-121-content"
                                  modifiers={
                                    Object {
                                      "contentWidth": Object {
                                        "enabled": true,
                                        "fn": [Function],
                                      },
                                    }
                                  }
                                  placement="bottom-start"
                                  theme={
                                    Object {
                                      "DropdownContent_backgroundColor": "#fff",
                                      "DropdownContent_borderColor": "#ebeff5",
                                      "DropdownContent_borderRadius": "0.1875em",
                                      "DropdownContent_boxShadow": "0 2px 4px 0 rgba(0,0,0,0.2), 0 4px 8px 0 rgba(0,0,0,0.2)",
                                      "DropdownContent_margin": "5px",
                                      "DropdownContent_zIndex": 100,
                                      "DropdownIcon_fill": "#2e6fd9",
                                      "DropdownIcon_marginHorizontal": "0.5em",
                                      "Dropdown_backgroundColor": "#fff",
                                      "Dropdown_borderColor": "#c8d1e0",
                                      "Dropdown_borderColor_active": "#c8d1e0",
                                      "Dropdown_borderColor_focus": "#c8d1e0",
                                      "Dropdown_borderColor_hover": "#2e6fd9",
                                      "Dropdown_borderRadius": "0.1875em",
                                      "Dropdown_borderWidth": "1px",
                                      "Dropdown_boxShadow_active": "0 0 0 1px #fff, 0 0 0 2px #2e6fd9",
                                      "Dropdown_boxShadow_focus": "0 0 0 1px #fff, 0 0 0 2px #2e6fd9",
                                      "Dropdown_color_placeholder": "#8e99ab",
                                      "Dropdown_color_text": "#58606e",
                                      "Dropdown_fontSize": "0.875em",
                                      "Dropdown_fontSize_small": "0.75em",
                                      "Dropdown_height_jumbo": "3.25em",
                                      "Dropdown_height_large": "2.5em",
                                      "Dropdown_height_medium": "2em",
                                      "Dropdown_height_small": "1.5em",
                                      "Dropdown_paddingHorizontal": "1em",
                                      "Dropdown_paddingHorizontal_small": "0.5em",
                                      "backgroundColor_danger": "#db2929",
                                      "backgroundColor_danger_active": "#c71818",
                                      "backgroundColor_danger_activeMuted": "#f79999",
                                      "backgroundColor_danger_focus": "#db2929",
                                      "backgroundColor_danger_hover": "#eb4d4d",
                                      "backgroundColor_danger_muted": "#fabebe",
                                      "backgroundColor_disabled": "#ebeff5",
                                      "backgroundColor_input": "#fff",
                                      "backgroundColor_link_focus": "#dde3ed",
                                      "backgroundColor_success": "#0a8f4c",
                                      "backgroundColor_success_active": "#06783f",
                                      "backgroundColor_success_activeMuted": "#95f5c3",
                                      "backgroundColor_success_focus": "#0a8f4c",
                                      "backgroundColor_success_hover": "#10a35a",
                                      "backgroundColor_success_muted": "#c0fadc",
                                      "backgroundColor_warning": "#e05b2b",
                                      "backgroundColor_warning_active": "#cf4615",
                                      "backgroundColor_warning_activeMuted": "#fab69d",
                                      "backgroundColor_warning_focus": "#e05b2b",
                                      "backgroundColor_warning_hover": "#ed774c",
                                      "backgroundColor_warning_muted": "#fcd0c0",
                                      "borderColor": "#c8d1e0",
                                      "borderColor_active": "#2e6fd9",
                                      "borderColor_danger": "#db2929",
                                      "borderColor_danger_active": "#c71818",
                                      "borderColor_danger_focus": "#c71818",
                                      "borderColor_danger_hover": "#c71818",
                                      "borderColor_danger_muted": "#f27474",
                                      "borderColor_focus": "#2e6fd9",
                                      "borderColor_hover": "#2e6fd9",
                                      "borderColor_success": "#10a35a",
                                      "borderColor_success_active": "#0a8f4c",
                                      "borderColor_success_focus": "#0a8f4c",
                                      "borderColor_success_hover": "#0a8f4c",
                                      "borderColor_success_muted": "#67eba7",
                                      "borderColor_warning": "#e05b2b",
                                      "borderColor_warning_active": "#cf4615",
                                      "borderColor_warning_focus": "#cf4615",
                                      "borderColor_warning_hover": "#cf4615",
                                      "borderColor_warning_muted": "#f59776",
                                      "borderRadius_1": "0.1875em",
                                      "breakpoint_medium": 768,
                                      "breakpoint_narrow": 512,
                                      "breakpoint_wide": 1024,
                                      "color_black": "#1d1f24",
                                      "color_caption": "#58606e",
                                      "color_gray_10": "#f5f7fa",
                                      "color_gray_100": "#333840",
                                      "color_gray_20": "#ebeff5",
                                      "color_gray_30": "#dde3ed",
                                      "color_gray_40": "#c8d1e0",
                                      "color_gray_50": "#afbacc",
                                      "color_gray_60": "#8e99ab",
                                      "color_gray_70": "#707a8a",
                                      "color_gray_80": "#58606e",
                                      "color_gray_90": "#434a54",
                                      "color_placeholder": "#8e99ab",
                                      "color_text": "#333840",
                                      "color_text_danger": "#db2929",
                                      "color_text_danger_active": "#c71818",
                                      "color_text_danger_focus": "#db2929",
                                      "color_text_danger_hover": "#eb4d4d",
                                      "color_text_disabled": "#afbacc",
                                      "color_text_ondanger": "#fff",
                                      "color_text_onprimary": "#fff",
                                      "color_text_onsuccess": "#fff",
                                      "color_text_onwarning": "#fff",
                                      "color_text_primary": "#2e6fd9",
                                      "color_text_primary_active": "#1f5dc2",
                                      "color_text_primary_focus": "#2e6fd9",
                                      "color_text_primary_hover": "#4a89e8",
                                      "color_text_success": "#06783f",
                                      "color_text_success_active": "#046132",
                                      "color_text_success_focus": "#06783f",
                                      "color_text_success_hover": "#0a8f4c",
                                      "color_text_warning": "#cf4615",
                                      "color_text_warning_active": "#bd3909",
                                      "color_text_warning_focus": "#cf4615",
                                      "color_text_warning_hover": "#e05b2b",
                                      "color_theme_10": "#e6eefc",
                                      "color_theme_100": "#0f397d",
                                      "color_theme_20": "#c2dbfc",
                                      "color_theme_30": "#9dc2fa",
                                      "color_theme_40": "#72a5f2",
                                      "color_theme_50": "#4a89e8",
                                      "color_theme_60": "#2e6fd9",
                                      "color_theme_70": "#1f5dc2",
                                      "color_theme_80": "#164ea8",
                                      "color_theme_90": "#114091",
                                      "color_white": "#fff",
                                      "direction": "ltr",
                                      "fontFamily": "Open Sans",
                                      "fontFamily_monospace": "\\"SF Mono\\", \\"Droid Sans Mono\\", \\"Source Code Pro\\", Monaco, Consolas, \\"Courier New\\", Courier, monospace",
                                      "fontFamily_system": "-apple-system, system-ui, BlinkMacSystemFont, \\"Segoe UI\\", Roboto, Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\", \\"Segoe UI Symbol\\"",
                                      "fontSize_base": 16,
                                      "fontSize_h1": "2.125em",
                                      "fontSize_h2": "1.75em",
                                      "fontSize_h3": "1.375em",
                                      "fontSize_h4": "1.125em",
                                      "fontSize_h5": "0.875em",
                                      "fontSize_h6": "0.875em",
                                      "fontSize_mouse": "0.6875em",
                                      "fontSize_prose": "1em",
                                      "fontSize_ui": "0.875em",
                                      "fontWeight_bold": 700,
                                      "fontWeight_extraBold": 800,
                                      "fontWeight_regular": 400,
                                      "fontWeight_semiBold": 600,
                                      "lineHeight": 1.25,
                                      "lineHeight_prose": 1.5,
                                      "shadow_1": "0 1px 2px 0 rgba(0,0,0,0.2), 0 2px 4px 0 rgba(0,0,0,0.2)",
                                      "shadow_2": "0 2px 4px 0 rgba(0,0,0,0.2), 0 4px 8px 0 rgba(0,0,0,0.2)",
                                      "shadow_3": "0 4px 8px 0 rgba(0,0,0,0.2), 0 8px 16px 0 rgba(0,0,0,0.2)",
                                      "shadow_4": "0 8px 16px 0 rgba(0,0,0,0.2), 0 20px 16px -8px rgba(0,0,0,0.2)",
                                      "shadow_5": "0 16px 24px 0 rgba(0,0,0,0.2), 0 32px 24px -16px rgba(0,0,0,0.2)",
                                      "size_jumbo": "3.25em",
                                      "size_large": "2.5em",
                                      "size_medium": "2em",
                                      "size_small": "1.5em",
                                      "space_inline_lg": "1.5em",
                                      "space_inline_md": "1em",
                                      "space_inline_sm": "0.5em",
                                      "space_inline_xl": "2em",
                                      "space_inline_xs": "0.25em",
                                      "space_inline_xxl": "4em",
                                      "space_inline_xxs": "0.125em",
                                      "space_inset_lg": "1.5em",
                                      "space_inset_md": "1em",
                                      "space_inset_sm": "0.5em",
                                      "space_stack_lg": "1.5em",
                                      "space_stack_md": "1em",
                                      "space_stack_sm": "0.5em",
                                      "space_stack_xl": "2em",
                                      "space_stack_xs": "0.25em",
                                      "space_stack_xxl": "4em",
                                      "space_stack_xxs": "0.125em",
                                      "zIndex_100": 100,
                                      "zIndex_1600": 1600,
                                      "zIndex_200": 200,
                                      "zIndex_400": 400,
                                      "zIndex_800": 800,
                                    }
                                  }
                                >
                                  <Popper
                                    className="css-37"
                                    component="div"
                                    eventsEnabled={true}
                                    id="select-121-content"
                                    modifiers={
                                      Object {
                                        "contentWidth": Object {
                                          "enabled": true,
                                          "fn": [Function],
                                        },
                                      }
                                    }
                                    placement="bottom-start"
                                  >
                                    <div
                                      className="css-37"
                                      id="select-121-content"
                                      style={
                                        Object {
                                          "opacity": 0,
                                          "pointerEvents": "none",
                                          "position": "absolute",
                                        }
                                      }
                                    >
                                      <Menu
                                        data={
                                          Array [
                                            Object {
                                              "text": "Alpha",
                                              "value": "alpha",
                                            },
                                            Object {
                                              "text": "Beta",
                                              "value": "beta",
                                            },
                                            Object {
                                              "text": "Gamma",
                                              "value": "gamma",
                                            },
                                          ]
                                        }
                                        getItemProps={[Function]}
                                        id="select-121-menu"
                                        role="listbox"
                                      >
                                        <Menu
                                          id="select-121-menu"
                                          role="listbox"
                                        >
                                          <div
                                            className="css-38"
                                            id="select-121-menu"
                                            role="listbox"
                                          >
                                            <MenuGroup
                                              key="0"
                                            >
                                              <MenuGroup>
                                                <div
                                                  className="css-39"
                                                >
                                                  <MenuItem
                                                    aria-selected={false}
                                                    id="select-121-item-0"
                                                    isHighlighted={false}
                                                    item={
                                                      Object {
                                                        "text": "Alpha",
                                                        "value": "alpha",
                                                      }
                                                    }
                                                    key="0"
                                                    onClick={[Function]}
                                                    role="option"
                                                    tabIndex={null}
                                                    value="alpha"
                                                  >
                                                    <MenuItem
                                                      aria-selected={false}
                                                      id="select-121-item-0"
                                                      isHighlighted={false}
                                                      item={
                                                        Object {
                                                          "text": "Alpha",
                                                          "value": "alpha",
                                                        }
                                                      }
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="option"
                                                      tabIndex={null}
                                                      value="alpha"
                                                    >
                                                      <div
                                                        aria-selected={false}
                                                        className="css-49"
                                                        id="select-121-item-0"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="option"
                                                        tabIndex={null}
                                                      >
                                                        <glamorous(span)>
                                                          <span
                                                            className="css-45"
                                                          >
                                                            <glamorous(span)>
                                                              <span
                                                                className="css-46"
                                                              >
                                                                <glamorous(span)>
                                                                  <span
                                                                    className="css-47"
                                                                  >
                                                                    Alpha
                                                                  </span>
                                                                </glamorous(span)>
                                                                <glamorous(span)>
                                                                  <span
                                                                    className="css-48"
                                                                  />
                                                                </glamorous(span)>
                                                              </span>
                                                            </glamorous(span)>
                                                          </span>
                                                        </glamorous(span)>
                                                      </div>
                                                    </MenuItem>
                                                  </MenuItem>
                                                  <MenuItem
                                                    aria-selected={false}
                                                    id="select-121-item-1"
                                                    isHighlighted={false}
                                                    item={
                                                      Object {
                                                        "text": "Beta",
                                                        "value": "beta",
                                                      }
                                                    }
                                                    key="1"
                                                    onClick={[Function]}
                                                    role="option"
                                                    tabIndex={null}
                                                    value="beta"
                                                  >
                                                    <MenuItem
                                                      aria-selected={false}
                                                      id="select-121-item-1"
                                                      isHighlighted={false}
                                                      item={
                                                        Object {
                                                          "text": "Beta",
                                                          "value": "beta",
                                                        }
                                                      }
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="option"
                                                      tabIndex={null}
                                                      value="beta"
                                                    >
                                                      <div
                                                        aria-selected={false}
                                                        className="css-49"
                                                        id="select-121-item-1"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="option"
                                                        tabIndex={null}
                                                      >
                                                        <glamorous(span)>
                                                          <span
                                                            className="css-45"
                                                          >
                                                            <glamorous(span)>
                                                              <span
                                                                className="css-46"
                                                              >
                                                                <glamorous(span)>
                                                                  <span
                                                                    className="css-47"
                                                                  >
                                                                    Beta
                                                                  </span>
                                                                </glamorous(span)>
                                                                <glamorous(span)>
                                                                  <span
                                                                    className="css-48"
                                                                  />
                                                                </glamorous(span)>
                                                              </span>
                                                            </glamorous(span)>
                                                          </span>
                                                        </glamorous(span)>
                                                      </div>
                                                    </MenuItem>
                                                  </MenuItem>
                                                  <MenuItem
                                                    aria-selected={false}
                                                    id="select-121-item-2"
                                                    isHighlighted={false}
                                                    item={
                                                      Object {
                                                        "text": "Gamma",
                                                        "value": "gamma",
                                                      }
                                                    }
                                                    key="2"
                                                    onClick={[Function]}
                                                    role="option"
                                                    tabIndex={null}
                                                    value="gamma"
                                                  >
                                                    <MenuItem
                                                      aria-selected={false}
                                                      id="select-121-item-2"
                                                      isHighlighted={false}
                                                      item={
                                                        Object {
                                                          "text": "Gamma",
                                                          "value": "gamma",
                                                        }
                                                      }
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="option"
                                                      tabIndex={null}
                                                      value="gamma"
                                                    >
                                                      <div
                                                        aria-selected={false}
                                                        className="css-49"
                                                        id="select-121-item-2"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="option"
                                                        tabIndex={null}
                                                      >
                                                        <glamorous(span)>
                                                          <span
                                                            className="css-45"
                                                          >
                                                            <glamorous(span)>
                                                              <span
                                                                className="css-46"
                                                              >
                                                                <glamorous(span)>
                                                                  <span
                                                                    className="css-47"
                                                                  >
                                                                    Gamma
                                                                  </span>
                                                                </glamorous(span)>
                                                                <glamorous(span)>
                                                                  <span
                                                                    className="css-48"
                                                                  />
                                                                </glamorous(span)>
                                                              </span>
                                                            </glamorous(span)>
                                                          </span>
                                                        </glamorous(span)>
                                                      </div>
                                                    </MenuItem>
                                                  </MenuItem>
                                                </div>
                                              </MenuGroup>
                                            </MenuGroup>
                                          </div>
                                        </Menu>
                                      </Menu>
                                    </div>
                                  </Popper>
                                </RtlPopper>
                              </ThemedComponent>
                            </DropdownContent>
                          </DropdownContent>
                          <EventListener
                            listeners={
                              Array [
                                Object {
                                  "event": "click",
                                  "handler": [Function],
                                  "options": true,
                                  "target": "document",
                                },
                                Object {
                                  "event": "keydown",
                                  "handler": [Function],
                                  "options": true,
                                  "target": "document",
                                },
                              ]
                            }
                          />
                        </span>
                      </Manager>
                    </Popover>
                  </Popover>
                </Dropdown>
              </ThemeProvider>
            </ThemeProvider>
          </Themed(Dropdown)>
        </ThemedComponent>
      </Select>
    </Select>
  </div>
</glamorous(div)>
`;

exports[`Select demo examples placeholder 1`] = `
.css-0,
[data-css-0] {
  width: 100%;
}

.css-0 > span,
[data-css-0] > span {
  width: 100%;
}

.css-1,
[data-css-1] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: inline-block;
  width: 100%;
}

.css-1 *,
[data-css-1] *,
.css-1 *::before,
[data-css-1] *::before,
.css-1 *::after,
[data-css-1] *::after {
  box-sizing: inherit;
}

.css-1 > span,
[data-css-1] > span {
  width: 100%;
}

.css-2,
[data-css-2] {
  display: inline-block;
}

.css-3,
[data-css-3] {
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-3 [role="img"],
[data-css-3] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-3 [role="img"]:first-child,
[data-css-3] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-3 :not([role="img"]) ~ [role="img"],
[data-css-3] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-3 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-3] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-7,
[data-css-7] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-7 *,
[data-css-7] *,
.css-7 *::before,
[data-css-7] *::before,
.css-7 *::after,
[data-css-7] *::after {
  box-sizing: inherit;
}

.css-7:hover > div:last-child,
[data-css-7]:hover > div:last-child,
.css-7[data-simulate-hover] > div:last-child,
[data-css-7][data-simulate-hover] > div:last-child {
  border-color: #2e6fd9;
}

.css-7:focus > div:last-child,
[data-css-7]:focus > div:last-child,
.css-7[data-simulate-focus] > div:last-child,
[data-css-7][data-simulate-focus] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7:active > div:last-child,
[data-css-7]:active > div:last-child,
.css-7[data-simulate-active] > div:last-child,
[data-css-7][data-simulate-active] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7 [role="img"],
[data-css-7] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-7 [role="img"]:first-child,
[data-css-7] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-7 :not([role="img"]) ~ [role="img"],
[data-css-7] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-7 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-7] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-20,
[data-css-20] {
  align-items: center;
  color: #8e99ab;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  font-style: italic;
  height: 2.857142857142857em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-20::placeholder,
[data-css-20]::placeholder,
.css-20[data-simulate-placeholder],
[data-css-20][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-input-placeholder,
[data-css-20]::-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20:-ms-input-placeholder,
[data-css-20]:-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-clear,
[data-css-20]::-ms-clear,
.css-20[data-simulate-msclear],
[data-css-20][data-simulate-msclear] {
  display: none;
}

.css-20:focus ~ div:last-child,
[data-css-20]:focus ~ div:last-child,
.css-20[data-simulate-focus] ~ div:last-child,
[data-css-20][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-34,
[data-css-34] {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  user-select: none;
  width: 100%;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.css-35,
[data-css-35] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.css-36,
[data-css-36] {
  background-color: #fff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

<Select
  data={
    Array [
      Object {
        "text": "Alabama",
        "value": "AL",
      },
      Object {
        "text": "Alaska",
        "value": "AK",
      },
      Object {
        "text": "Arizona",
        "value": "AZ",
      },
      Object {
        "text": "Arkansas",
        "value": "AR",
      },
      Object {
        "text": "California",
        "value": "CA",
      },
      Object {
        "text": "Colorado",
        "value": "CO",
      },
      Object {
        "text": "Connecticut",
        "value": "CT",
      },
      Object {
        "text": "Delaware",
        "value": "DE",
      },
      Object {
        "text": "Florida",
        "value": "FL",
      },
      Object {
        "text": "Georgia",
        "value": "GA",
      },
      Object {
        "text": "Hawaii",
        "value": "HI",
      },
      Object {
        "text": "Idaho",
        "value": "ID",
      },
      Object {
        "text": "Illinois",
        "value": "IL",
      },
      Object {
        "text": "Indiana",
        "value": "IN",
      },
      Object {
        "text": "Iowa",
        "value": "IA",
      },
      Object {
        "text": "Kansas",
        "value": "KS",
      },
      Object {
        "text": "Kentucky",
        "value": "KY",
      },
      Object {
        "text": "Louisiana",
        "value": "LA",
      },
      Object {
        "text": "Maine",
        "value": "ME",
      },
      Object {
        "text": "Maryland",
        "value": "MD",
      },
      Object {
        "text": "Massachusetts",
        "value": "MA",
      },
      Object {
        "text": "Michigan",
        "value": "MI",
      },
      Object {
        "text": "Minnesota",
        "value": "MN",
      },
      Object {
        "text": "Mississippi",
        "value": "MS",
      },
      Object {
        "text": "Missouri",
        "value": "MO",
      },
      Object {
        "text": "Montana",
        "value": "MT",
      },
      Object {
        "text": "Nebraska",
        "value": "NE",
      },
      Object {
        "text": "Nevada",
        "value": "NV",
      },
      Object {
        "text": "New Hampshire",
        "value": "NH",
      },
      Object {
        "text": "New Jersey",
        "value": "NJ",
      },
      Object {
        "text": "New Mexico",
        "value": "NM",
      },
      Object {
        "text": "New York",
        "value": "NY",
      },
      Object {
        "text": "North Carolina",
        "value": "NC",
      },
      Object {
        "text": "North Dakota",
        "value": "ND",
      },
      Object {
        "text": "Ohio",
        "value": "OH",
      },
      Object {
        "text": "Oklahoma",
        "value": "OK",
      },
      Object {
        "text": "Oregon",
        "value": "OR",
      },
      Object {
        "text": "Pennsylvania",
        "value": "PA",
      },
      Object {
        "text": "Rhode Island",
        "value": "RI",
      },
      Object {
        "text": "South Carolina",
        "value": "SC",
      },
      Object {
        "text": "South Dakota",
        "value": "SD",
      },
      Object {
        "text": "Tennessee",
        "value": "TN",
      },
      Object {
        "text": "Texas",
        "value": "TX",
      },
      Object {
        "text": "Utah",
        "value": "UT",
      },
      Object {
        "text": "Vermont",
        "value": "VT",
      },
      Object {
        "text": "Virginia",
        "value": "VA",
      },
      Object {
        "text": "Washington",
        "value": "WA",
      },
      Object {
        "text": "West Virginia",
        "value": "WV",
      },
      Object {
        "text": "Wisconsin",
        "value": "WI",
      },
      Object {
        "text": "Wyoming",
        "value": "WY",
      },
    ]
  }
  placeholder="Choose a state..."
  placement="bottom-start"
  size="large"
>
  <Select
    data={
      Array [
        Object {
          "text": "Alabama",
          "value": "AL",
        },
        Object {
          "text": "Alaska",
          "value": "AK",
        },
        Object {
          "text": "Arizona",
          "value": "AZ",
        },
        Object {
          "text": "Arkansas",
          "value": "AR",
        },
        Object {
          "text": "California",
          "value": "CA",
        },
        Object {
          "text": "Colorado",
          "value": "CO",
        },
        Object {
          "text": "Connecticut",
          "value": "CT",
        },
        Object {
          "text": "Delaware",
          "value": "DE",
        },
        Object {
          "text": "Florida",
          "value": "FL",
        },
        Object {
          "text": "Georgia",
          "value": "GA",
        },
        Object {
          "text": "Hawaii",
          "value": "HI",
        },
        Object {
          "text": "Idaho",
          "value": "ID",
        },
        Object {
          "text": "Illinois",
          "value": "IL",
        },
        Object {
          "text": "Indiana",
          "value": "IN",
        },
        Object {
          "text": "Iowa",
          "value": "IA",
        },
        Object {
          "text": "Kansas",
          "value": "KS",
        },
        Object {
          "text": "Kentucky",
          "value": "KY",
        },
        Object {
          "text": "Louisiana",
          "value": "LA",
        },
        Object {
          "text": "Maine",
          "value": "ME",
        },
        Object {
          "text": "Maryland",
          "value": "MD",
        },
        Object {
          "text": "Massachusetts",
          "value": "MA",
        },
        Object {
          "text": "Michigan",
          "value": "MI",
        },
        Object {
          "text": "Minnesota",
          "value": "MN",
        },
        Object {
          "text": "Mississippi",
          "value": "MS",
        },
        Object {
          "text": "Missouri",
          "value": "MO",
        },
        Object {
          "text": "Montana",
          "value": "MT",
        },
        Object {
          "text": "Nebraska",
          "value": "NE",
        },
        Object {
          "text": "Nevada",
          "value": "NV",
        },
        Object {
          "text": "New Hampshire",
          "value": "NH",
        },
        Object {
          "text": "New Jersey",
          "value": "NJ",
        },
        Object {
          "text": "New Mexico",
          "value": "NM",
        },
        Object {
          "text": "New York",
          "value": "NY",
        },
        Object {
          "text": "North Carolina",
          "value": "NC",
        },
        Object {
          "text": "North Dakota",
          "value": "ND",
        },
        Object {
          "text": "Ohio",
          "value": "OH",
        },
        Object {
          "text": "Oklahoma",
          "value": "OK",
        },
        Object {
          "text": "Oregon",
          "value": "OR",
        },
        Object {
          "text": "Pennsylvania",
          "value": "PA",
        },
        Object {
          "text": "Rhode Island",
          "value": "RI",
        },
        Object {
          "text": "South Carolina",
          "value": "SC",
        },
        Object {
          "text": "South Dakota",
          "value": "SD",
        },
        Object {
          "text": "Tennessee",
          "value": "TN",
        },
        Object {
          "text": "Texas",
          "value": "TX",
        },
        Object {
          "text": "Utah",
          "value": "UT",
        },
        Object {
          "text": "Vermont",
          "value": "VT",
        },
        Object {
          "text": "Virginia",
          "value": "VA",
        },
        Object {
          "text": "Washington",
          "value": "WA",
        },
        Object {
          "text": "West Virginia",
          "value": "WV",
        },
        Object {
          "text": "Wisconsin",
          "value": "WI",
        },
        Object {
          "text": "Wyoming",
          "value": "WY",
        },
      ]
    }
    getItemProps={[Function]}
    getMenuProps={[Function]}
    getTriggerProps={[Function]}
    id="select-92"
    isOpen={false}
    modifiers={
      Object {
        "contentWidth": Object {
          "enabled": true,
          "fn": [Function],
        },
      }
    }
    onClose={[Function]}
    onOpen={[Function]}
    placement="bottom-start"
  >
    <ThemedComponent
      className="css-0"
      data={
        Array [
          Object {
            "text": "Alabama",
            "value": "AL",
          },
          Object {
            "text": "Alaska",
            "value": "AK",
          },
          Object {
            "text": "Arizona",
            "value": "AZ",
          },
          Object {
            "text": "Arkansas",
            "value": "AR",
          },
          Object {
            "text": "California",
            "value": "CA",
          },
          Object {
            "text": "Colorado",
            "value": "CO",
          },
          Object {
            "text": "Connecticut",
            "value": "CT",
          },
          Object {
            "text": "Delaware",
            "value": "DE",
          },
          Object {
            "text": "Florida",
            "value": "FL",
          },
          Object {
            "text": "Georgia",
            "value": "GA",
          },
          Object {
            "text": "Hawaii",
            "value": "HI",
          },
          Object {
            "text": "Idaho",
            "value": "ID",
          },
          Object {
            "text": "Illinois",
            "value": "IL",
          },
          Object {
            "text": "Indiana",
            "value": "IN",
          },
          Object {
            "text": "Iowa",
            "value": "IA",
          },
          Object {
            "text": "Kansas",
            "value": "KS",
          },
          Object {
            "text": "Kentucky",
            "value": "KY",
          },
          Object {
            "text": "Louisiana",
            "value": "LA",
          },
          Object {
            "text": "Maine",
            "value": "ME",
          },
          Object {
            "text": "Maryland",
            "value": "MD",
          },
          Object {
            "text": "Massachusetts",
            "value": "MA",
          },
          Object {
            "text": "Michigan",
            "value": "MI",
          },
          Object {
            "text": "Minnesota",
            "value": "MN",
          },
          Object {
            "text": "Mississippi",
            "value": "MS",
          },
          Object {
            "text": "Missouri",
            "value": "MO",
          },
          Object {
            "text": "Montana",
            "value": "MT",
          },
          Object {
            "text": "Nebraska",
            "value": "NE",
          },
          Object {
            "text": "Nevada",
            "value": "NV",
          },
          Object {
            "text": "New Hampshire",
            "value": "NH",
          },
          Object {
            "text": "New Jersey",
            "value": "NJ",
          },
          Object {
            "text": "New Mexico",
            "value": "NM",
          },
          Object {
            "text": "New York",
            "value": "NY",
          },
          Object {
            "text": "North Carolina",
            "value": "NC",
          },
          Object {
            "text": "North Dakota",
            "value": "ND",
          },
          Object {
            "text": "Ohio",
            "value": "OH",
          },
          Object {
            "text": "Oklahoma",
            "value": "OK",
          },
          Object {
            "text": "Oregon",
            "value": "OR",
          },
          Object {
            "text": "Pennsylvania",
            "value": "PA",
          },
          Object {
            "text": "Rhode Island",
            "value": "RI",
          },
          Object {
            "text": "South Carolina",
            "value": "SC",
          },
          Object {
            "text": "South Dakota",
            "value": "SD",
          },
          Object {
            "text": "Tennessee",
            "value": "TN",
          },
          Object {
            "text": "Texas",
            "value": "TX",
          },
          Object {
            "text": "Utah",
            "value": "UT",
          },
          Object {
            "text": "Vermont",
            "value": "VT",
          },
          Object {
            "text": "Virginia",
            "value": "VA",
          },
          Object {
            "text": "Washington",
            "value": "WA",
          },
          Object {
            "text": "West Virginia",
            "value": "WV",
          },
          Object {
            "text": "Wisconsin",
            "value": "WI",
          },
          Object {
            "text": "Wyoming",
            "value": "WY",
          },
        ]
      }
      getItemProps={[Function]}
      getMenuProps={[Function]}
      getTriggerProps={[Function]}
      id="select-92"
      isOpen={false}
      modifiers={
        Object {
          "contentWidth": Object {
            "enabled": true,
            "fn": [Function],
          },
        }
      }
      onClose={[Function]}
      onOpen={[Function]}
      placement="bottom-start"
    >
      <Themed(Dropdown)
        className="css-0"
        data={
          Array [
            Object {
              "text": "Alabama",
              "value": "AL",
            },
            Object {
              "text": "Alaska",
              "value": "AK",
            },
            Object {
              "text": "Arizona",
              "value": "AZ",
            },
            Object {
              "text": "Arkansas",
              "value": "AR",
            },
            Object {
              "text": "California",
              "value": "CA",
            },
            Object {
              "text": "Colorado",
              "value": "CO",
            },
            Object {
              "text": "Connecticut",
              "value": "CT",
            },
            Object {
              "text": "Delaware",
              "value": "DE",
            },
            Object {
              "text": "Florida",
              "value": "FL",
            },
            Object {
              "text": "Georgia",
              "value": "GA",
            },
            Object {
              "text": "Hawaii",
              "value": "HI",
            },
            Object {
              "text": "Idaho",
              "value": "ID",
            },
            Object {
              "text": "Illinois",
              "value": "IL",
            },
            Object {
              "text": "Indiana",
              "value": "IN",
            },
            Object {
              "text": "Iowa",
              "value": "IA",
            },
            Object {
              "text": "Kansas",
              "value": "KS",
            },
            Object {
              "text": "Kentucky",
              "value": "KY",
            },
            Object {
              "text": "Louisiana",
              "value": "LA",
            },
            Object {
              "text": "Maine",
              "value": "ME",
            },
            Object {
              "text": "Maryland",
              "value": "MD",
            },
            Object {
              "text": "Massachusetts",
              "value": "MA",
            },
            Object {
              "text": "Michigan",
              "value": "MI",
            },
            Object {
              "text": "Minnesota",
              "value": "MN",
            },
            Object {
              "text": "Mississippi",
              "value": "MS",
            },
            Object {
              "text": "Missouri",
              "value": "MO",
            },
            Object {
              "text": "Montana",
              "value": "MT",
            },
            Object {
              "text": "Nebraska",
              "value": "NE",
            },
            Object {
              "text": "Nevada",
              "value": "NV",
            },
            Object {
              "text": "New Hampshire",
              "value": "NH",
            },
            Object {
              "text": "New Jersey",
              "value": "NJ",
            },
            Object {
              "text": "New Mexico",
              "value": "NM",
            },
            Object {
              "text": "New York",
              "value": "NY",
            },
            Object {
              "text": "North Carolina",
              "value": "NC",
            },
            Object {
              "text": "North Dakota",
              "value": "ND",
            },
            Object {
              "text": "Ohio",
              "value": "OH",
            },
            Object {
              "text": "Oklahoma",
              "value": "OK",
            },
            Object {
              "text": "Oregon",
              "value": "OR",
            },
            Object {
              "text": "Pennsylvania",
              "value": "PA",
            },
            Object {
              "text": "Rhode Island",
              "value": "RI",
            },
            Object {
              "text": "South Carolina",
              "value": "SC",
            },
            Object {
              "text": "South Dakota",
              "value": "SD",
            },
            Object {
              "text": "Tennessee",
              "value": "TN",
            },
            Object {
              "text": "Texas",
              "value": "TX",
            },
            Object {
              "text": "Utah",
              "value": "UT",
            },
            Object {
              "text": "Vermont",
              "value": "VT",
            },
            Object {
              "text": "Virginia",
              "value": "VA",
            },
            Object {
              "text": "Washington",
              "value": "WA",
            },
            Object {
              "text": "West Virginia",
              "value": "WV",
            },
            Object {
              "text": "Wisconsin",
              "value": "WI",
            },
            Object {
              "text": "Wyoming",
              "value": "WY",
            },
          ]
        }
        getItemProps={[Function]}
        getMenuProps={[Function]}
        getTriggerProps={[Function]}
        id="select-92"
        isOpen={false}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placement="bottom-start"
      >
        <ThemeProvider>
          <ThemeProvider>
            <Dropdown
              className="css-0"
              data={
                Array [
                  Object {
                    "text": "Alabama",
                    "value": "AL",
                  },
                  Object {
                    "text": "Alaska",
                    "value": "AK",
                  },
                  Object {
                    "text": "Arizona",
                    "value": "AZ",
                  },
                  Object {
                    "text": "Arkansas",
                    "value": "AR",
                  },
                  Object {
                    "text": "California",
                    "value": "CA",
                  },
                  Object {
                    "text": "Colorado",
                    "value": "CO",
                  },
                  Object {
                    "text": "Connecticut",
                    "value": "CT",
                  },
                  Object {
                    "text": "Delaware",
                    "value": "DE",
                  },
                  Object {
                    "text": "Florida",
                    "value": "FL",
                  },
                  Object {
                    "text": "Georgia",
                    "value": "GA",
                  },
                  Object {
                    "text": "Hawaii",
                    "value": "HI",
                  },
                  Object {
                    "text": "Idaho",
                    "value": "ID",
                  },
                  Object {
                    "text": "Illinois",
                    "value": "IL",
                  },
                  Object {
                    "text": "Indiana",
                    "value": "IN",
                  },
                  Object {
                    "text": "Iowa",
                    "value": "IA",
                  },
                  Object {
                    "text": "Kansas",
                    "value": "KS",
                  },
                  Object {
                    "text": "Kentucky",
                    "value": "KY",
                  },
                  Object {
                    "text": "Louisiana",
                    "value": "LA",
                  },
                  Object {
                    "text": "Maine",
                    "value": "ME",
                  },
                  Object {
                    "text": "Maryland",
                    "value": "MD",
                  },
                  Object {
                    "text": "Massachusetts",
                    "value": "MA",
                  },
                  Object {
                    "text": "Michigan",
                    "value": "MI",
                  },
                  Object {
                    "text": "Minnesota",
                    "value": "MN",
                  },
                  Object {
                    "text": "Mississippi",
                    "value": "MS",
                  },
                  Object {
                    "text": "Missouri",
                    "value": "MO",
                  },
                  Object {
                    "text": "Montana",
                    "value": "MT",
                  },
                  Object {
                    "text": "Nebraska",
                    "value": "NE",
                  },
                  Object {
                    "text": "Nevada",
                    "value": "NV",
                  },
                  Object {
                    "text": "New Hampshire",
                    "value": "NH",
                  },
                  Object {
                    "text": "New Jersey",
                    "value": "NJ",
                  },
                  Object {
                    "text": "New Mexico",
                    "value": "NM",
                  },
                  Object {
                    "text": "New York",
                    "value": "NY",
                  },
                  Object {
                    "text": "North Carolina",
                    "value": "NC",
                  },
                  Object {
                    "text": "North Dakota",
                    "value": "ND",
                  },
                  Object {
                    "text": "Ohio",
                    "value": "OH",
                  },
                  Object {
                    "text": "Oklahoma",
                    "value": "OK",
                  },
                  Object {
                    "text": "Oregon",
                    "value": "OR",
                  },
                  Object {
                    "text": "Pennsylvania",
                    "value": "PA",
                  },
                  Object {
                    "text": "Rhode Island",
                    "value": "RI",
                  },
                  Object {
                    "text": "South Carolina",
                    "value": "SC",
                  },
                  Object {
                    "text": "South Dakota",
                    "value": "SD",
                  },
                  Object {
                    "text": "Tennessee",
                    "value": "TN",
                  },
                  Object {
                    "text": "Texas",
                    "value": "TX",
                  },
                  Object {
                    "text": "Utah",
                    "value": "UT",
                  },
                  Object {
                    "text": "Vermont",
                    "value": "VT",
                  },
                  Object {
                    "text": "Virginia",
                    "value": "VA",
                  },
                  Object {
                    "text": "Washington",
                    "value": "WA",
                  },
                  Object {
                    "text": "West Virginia",
                    "value": "WV",
                  },
                  Object {
                    "text": "Wisconsin",
                    "value": "WI",
                  },
                  Object {
                    "text": "Wyoming",
                    "value": "WY",
                  },
                ]
              }
              getItemProps={[Function]}
              getMenuProps={[Function]}
              getTriggerProps={[Function]}
              id="select-92"
              isOpen={false}
              modifiers={
                Object {
                  "contentWidth": Object {
                    "enabled": true,
                    "fn": [Function],
                  },
                }
              }
              onClose={[Function]}
              onOpen={[Function]}
              placement="bottom-start"
            >
              <Popover
                className="css-0"
                content={
                  <DropdownContent
                    data={
                      Array [
                        Object {
                          "text": "Alabama",
                          "value": "AL",
                        },
                        Object {
                          "text": "Alaska",
                          "value": "AK",
                        },
                        Object {
                          "text": "Arizona",
                          "value": "AZ",
                        },
                        Object {
                          "text": "Arkansas",
                          "value": "AR",
                        },
                        Object {
                          "text": "California",
                          "value": "CA",
                        },
                        Object {
                          "text": "Colorado",
                          "value": "CO",
                        },
                        Object {
                          "text": "Connecticut",
                          "value": "CT",
                        },
                        Object {
                          "text": "Delaware",
                          "value": "DE",
                        },
                        Object {
                          "text": "Florida",
                          "value": "FL",
                        },
                        Object {
                          "text": "Georgia",
                          "value": "GA",
                        },
                        Object {
                          "text": "Hawaii",
                          "value": "HI",
                        },
                        Object {
                          "text": "Idaho",
                          "value": "ID",
                        },
                        Object {
                          "text": "Illinois",
                          "value": "IL",
                        },
                        Object {
                          "text": "Indiana",
                          "value": "IN",
                        },
                        Object {
                          "text": "Iowa",
                          "value": "IA",
                        },
                        Object {
                          "text": "Kansas",
                          "value": "KS",
                        },
                        Object {
                          "text": "Kentucky",
                          "value": "KY",
                        },
                        Object {
                          "text": "Louisiana",
                          "value": "LA",
                        },
                        Object {
                          "text": "Maine",
                          "value": "ME",
                        },
                        Object {
                          "text": "Maryland",
                          "value": "MD",
                        },
                        Object {
                          "text": "Massachusetts",
                          "value": "MA",
                        },
                        Object {
                          "text": "Michigan",
                          "value": "MI",
                        },
                        Object {
                          "text": "Minnesota",
                          "value": "MN",
                        },
                        Object {
                          "text": "Mississippi",
                          "value": "MS",
                        },
                        Object {
                          "text": "Missouri",
                          "value": "MO",
                        },
                        Object {
                          "text": "Montana",
                          "value": "MT",
                        },
                        Object {
                          "text": "Nebraska",
                          "value": "NE",
                        },
                        Object {
                          "text": "Nevada",
                          "value": "NV",
                        },
                        Object {
                          "text": "New Hampshire",
                          "value": "NH",
                        },
                        Object {
                          "text": "New Jersey",
                          "value": "NJ",
                        },
                        Object {
                          "text": "New Mexico",
                          "value": "NM",
                        },
                        Object {
                          "text": "New York",
                          "value": "NY",
                        },
                        Object {
                          "text": "North Carolina",
                          "value": "NC",
                        },
                        Object {
                          "text": "North Dakota",
                          "value": "ND",
                        },
                        Object {
                          "text": "Ohio",
                          "value": "OH",
                        },
                        Object {
                          "text": "Oklahoma",
                          "value": "OK",
                        },
                        Object {
                          "text": "Oregon",
                          "value": "OR",
                        },
                        Object {
                          "text": "Pennsylvania",
                          "value": "PA",
                        },
                        Object {
                          "text": "Rhode Island",
                          "value": "RI",
                        },
                        Object {
                          "text": "South Carolina",
                          "value": "SC",
                        },
                        Object {
                          "text": "South Dakota",
                          "value": "SD",
                        },
                        Object {
                          "text": "Tennessee",
                          "value": "TN",
                        },
                        Object {
                          "text": "Texas",
                          "value": "TX",
                        },
                        Object {
                          "text": "Utah",
                          "value": "UT",
                        },
                        Object {
                          "text": "Vermont",
                          "value": "VT",
                        },
                        Object {
                          "text": "Virginia",
                          "value": "VA",
                        },
                        Object {
                          "text": "Washington",
                          "value": "WA",
                        },
                        Object {
                          "text": "West Virginia",
                          "value": "WV",
                        },
                        Object {
                          "text": "Wisconsin",
                          "value": "WI",
                        },
                        Object {
                          "text": "Wyoming",
                          "value": "WY",
                        },
                      ]
                    }
                    getItemProps={[Function]}
                    getMenuProps={[Function]}
                    id="select-92-content"
                    modifiers={
                      Object {
                        "contentWidth": Object {
                          "enabled": true,
                          "fn": [Function],
                        },
                      }
                    }
                    placement="bottom-start"
                    wide={undefined}
                  />
                }
                focusTriggerOnClose={true}
                getItemProps={[Function]}
                getMenuProps={[Function]}
                getTriggerProps={[Function]}
                hasArrow={true}
                id="select-92"
                isOpen={false}
                onClose={[Function]}
                onOpen={[Function]}
                placement="bottom"
                triggerRef={[Function]}
                wrapContent={false}
              >
                <Popover
                  className="css-0"
                  content={
                    <DropdownContent
                      data={
                        Array [
                          Object {
                            "text": "Alabama",
                            "value": "AL",
                          },
                          Object {
                            "text": "Alaska",
                            "value": "AK",
                          },
                          Object {
                            "text": "Arizona",
                            "value": "AZ",
                          },
                          Object {
                            "text": "Arkansas",
                            "value": "AR",
                          },
                          Object {
                            "text": "California",
                            "value": "CA",
                          },
                          Object {
                            "text": "Colorado",
                            "value": "CO",
                          },
                          Object {
                            "text": "Connecticut",
                            "value": "CT",
                          },
                          Object {
                            "text": "Delaware",
                            "value": "DE",
                          },
                          Object {
                            "text": "Florida",
                            "value": "FL",
                          },
                          Object {
                            "text": "Georgia",
                            "value": "GA",
                          },
                          Object {
                            "text": "Hawaii",
                            "value": "HI",
                          },
                          Object {
                            "text": "Idaho",
                            "value": "ID",
                          },
                          Object {
                            "text": "Illinois",
                            "value": "IL",
                          },
                          Object {
                            "text": "Indiana",
                            "value": "IN",
                          },
                          Object {
                            "text": "Iowa",
                            "value": "IA",
                          },
                          Object {
                            "text": "Kansas",
                            "value": "KS",
                          },
                          Object {
                            "text": "Kentucky",
                            "value": "KY",
                          },
                          Object {
                            "text": "Louisiana",
                            "value": "LA",
                          },
                          Object {
                            "text": "Maine",
                            "value": "ME",
                          },
                          Object {
                            "text": "Maryland",
                            "value": "MD",
                          },
                          Object {
                            "text": "Massachusetts",
                            "value": "MA",
                          },
                          Object {
                            "text": "Michigan",
                            "value": "MI",
                          },
                          Object {
                            "text": "Minnesota",
                            "value": "MN",
                          },
                          Object {
                            "text": "Mississippi",
                            "value": "MS",
                          },
                          Object {
                            "text": "Missouri",
                            "value": "MO",
                          },
                          Object {
                            "text": "Montana",
                            "value": "MT",
                          },
                          Object {
                            "text": "Nebraska",
                            "value": "NE",
                          },
                          Object {
                            "text": "Nevada",
                            "value": "NV",
                          },
                          Object {
                            "text": "New Hampshire",
                            "value": "NH",
                          },
                          Object {
                            "text": "New Jersey",
                            "value": "NJ",
                          },
                          Object {
                            "text": "New Mexico",
                            "value": "NM",
                          },
                          Object {
                            "text": "New York",
                            "value": "NY",
                          },
                          Object {
                            "text": "North Carolina",
                            "value": "NC",
                          },
                          Object {
                            "text": "North Dakota",
                            "value": "ND",
                          },
                          Object {
                            "text": "Ohio",
                            "value": "OH",
                          },
                          Object {
                            "text": "Oklahoma",
                            "value": "OK",
                          },
                          Object {
                            "text": "Oregon",
                            "value": "OR",
                          },
                          Object {
                            "text": "Pennsylvania",
                            "value": "PA",
                          },
                          Object {
                            "text": "Rhode Island",
                            "value": "RI",
                          },
                          Object {
                            "text": "South Carolina",
                            "value": "SC",
                          },
                          Object {
                            "text": "South Dakota",
                            "value": "SD",
                          },
                          Object {
                            "text": "Tennessee",
                            "value": "TN",
                          },
                          Object {
                            "text": "Texas",
                            "value": "TX",
                          },
                          Object {
                            "text": "Utah",
                            "value": "UT",
                          },
                          Object {
                            "text": "Vermont",
                            "value": "VT",
                          },
                          Object {
                            "text": "Virginia",
                            "value": "VA",
                          },
                          Object {
                            "text": "Washington",
                            "value": "WA",
                          },
                          Object {
                            "text": "West Virginia",
                            "value": "WV",
                          },
                          Object {
                            "text": "Wisconsin",
                            "value": "WI",
                          },
                          Object {
                            "text": "Wyoming",
                            "value": "WY",
                          },
                        ]
                      }
                      getItemProps={[Function]}
                      getMenuProps={[Function]}
                      id="select-92-content"
                      modifiers={
                        Object {
                          "contentWidth": Object {
                            "enabled": true,
                            "fn": [Function],
                          },
                        }
                      }
                      placement="bottom-start"
                      wide={undefined}
                    />
                  }
                  focusTriggerOnClose={true}
                  getItemProps={[Function]}
                  getMenuProps={[Function]}
                  getTriggerProps={[Function]}
                  hasArrow={true}
                  id="select-92"
                  isOpen={false}
                  onClose={[Function]}
                  onOpen={[Function]}
                  placement="bottom"
                  tag="span"
                  triggerRef={[Function]}
                  wrapContent={false}
                >
                  <Manager
                    className="css-1"
                    id="select-92"
                    tag="span"
                  >
                    <span
                      className="css-1"
                      id="select-92"
                    >
                      <PopoverTrigger
                        aria-describedby="select-92-content"
                        aria-expanded={false}
                        aria-haspopup="listbox"
                        aria-owns="select-92-content"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        role="button"
                        tabIndex={0}
                      >
                        <PopoverTrigger
                          component="span"
                        >
                          <Target
                            className="css-2"
                            component="span"
                          >
                            <span
                              className="css-2"
                            >
                              <SelectTrigger
                                aria-describedby="select-92-content"
                                aria-expanded={false}
                                aria-haspopup="listbox"
                                aria-owns="select-92-content"
                                isOpen={false}
                                onBlur={[Function]}
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                placeholder="Choose a state..."
                                role="button"
                                size="large"
                                tabIndex={0}
                                triggerRef={[Function]}
                              >
                                <SelectTrigger
                                  afterItems={
                                    Array [
                                      <IconArrowDropdownDown
                                        css={
                                          Object {
                                            "margin": "0.5em",
                                          }
                                        }
                                        size="1.5em"
                                      />,
                                      <input
                                        name={undefined}
                                        type="hidden"
                                        value=""
                                      />,
                                    ]
                                  }
                                  aria-describedby="select-92-content"
                                  aria-expanded={false}
                                  aria-haspopup="listbox"
                                  aria-owns="select-92-content"
                                  control={[Function]}
                                  controlProps={
                                    Object {
                                      "hasPlaceholder": true,
                                      "variant": undefined,
                                    }
                                  }
                                  fauxControlRef={[Function]}
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  role="button"
                                  size="large"
                                  tabIndex={0}
                                >
                                  <FauxControl
                                    afterItems={
                                      Array [
                                        <IconArrowDropdownDown
                                          css={
                                            Object {
                                              "margin": "0.5em",
                                            }
                                          }
                                          size="1.5em"
                                        />,
                                        <input
                                          name={undefined}
                                          type="hidden"
                                          value=""
                                        />,
                                      ]
                                    }
                                    aria-describedby="select-92-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-92-content"
                                    className="css-3"
                                    control={[Function]}
                                    controlProps={
                                      Object {
                                        "hasPlaceholder": true,
                                        "variant": undefined,
                                      }
                                    }
                                    fauxControlRef={[Function]}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                  >
                                    <FauxControl
                                      aria-describedby="select-92-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-92-content"
                                      className="css-3"
                                      control={[Function]}
                                      innerRef={[Function]}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      tabIndex={0}
                                    >
                                      <div
                                        aria-describedby="select-92-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-92-content"
                                        className="css-7"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        <glamorous(Trigger)
                                          controlPropsIn={
                                            Object {
                                              "hasPlaceholder": true,
                                              "variant": undefined,
                                            }
                                          }
                                          hasPlaceholder={true}
                                          key="control"
                                          size="large"
                                        >
                                          <div
                                            className="css-20"
                                          >
                                            <TriggerContent>
                                              <span
                                                className="css-34"
                                              >
                                                Choose a state...
                                              </span>
                                            </TriggerContent>
                                          </div>
                                        </glamorous(Trigger)>
                                        <IconArrowDropdownDown
                                          css={
                                            Object {
                                              "margin": "0.5em",
                                            }
                                          }
                                          key="arrow"
                                          size="1.5em"
                                        >
                                          <Icon
                                            css={
                                              Object {
                                                "margin": "0.5em",
                                              }
                                            }
                                            rtl={false}
                                            size="1.5em"
                                          >
                                            <glamorous(svg)
                                              aria-hidden={true}
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              role="img"
                                              rtl={false}
                                              size="1.5em"
                                              viewBox="0 0 24 24"
                                            >
                                              <svg
                                                aria-hidden={true}
                                                className="css-35"
                                                role="img"
                                                viewBox="0 0 24 24"
                                              >
                                                <g>
                                                  <path
                                                    d="M12 17.5l-8-8h16z"
                                                  />
                                                </g>
                                              </svg>
                                            </glamorous(svg)>
                                          </Icon>
                                        </IconArrowDropdownDown>
                                        <input
                                          key="input"
                                          type="hidden"
                                          value=""
                                        />
                                        <Underlay>
                                          <div
                                            className="css-36"
                                          />
                                        </Underlay>
                                      </div>
                                    </FauxControl>
                                  </FauxControl>
                                </SelectTrigger>
                              </SelectTrigger>
                            </span>
                          </Target>
                        </PopoverTrigger>
                      </PopoverTrigger>
                    </span>
                  </Manager>
                </Popover>
              </Popover>
            </Dropdown>
          </ThemeProvider>
        </ThemeProvider>
      </Themed(Dropdown)>
    </ThemedComponent>
  </Select>
</Select>
`;

exports[`Select demo examples placement 1`] = `
.css-0,
[data-css-0] {
  width: 100%;
}

.css-0 > span,
[data-css-0] > span {
  width: 100%;
}

.css-1,
[data-css-1] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: inline-block;
  width: 100%;
}

.css-1 *,
[data-css-1] *,
.css-1 *::before,
[data-css-1] *::before,
.css-1 *::after,
[data-css-1] *::after {
  box-sizing: inherit;
}

.css-1 > span,
[data-css-1] > span {
  width: 100%;
}

.css-2,
[data-css-2] {
  display: inline-block;
}

.css-3,
[data-css-3] {
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-3 [role="img"],
[data-css-3] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-3 [role="img"]:first-child,
[data-css-3] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-3 :not([role="img"]) ~ [role="img"],
[data-css-3] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-3 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-3] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-7,
[data-css-7] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-7 *,
[data-css-7] *,
.css-7 *::before,
[data-css-7] *::before,
.css-7 *::after,
[data-css-7] *::after {
  box-sizing: inherit;
}

.css-7:hover > div:last-child,
[data-css-7]:hover > div:last-child,
.css-7[data-simulate-hover] > div:last-child,
[data-css-7][data-simulate-hover] > div:last-child {
  border-color: #2e6fd9;
}

.css-7:focus > div:last-child,
[data-css-7]:focus > div:last-child,
.css-7[data-simulate-focus] > div:last-child,
[data-css-7][data-simulate-focus] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7:active > div:last-child,
[data-css-7]:active > div:last-child,
.css-7[data-simulate-active] > div:last-child,
[data-css-7][data-simulate-active] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7 [role="img"],
[data-css-7] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-7 [role="img"]:first-child,
[data-css-7] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-7 :not([role="img"]) ~ [role="img"],
[data-css-7] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-7 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-7] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-20,
[data-css-20] {
  align-items: center;
  color: #8e99ab;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  font-style: italic;
  height: 2.857142857142857em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-20::placeholder,
[data-css-20]::placeholder,
.css-20[data-simulate-placeholder],
[data-css-20][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-input-placeholder,
[data-css-20]::-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20:-ms-input-placeholder,
[data-css-20]:-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-clear,
[data-css-20]::-ms-clear,
.css-20[data-simulate-msclear],
[data-css-20][data-simulate-msclear] {
  display: none;
}

.css-20:focus ~ div:last-child,
[data-css-20]:focus ~ div:last-child,
.css-20[data-simulate-focus] ~ div:last-child,
[data-css-20][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-34,
[data-css-34] {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  user-select: none;
  width: 100%;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.css-35,
[data-css-35] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.css-36,
[data-css-36] {
  background-color: #fff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.css-37,
[data-css-37] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #fff;
  border: 1px solid #ebeff5;
  border-radius: 0.1875em;
  box-shadow: 0 2px 4px 0 rgba(0,0,0,0.2), 0 4px 8px 0 rgba(0,0,0,0.2);
  max-height: 23em;
  overflow-y: auto;
  user-select: none;
  width: 14em;
  z-index: 100;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.css-37 *,
[data-css-37] *,
.css-37 *::before,
[data-css-37] *::before,
.css-37 *::after,
[data-css-37] *::after {
  box-sizing: inherit;
}

.css-38,
[data-css-38] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
}

.css-38 *,
[data-css-38] *,
.css-38 *::before,
[data-css-38] *::before,
.css-38 *::after,
[data-css-38] *::after {
  box-sizing: inherit;
}

.css-39,
[data-css-39] {
  margin: 0.5em 0;
}

.css-39:first-child,
[data-css-39]:first-child,
.css-39 + .css-39,
[data-css-39] + [data-css-39] {
  margin-top: 0;
}

.css-39:last-child,
[data-css-39]:last-child,
.css-39[data-simulate-lastchild],
[data-css-39][data-simulate-lastchild] {
  margin-bottom: 0;
}

.css-45,
[data-css-45] {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  justify-content: space-between;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
}

.css-46,
[data-css-46] {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  flex-wrap: wrap;
  font-size: 0.875em;
  justify-content: space-between;
  padding: 0.21428571428571427em 0 0.2857142857142857em;
  white-space: normal;
  word-break: break-all;
  -webkit-flex: 1 1 auto;
  -webkit-box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
}

.css-47,
[data-css-47] {
  margin-right: 0.5714285714285714em;
  word-break: break-word;
}

.css-48,
[data-css-48] {
  color: #58606e;
  font-size: 0.75em;
  padding-top: 0.25em;
  word-break: break-word;
}

.css-49,
[data-css-49] {
  color: #333840;
  cursor: pointer;
  font-weight: 400;
  padding: 0.5em 1em;
}

.css-49:focus,
[data-css-49]:focus,
.css-49[data-simulate-focus],
[data-css-49][data-simulate-focus] {
  background-color: #f5f7fa;
  outline: 0;
}

.css-49:hover,
[data-css-49]:hover,
.css-49[data-simulate-hover],
[data-css-49][data-simulate-hover] {
  background-color: #f5f7fa;
}

.css-49:active,
[data-css-49]:active,
.css-49[data-simulate-active],
[data-css-49][data-simulate-active] {
  background-color: #ebeff5;
}

.css-49 [role="img"],
[data-css-49] [role="img"] {
  box-sizing: content-box;
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-49 [role="img"]:first-child,
[data-css-49] [role="img"]:first-child {
  margin-right: 0.5em;
}

.css-49 [role="img"]:last-child,
[data-css-49] [role="img"]:last-child {
  margin-left: 0.5em;
}

.css-60,
[data-css-60] {
  height: 175px;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  align-items: flex-start;
  justify-content: center;
  -webkit-box-align: start;
  -webkit-align-items: flex-start;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
}

<glamorous(div)>
  <div
    className="css-60"
  >
    <Select
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      isOpen={true}
      placeholder="Select..."
      placement="bottom-start"
      size="large"
    >
      <Select
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        getItemProps={[Function]}
        getMenuProps={[Function]}
        getTriggerProps={[Function]}
        id="select-119"
        isOpen={true}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placement="bottom-start"
      >
        <ThemedComponent
          className="css-0"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          getItemProps={[Function]}
          getMenuProps={[Function]}
          getTriggerProps={[Function]}
          id="select-119"
          isOpen={true}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placement="bottom-start"
        >
          <Themed(Dropdown)
            className="css-0"
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            getItemProps={[Function]}
            getMenuProps={[Function]}
            getTriggerProps={[Function]}
            id="select-119"
            isOpen={true}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onClose={[Function]}
            onOpen={[Function]}
            placement="bottom-start"
          >
            <ThemeProvider>
              <ThemeProvider>
                <Dropdown
                  className="css-0"
                  data={
                    Array [
                      Object {
                        "text": "Alpha",
                        "value": "alpha",
                      },
                      Object {
                        "text": "Beta",
                        "value": "beta",
                      },
                      Object {
                        "text": "Gamma",
                        "value": "gamma",
                      },
                    ]
                  }
                  getItemProps={[Function]}
                  getMenuProps={[Function]}
                  getTriggerProps={[Function]}
                  id="select-119"
                  isOpen={true}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placement="bottom-start"
                >
                  <Popover
                    className="css-0"
                    content={
                      <DropdownContent
                        data={
                          Array [
                            Object {
                              "text": "Alpha",
                              "value": "alpha",
                            },
                            Object {
                              "text": "Beta",
                              "value": "beta",
                            },
                            Object {
                              "text": "Gamma",
                              "value": "gamma",
                            },
                          ]
                        }
                        getItemProps={[Function]}
                        getMenuProps={[Function]}
                        id="select-119-content"
                        modifiers={
                          Object {
                            "contentWidth": Object {
                              "enabled": true,
                              "fn": [Function],
                            },
                          }
                        }
                        placement="bottom-start"
                        wide={undefined}
                      />
                    }
                    focusTriggerOnClose={true}
                    getItemProps={[Function]}
                    getMenuProps={[Function]}
                    getTriggerProps={[Function]}
                    hasArrow={true}
                    id="select-119"
                    isOpen={true}
                    onClose={[Function]}
                    onOpen={[Function]}
                    placement="bottom"
                    triggerRef={[Function]}
                    wrapContent={false}
                  >
                    <Popover
                      className="css-0"
                      content={
                        <DropdownContent
                          data={
                            Array [
                              Object {
                                "text": "Alpha",
                                "value": "alpha",
                              },
                              Object {
                                "text": "Beta",
                                "value": "beta",
                              },
                              Object {
                                "text": "Gamma",
                                "value": "gamma",
                              },
                            ]
                          }
                          getItemProps={[Function]}
                          getMenuProps={[Function]}
                          id="select-119-content"
                          modifiers={
                            Object {
                              "contentWidth": Object {
                                "enabled": true,
                                "fn": [Function],
                              },
                            }
                          }
                          placement="bottom-start"
                          wide={undefined}
                        />
                      }
                      focusTriggerOnClose={true}
                      getItemProps={[Function]}
                      getMenuProps={[Function]}
                      getTriggerProps={[Function]}
                      hasArrow={true}
                      id="select-119"
                      isOpen={true}
                      onClose={[Function]}
                      onOpen={[Function]}
                      placement="bottom"
                      tag="span"
                      triggerRef={[Function]}
                      wrapContent={false}
                    >
                      <Manager
                        className="css-1"
                        id="select-119"
                        tag="span"
                      >
                        <span
                          className="css-1"
                          id="select-119"
                        >
                          <PopoverTrigger
                            aria-activedescendant="select-119-menu"
                            aria-describedby="select-119-content"
                            aria-expanded={true}
                            aria-haspopup="listbox"
                            aria-owns="select-119-content"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            <PopoverTrigger
                              component="span"
                            >
                              <Target
                                className="css-2"
                                component="span"
                              >
                                <span
                                  className="css-2"
                                >
                                  <SelectTrigger
                                    aria-activedescendant="select-119-menu"
                                    aria-describedby="select-119-content"
                                    aria-expanded={true}
                                    aria-haspopup="listbox"
                                    aria-owns="select-119-content"
                                    isOpen={true}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    placeholder="Select..."
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                    triggerRef={[Function]}
                                  >
                                    <SelectTrigger
                                      afterItems={
                                        Array [
                                          <IconArrowDropdownUp
                                            css={
                                              Object {
                                                "margin": "0.5em",
                                              }
                                            }
                                            size="1.5em"
                                          />,
                                          <input
                                            name={undefined}
                                            type="hidden"
                                            value=""
                                          />,
                                        ]
                                      }
                                      aria-activedescendant="select-119-menu"
                                      aria-describedby="select-119-content"
                                      aria-expanded={true}
                                      aria-haspopup="listbox"
                                      aria-owns="select-119-content"
                                      control={[Function]}
                                      controlProps={
                                        Object {
                                          "hasPlaceholder": true,
                                          "variant": undefined,
                                        }
                                      }
                                      fauxControlRef={[Function]}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                    >
                                      <FauxControl
                                        afterItems={
                                          Array [
                                            <IconArrowDropdownUp
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              size="1.5em"
                                            />,
                                            <input
                                              name={undefined}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-activedescendant="select-119-menu"
                                        aria-describedby="select-119-content"
                                        aria-expanded={true}
                                        aria-haspopup="listbox"
                                        aria-owns="select-119-content"
                                        className="css-3"
                                        control={[Function]}
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                      >
                                        <FauxControl
                                          aria-activedescendant="select-119-menu"
                                          aria-describedby="select-119-content"
                                          aria-expanded={true}
                                          aria-haspopup="listbox"
                                          aria-owns="select-119-content"
                                          className="css-3"
                                          control={[Function]}
                                          innerRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          tabIndex={0}
                                        >
                                          <div
                                            aria-activedescendant="select-119-menu"
                                            aria-describedby="select-119-content"
                                            aria-expanded={true}
                                            aria-haspopup="listbox"
                                            aria-owns="select-119-content"
                                            className="css-7"
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            tabIndex={0}
                                          >
                                            <glamorous(Trigger)
                                              controlPropsIn={
                                                Object {
                                                  "hasPlaceholder": true,
                                                  "variant": undefined,
                                                }
                                              }
                                              hasPlaceholder={true}
                                              key="control"
                                              size="large"
                                            >
                                              <div
                                                className="css-20"
                                              >
                                                <TriggerContent>
                                                  <span
                                                    className="css-34"
                                                  >
                                                    Select...
                                                  </span>
                                                </TriggerContent>
                                              </div>
                                            </glamorous(Trigger)>
                                            <IconArrowDropdownUp
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              key="arrow"
                                              size="1.5em"
                                            >
                                              <Icon
                                                css={
                                                  Object {
                                                    "margin": "0.5em",
                                                  }
                                                }
                                                rtl={false}
                                                size="1.5em"
                                              >
                                                <glamorous(svg)
                                                  aria-hidden={true}
                                                  css={
                                                    Object {
                                                      "margin": "0.5em",
                                                    }
                                                  }
                                                  role="img"
                                                  rtl={false}
                                                  size="1.5em"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="css-35"
                                                    role="img"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <g>
                                                      <path
                                                        d="M12 7.5l8 8H4z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </glamorous(svg)>
                                              </Icon>
                                            </IconArrowDropdownUp>
                                            <input
                                              key="input"
                                              type="hidden"
                                              value=""
                                            />
                                            <Underlay>
                                              <div
                                                className="css-36"
                                              />
                                            </Underlay>
                                          </div>
                                        </FauxControl>
                                      </FauxControl>
                                    </SelectTrigger>
                                  </SelectTrigger>
                                </span>
                              </Target>
                            </PopoverTrigger>
                          </PopoverTrigger>
                          <DropdownContent
                            data={
                              Array [
                                Object {
                                  "text": "Alpha",
                                  "value": "alpha",
                                },
                                Object {
                                  "text": "Beta",
                                  "value": "beta",
                                },
                                Object {
                                  "text": "Gamma",
                                  "value": "gamma",
                                },
                              ]
                            }
                            getItemProps={[Function]}
                            getMenuProps={[Function]}
                            id="select-119-content"
                            modifiers={
                              Object {
                                "contentWidth": Object {
                                  "enabled": true,
                                  "fn": [Function],
                                },
                              }
                            }
                            placement="bottom-start"
                          >
                            <DropdownContent
                              id="select-119-content"
                              modifiers={
                                Object {
                                  "contentWidth": Object {
                                    "enabled": true,
                                    "fn": [Function],
                                  },
                                }
                              }
                              placement="bottom-start"
                            >
                              <ThemedComponent
                                className="css-37"
                                id="select-119-content"
                                modifiers={
                                  Object {
                                    "contentWidth": Object {
                                      "enabled": true,
                                      "fn": [Function],
                                    },
                                  }
                                }
                                placement="bottom-start"
                              >
                                <RtlPopper
                                  className="css-37"
                                  id="select-119-content"
                                  modifiers={
                                    Object {
                                      "contentWidth": Object {
                                        "enabled": true,
                                        "fn": [Function],
                                      },
                                    }
                                  }
                                  placement="bottom-start"
                                  theme={
                                    Object {
                                      "DropdownContent_backgroundColor": "#fff",
                                      "DropdownContent_borderColor": "#ebeff5",
                                      "DropdownContent_borderRadius": "0.1875em",
                                      "DropdownContent_boxShadow": "0 2px 4px 0 rgba(0,0,0,0.2), 0 4px 8px 0 rgba(0,0,0,0.2)",
                                      "DropdownContent_margin": "5px",
                                      "DropdownContent_zIndex": 100,
                                      "DropdownIcon_fill": "#2e6fd9",
                                      "DropdownIcon_marginHorizontal": "0.5em",
                                      "Dropdown_backgroundColor": "#fff",
                                      "Dropdown_borderColor": "#c8d1e0",
                                      "Dropdown_borderColor_active": "#c8d1e0",
                                      "Dropdown_borderColor_focus": "#c8d1e0",
                                      "Dropdown_borderColor_hover": "#2e6fd9",
                                      "Dropdown_borderRadius": "0.1875em",
                                      "Dropdown_borderWidth": "1px",
                                      "Dropdown_boxShadow_active": "0 0 0 1px #fff, 0 0 0 2px #2e6fd9",
                                      "Dropdown_boxShadow_focus": "0 0 0 1px #fff, 0 0 0 2px #2e6fd9",
                                      "Dropdown_color_placeholder": "#8e99ab",
                                      "Dropdown_color_text": "#58606e",
                                      "Dropdown_fontSize": "0.875em",
                                      "Dropdown_fontSize_small": "0.75em",
                                      "Dropdown_height_jumbo": "3.25em",
                                      "Dropdown_height_large": "2.5em",
                                      "Dropdown_height_medium": "2em",
                                      "Dropdown_height_small": "1.5em",
                                      "Dropdown_paddingHorizontal": "1em",
                                      "Dropdown_paddingHorizontal_small": "0.5em",
                                      "backgroundColor_danger": "#db2929",
                                      "backgroundColor_danger_active": "#c71818",
                                      "backgroundColor_danger_activeMuted": "#f79999",
                                      "backgroundColor_danger_focus": "#db2929",
                                      "backgroundColor_danger_hover": "#eb4d4d",
                                      "backgroundColor_danger_muted": "#fabebe",
                                      "backgroundColor_disabled": "#ebeff5",
                                      "backgroundColor_input": "#fff",
                                      "backgroundColor_link_focus": "#dde3ed",
                                      "backgroundColor_success": "#0a8f4c",
                                      "backgroundColor_success_active": "#06783f",
                                      "backgroundColor_success_activeMuted": "#95f5c3",
                                      "backgroundColor_success_focus": "#0a8f4c",
                                      "backgroundColor_success_hover": "#10a35a",
                                      "backgroundColor_success_muted": "#c0fadc",
                                      "backgroundColor_warning": "#e05b2b",
                                      "backgroundColor_warning_active": "#cf4615",
                                      "backgroundColor_warning_activeMuted": "#fab69d",
                                      "backgroundColor_warning_focus": "#e05b2b",
                                      "backgroundColor_warning_hover": "#ed774c",
                                      "backgroundColor_warning_muted": "#fcd0c0",
                                      "borderColor": "#c8d1e0",
                                      "borderColor_active": "#2e6fd9",
                                      "borderColor_danger": "#db2929",
                                      "borderColor_danger_active": "#c71818",
                                      "borderColor_danger_focus": "#c71818",
                                      "borderColor_danger_hover": "#c71818",
                                      "borderColor_danger_muted": "#f27474",
                                      "borderColor_focus": "#2e6fd9",
                                      "borderColor_hover": "#2e6fd9",
                                      "borderColor_success": "#10a35a",
                                      "borderColor_success_active": "#0a8f4c",
                                      "borderColor_success_focus": "#0a8f4c",
                                      "borderColor_success_hover": "#0a8f4c",
                                      "borderColor_success_muted": "#67eba7",
                                      "borderColor_warning": "#e05b2b",
                                      "borderColor_warning_active": "#cf4615",
                                      "borderColor_warning_focus": "#cf4615",
                                      "borderColor_warning_hover": "#cf4615",
                                      "borderColor_warning_muted": "#f59776",
                                      "borderRadius_1": "0.1875em",
                                      "breakpoint_medium": 768,
                                      "breakpoint_narrow": 512,
                                      "breakpoint_wide": 1024,
                                      "color_black": "#1d1f24",
                                      "color_caption": "#58606e",
                                      "color_gray_10": "#f5f7fa",
                                      "color_gray_100": "#333840",
                                      "color_gray_20": "#ebeff5",
                                      "color_gray_30": "#dde3ed",
                                      "color_gray_40": "#c8d1e0",
                                      "color_gray_50": "#afbacc",
                                      "color_gray_60": "#8e99ab",
                                      "color_gray_70": "#707a8a",
                                      "color_gray_80": "#58606e",
                                      "color_gray_90": "#434a54",
                                      "color_placeholder": "#8e99ab",
                                      "color_text": "#333840",
                                      "color_text_danger": "#db2929",
                                      "color_text_danger_active": "#c71818",
                                      "color_text_danger_focus": "#db2929",
                                      "color_text_danger_hover": "#eb4d4d",
                                      "color_text_disabled": "#afbacc",
                                      "color_text_ondanger": "#fff",
                                      "color_text_onprimary": "#fff",
                                      "color_text_onsuccess": "#fff",
                                      "color_text_onwarning": "#fff",
                                      "color_text_primary": "#2e6fd9",
                                      "color_text_primary_active": "#1f5dc2",
                                      "color_text_primary_focus": "#2e6fd9",
                                      "color_text_primary_hover": "#4a89e8",
                                      "color_text_success": "#06783f",
                                      "color_text_success_active": "#046132",
                                      "color_text_success_focus": "#06783f",
                                      "color_text_success_hover": "#0a8f4c",
                                      "color_text_warning": "#cf4615",
                                      "color_text_warning_active": "#bd3909",
                                      "color_text_warning_focus": "#cf4615",
                                      "color_text_warning_hover": "#e05b2b",
                                      "color_theme_10": "#e6eefc",
                                      "color_theme_100": "#0f397d",
                                      "color_theme_20": "#c2dbfc",
                                      "color_theme_30": "#9dc2fa",
                                      "color_theme_40": "#72a5f2",
                                      "color_theme_50": "#4a89e8",
                                      "color_theme_60": "#2e6fd9",
                                      "color_theme_70": "#1f5dc2",
                                      "color_theme_80": "#164ea8",
                                      "color_theme_90": "#114091",
                                      "color_white": "#fff",
                                      "direction": "ltr",
                                      "fontFamily": "Open Sans",
                                      "fontFamily_monospace": "\\"SF Mono\\", \\"Droid Sans Mono\\", \\"Source Code Pro\\", Monaco, Consolas, \\"Courier New\\", Courier, monospace",
                                      "fontFamily_system": "-apple-system, system-ui, BlinkMacSystemFont, \\"Segoe UI\\", Roboto, Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\", \\"Segoe UI Symbol\\"",
                                      "fontSize_base": 16,
                                      "fontSize_h1": "2.125em",
                                      "fontSize_h2": "1.75em",
                                      "fontSize_h3": "1.375em",
                                      "fontSize_h4": "1.125em",
                                      "fontSize_h5": "0.875em",
                                      "fontSize_h6": "0.875em",
                                      "fontSize_mouse": "0.6875em",
                                      "fontSize_prose": "1em",
                                      "fontSize_ui": "0.875em",
                                      "fontWeight_bold": 700,
                                      "fontWeight_extraBold": 800,
                                      "fontWeight_regular": 400,
                                      "fontWeight_semiBold": 600,
                                      "lineHeight": 1.25,
                                      "lineHeight_prose": 1.5,
                                      "shadow_1": "0 1px 2px 0 rgba(0,0,0,0.2), 0 2px 4px 0 rgba(0,0,0,0.2)",
                                      "shadow_2": "0 2px 4px 0 rgba(0,0,0,0.2), 0 4px 8px 0 rgba(0,0,0,0.2)",
                                      "shadow_3": "0 4px 8px 0 rgba(0,0,0,0.2), 0 8px 16px 0 rgba(0,0,0,0.2)",
                                      "shadow_4": "0 8px 16px 0 rgba(0,0,0,0.2), 0 20px 16px -8px rgba(0,0,0,0.2)",
                                      "shadow_5": "0 16px 24px 0 rgba(0,0,0,0.2), 0 32px 24px -16px rgba(0,0,0,0.2)",
                                      "size_jumbo": "3.25em",
                                      "size_large": "2.5em",
                                      "size_medium": "2em",
                                      "size_small": "1.5em",
                                      "space_inline_lg": "1.5em",
                                      "space_inline_md": "1em",
                                      "space_inline_sm": "0.5em",
                                      "space_inline_xl": "2em",
                                      "space_inline_xs": "0.25em",
                                      "space_inline_xxl": "4em",
                                      "space_inline_xxs": "0.125em",
                                      "space_inset_lg": "1.5em",
                                      "space_inset_md": "1em",
                                      "space_inset_sm": "0.5em",
                                      "space_stack_lg": "1.5em",
                                      "space_stack_md": "1em",
                                      "space_stack_sm": "0.5em",
                                      "space_stack_xl": "2em",
                                      "space_stack_xs": "0.25em",
                                      "space_stack_xxl": "4em",
                                      "space_stack_xxs": "0.125em",
                                      "zIndex_100": 100,
                                      "zIndex_1600": 1600,
                                      "zIndex_200": 200,
                                      "zIndex_400": 400,
                                      "zIndex_800": 800,
                                    }
                                  }
                                >
                                  <Popper
                                    className="css-37"
                                    component="div"
                                    eventsEnabled={true}
                                    id="select-119-content"
                                    modifiers={
                                      Object {
                                        "contentWidth": Object {
                                          "enabled": true,
                                          "fn": [Function],
                                        },
                                      }
                                    }
                                    placement="bottom-start"
                                  >
                                    <div
                                      className="css-37"
                                      id="select-119-content"
                                      style={
                                        Object {
                                          "opacity": 0,
                                          "pointerEvents": "none",
                                          "position": "absolute",
                                        }
                                      }
                                    >
                                      <Menu
                                        data={
                                          Array [
                                            Object {
                                              "text": "Alpha",
                                              "value": "alpha",
                                            },
                                            Object {
                                              "text": "Beta",
                                              "value": "beta",
                                            },
                                            Object {
                                              "text": "Gamma",
                                              "value": "gamma",
                                            },
                                          ]
                                        }
                                        getItemProps={[Function]}
                                        id="select-119-menu"
                                        role="listbox"
                                      >
                                        <Menu
                                          id="select-119-menu"
                                          role="listbox"
                                        >
                                          <div
                                            className="css-38"
                                            id="select-119-menu"
                                            role="listbox"
                                          >
                                            <MenuGroup
                                              key="0"
                                            >
                                              <MenuGroup>
                                                <div
                                                  className="css-39"
                                                >
                                                  <MenuItem
                                                    aria-selected={false}
                                                    id="select-119-item-0"
                                                    isHighlighted={false}
                                                    item={
                                                      Object {
                                                        "text": "Alpha",
                                                        "value": "alpha",
                                                      }
                                                    }
                                                    key="0"
                                                    onClick={[Function]}
                                                    role="option"
                                                    tabIndex={null}
                                                    value="alpha"
                                                  >
                                                    <MenuItem
                                                      aria-selected={false}
                                                      id="select-119-item-0"
                                                      isHighlighted={false}
                                                      item={
                                                        Object {
                                                          "text": "Alpha",
                                                          "value": "alpha",
                                                        }
                                                      }
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="option"
                                                      tabIndex={null}
                                                      value="alpha"
                                                    >
                                                      <div
                                                        aria-selected={false}
                                                        className="css-49"
                                                        id="select-119-item-0"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="option"
                                                        tabIndex={null}
                                                      >
                                                        <glamorous(span)>
                                                          <span
                                                            className="css-45"
                                                          >
                                                            <glamorous(span)>
                                                              <span
                                                                className="css-46"
                                                              >
                                                                <glamorous(span)>
                                                                  <span
                                                                    className="css-47"
                                                                  >
                                                                    Alpha
                                                                  </span>
                                                                </glamorous(span)>
                                                                <glamorous(span)>
                                                                  <span
                                                                    className="css-48"
                                                                  />
                                                                </glamorous(span)>
                                                              </span>
                                                            </glamorous(span)>
                                                          </span>
                                                        </glamorous(span)>
                                                      </div>
                                                    </MenuItem>
                                                  </MenuItem>
                                                  <MenuItem
                                                    aria-selected={false}
                                                    id="select-119-item-1"
                                                    isHighlighted={false}
                                                    item={
                                                      Object {
                                                        "text": "Beta",
                                                        "value": "beta",
                                                      }
                                                    }
                                                    key="1"
                                                    onClick={[Function]}
                                                    role="option"
                                                    tabIndex={null}
                                                    value="beta"
                                                  >
                                                    <MenuItem
                                                      aria-selected={false}
                                                      id="select-119-item-1"
                                                      isHighlighted={false}
                                                      item={
                                                        Object {
                                                          "text": "Beta",
                                                          "value": "beta",
                                                        }
                                                      }
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="option"
                                                      tabIndex={null}
                                                      value="beta"
                                                    >
                                                      <div
                                                        aria-selected={false}
                                                        className="css-49"
                                                        id="select-119-item-1"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="option"
                                                        tabIndex={null}
                                                      >
                                                        <glamorous(span)>
                                                          <span
                                                            className="css-45"
                                                          >
                                                            <glamorous(span)>
                                                              <span
                                                                className="css-46"
                                                              >
                                                                <glamorous(span)>
                                                                  <span
                                                                    className="css-47"
                                                                  >
                                                                    Beta
                                                                  </span>
                                                                </glamorous(span)>
                                                                <glamorous(span)>
                                                                  <span
                                                                    className="css-48"
                                                                  />
                                                                </glamorous(span)>
                                                              </span>
                                                            </glamorous(span)>
                                                          </span>
                                                        </glamorous(span)>
                                                      </div>
                                                    </MenuItem>
                                                  </MenuItem>
                                                  <MenuItem
                                                    aria-selected={false}
                                                    id="select-119-item-2"
                                                    isHighlighted={false}
                                                    item={
                                                      Object {
                                                        "text": "Gamma",
                                                        "value": "gamma",
                                                      }
                                                    }
                                                    key="2"
                                                    onClick={[Function]}
                                                    role="option"
                                                    tabIndex={null}
                                                    value="gamma"
                                                  >
                                                    <MenuItem
                                                      aria-selected={false}
                                                      id="select-119-item-2"
                                                      isHighlighted={false}
                                                      item={
                                                        Object {
                                                          "text": "Gamma",
                                                          "value": "gamma",
                                                        }
                                                      }
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="option"
                                                      tabIndex={null}
                                                      value="gamma"
                                                    >
                                                      <div
                                                        aria-selected={false}
                                                        className="css-49"
                                                        id="select-119-item-2"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="option"
                                                        tabIndex={null}
                                                      >
                                                        <glamorous(span)>
                                                          <span
                                                            className="css-45"
                                                          >
                                                            <glamorous(span)>
                                                              <span
                                                                className="css-46"
                                                              >
                                                                <glamorous(span)>
                                                                  <span
                                                                    className="css-47"
                                                                  >
                                                                    Gamma
                                                                  </span>
                                                                </glamorous(span)>
                                                                <glamorous(span)>
                                                                  <span
                                                                    className="css-48"
                                                                  />
                                                                </glamorous(span)>
                                                              </span>
                                                            </glamorous(span)>
                                                          </span>
                                                        </glamorous(span)>
                                                      </div>
                                                    </MenuItem>
                                                  </MenuItem>
                                                </div>
                                              </MenuGroup>
                                            </MenuGroup>
                                          </div>
                                        </Menu>
                                      </Menu>
                                    </div>
                                  </Popper>
                                </RtlPopper>
                              </ThemedComponent>
                            </DropdownContent>
                          </DropdownContent>
                          <EventListener
                            listeners={
                              Array [
                                Object {
                                  "event": "click",
                                  "handler": [Function],
                                  "options": true,
                                  "target": "document",
                                },
                                Object {
                                  "event": "keydown",
                                  "handler": [Function],
                                  "options": true,
                                  "target": "document",
                                },
                              ]
                            }
                          />
                        </span>
                      </Manager>
                    </Popover>
                  </Popover>
                </Dropdown>
              </ThemeProvider>
            </ThemeProvider>
          </Themed(Dropdown)>
        </ThemedComponent>
      </Select>
    </Select>
  </div>
</glamorous(div)>
`;

exports[`Select demo examples portal 1`] = `
.css-0,
[data-css-0] {
  width: 100%;
}

.css-0 > span,
[data-css-0] > span {
  width: 100%;
}

.css-1,
[data-css-1] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: inline-block;
  width: 100%;
}

.css-1 *,
[data-css-1] *,
.css-1 *::before,
[data-css-1] *::before,
.css-1 *::after,
[data-css-1] *::after {
  box-sizing: inherit;
}

.css-1 > span,
[data-css-1] > span {
  width: 100%;
}

.css-2,
[data-css-2] {
  display: inline-block;
}

.css-3,
[data-css-3] {
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-3 [role="img"],
[data-css-3] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-3 [role="img"]:first-child,
[data-css-3] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-3 :not([role="img"]) ~ [role="img"],
[data-css-3] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-3 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-3] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-7,
[data-css-7] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-7 *,
[data-css-7] *,
.css-7 *::before,
[data-css-7] *::before,
.css-7 *::after,
[data-css-7] *::after {
  box-sizing: inherit;
}

.css-7:hover > div:last-child,
[data-css-7]:hover > div:last-child,
.css-7[data-simulate-hover] > div:last-child,
[data-css-7][data-simulate-hover] > div:last-child {
  border-color: #2e6fd9;
}

.css-7:focus > div:last-child,
[data-css-7]:focus > div:last-child,
.css-7[data-simulate-focus] > div:last-child,
[data-css-7][data-simulate-focus] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7:active > div:last-child,
[data-css-7]:active > div:last-child,
.css-7[data-simulate-active] > div:last-child,
[data-css-7][data-simulate-active] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7 [role="img"],
[data-css-7] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-7 [role="img"]:first-child,
[data-css-7] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-7 :not([role="img"]) ~ [role="img"],
[data-css-7] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-7 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-7] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-20,
[data-css-20] {
  align-items: center;
  color: #8e99ab;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  font-style: italic;
  height: 2.857142857142857em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-20::placeholder,
[data-css-20]::placeholder,
.css-20[data-simulate-placeholder],
[data-css-20][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-input-placeholder,
[data-css-20]::-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20:-ms-input-placeholder,
[data-css-20]:-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-clear,
[data-css-20]::-ms-clear,
.css-20[data-simulate-msclear],
[data-css-20][data-simulate-msclear] {
  display: none;
}

.css-20:focus ~ div:last-child,
[data-css-20]:focus ~ div:last-child,
.css-20[data-simulate-focus] ~ div:last-child,
[data-css-20][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-34,
[data-css-34] {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  user-select: none;
  width: 100%;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.css-35,
[data-css-35] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.css-36,
[data-css-36] {
  background-color: #fff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.css-37,
[data-css-37] {
  position: relative;
}

.css-38,
[data-css-38] {
  background-color: aliceblue;
  height: 360px;
  overflow: auto;
  position: relative;
}

.css-39,
[data-css-39] {
  height: 860px;
  width: 300vw;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  align-items: center;
  justify-content: center;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
}

.css-40,
[data-css-40] {
  left: 0;
  position: absolute;
  top: 0;
}

.css-41,
[data-css-41] {
  box-sizing: border-box;
  color: #2e6fd9;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: transparent;
  border-color: transparent;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 1.5em;
  min-width: 1.5em;
  padding: 0 0.5em;
  text-decoration: none;
  vertical-align: middle;
  left: 0;
  position: absolute;
  top: 0;
}

.css-41 *,
[data-css-41] *,
.css-41 *::before,
[data-css-41] *::before,
.css-41 *::after,
[data-css-41] *::after {
  box-sizing: inherit;
}

.css-41:focus,
[data-css-41]:focus,
.css-41[data-simulate-focus],
[data-css-41][data-simulate-focus] {
  border-color: #fff;
  box-shadow: 0 0 0 1px #2e6fd9;
  color: #2e6fd9;
  text-decoration: none;
}

.css-41:hover,
[data-css-41]:hover,
.css-41[data-simulate-hover],
[data-css-41][data-simulate-hover] {
  background-color: #f5f7fa;
  color: #2e6fd9;
  text-decoration: none;
}

.css-41:active,
[data-css-41]:active,
.css-41[data-simulate-active],
[data-css-41][data-simulate-active] {
  background-color: #ebeff5;
  color: #2e6fd9;
}

.css-41::-moz-focus-inner,
[data-css-41]::-moz-focus-inner,
.css-41[data-simulate-mozfocusinner],
[data-css-41][data-simulate-mozfocusinner] {
  border: 0;
}

.css-41 [role="img"],
[data-css-41] [role="img"] {
  box-sizing: content-box;
  fill: currentColor;
  display: block;
}

.css-41 [role="img"]:first-child,
[data-css-41] [role="img"]:first-child {
  margin-right: 0.5em;
}

.css-41 [role="img"]:last-child,
[data-css-41] [role="img"]:last-child {
  margin-left: 0.5em;
}

.css-41 [role="img"]:only-child,
[data-css-41] [role="img"]:only-child {
  margin: 0;
}

.css-55,
[data-css-55] {
  align-items: center;
  display: -webkit-inline-box;
  display: -moz-inline-box;
  display: -ms-inline-flexbox;
  display: -webkit-inline-flex;
  display: inline-flex;
  justify-content: center;
  max-height: 100%;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
}

.css-56,
[data-css-56] {
  display: block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  font-size: 0.75em;
  line-height: 2em;
}

<ScrollBox
  autoCenter={true}
  height={360}
>
  <glamorous(div)>
    <div
      className="css-37"
    >
      <glamorous(div)
        height={360}
      >
        <div
          className="css-38"
        >
          <glamorous(div)
            scrollAreaHeight={360}
          >
            <div
              className="css-39"
            >
              <Select
                data={
                  Array [
                    Object {
                      "text": "Alpha",
                      "value": "alpha",
                    },
                    Object {
                      "text": "Beta",
                      "value": "beta",
                    },
                    Object {
                      "text": "Gamma",
                      "value": "gamma",
                    },
                  ]
                }
                isOpen={true}
                modifiers={
                  Object {
                    "preventOverflow": Object {
                      "escapeWithReference": true,
                    },
                  }
                }
                usePortal={true}
              >
                <div
                  style={
                    Object {
                      "width": "14em",
                    }
                  }
                >
                  <Select
                    data={
                      Array [
                        Object {
                          "text": "Alpha",
                          "value": "alpha",
                        },
                        Object {
                          "text": "Beta",
                          "value": "beta",
                        },
                        Object {
                          "text": "Gamma",
                          "value": "gamma",
                        },
                      ]
                    }
                    isOpen={true}
                    modifiers={
                      Object {
                        "preventOverflow": Object {
                          "escapeWithReference": true,
                        },
                      }
                    }
                    placeholder="Select..."
                    placement="bottom-start"
                    size="large"
                    usePortal={true}
                  >
                    <Select
                      data={
                        Array [
                          Object {
                            "text": "Alpha",
                            "value": "alpha",
                          },
                          Object {
                            "text": "Beta",
                            "value": "beta",
                          },
                          Object {
                            "text": "Gamma",
                            "value": "gamma",
                          },
                        ]
                      }
                      getItemProps={[Function]}
                      getMenuProps={[Function]}
                      getTriggerProps={[Function]}
                      id="select-125"
                      isOpen={true}
                      modifiers={
                        Object {
                          "contentWidth": Object {
                            "enabled": true,
                            "fn": [Function],
                          },
                          "preventOverflow": Object {
                            "escapeWithReference": true,
                          },
                        }
                      }
                      onClose={[Function]}
                      onOpen={[Function]}
                      placement="bottom-start"
                      usePortal={true}
                    >
                      <ThemedComponent
                        className="css-0"
                        data={
                          Array [
                            Object {
                              "text": "Alpha",
                              "value": "alpha",
                            },
                            Object {
                              "text": "Beta",
                              "value": "beta",
                            },
                            Object {
                              "text": "Gamma",
                              "value": "gamma",
                            },
                          ]
                        }
                        getItemProps={[Function]}
                        getMenuProps={[Function]}
                        getTriggerProps={[Function]}
                        id="select-125"
                        isOpen={true}
                        modifiers={
                          Object {
                            "contentWidth": Object {
                              "enabled": true,
                              "fn": [Function],
                            },
                            "preventOverflow": Object {
                              "escapeWithReference": true,
                            },
                          }
                        }
                        onClose={[Function]}
                        onOpen={[Function]}
                        placement="bottom-start"
                        usePortal={true}
                      >
                        <Themed(Dropdown)
                          className="css-0"
                          data={
                            Array [
                              Object {
                                "text": "Alpha",
                                "value": "alpha",
                              },
                              Object {
                                "text": "Beta",
                                "value": "beta",
                              },
                              Object {
                                "text": "Gamma",
                                "value": "gamma",
                              },
                            ]
                          }
                          getItemProps={[Function]}
                          getMenuProps={[Function]}
                          getTriggerProps={[Function]}
                          id="select-125"
                          isOpen={true}
                          modifiers={
                            Object {
                              "contentWidth": Object {
                                "enabled": true,
                                "fn": [Function],
                              },
                              "preventOverflow": Object {
                                "escapeWithReference": true,
                              },
                            }
                          }
                          onClose={[Function]}
                          onOpen={[Function]}
                          placement="bottom-start"
                          usePortal={true}
                        >
                          <ThemeProvider>
                            <ThemeProvider>
                              <Dropdown
                                className="css-0"
                                data={
                                  Array [
                                    Object {
                                      "text": "Alpha",
                                      "value": "alpha",
                                    },
                                    Object {
                                      "text": "Beta",
                                      "value": "beta",
                                    },
                                    Object {
                                      "text": "Gamma",
                                      "value": "gamma",
                                    },
                                  ]
                                }
                                getItemProps={[Function]}
                                getMenuProps={[Function]}
                                getTriggerProps={[Function]}
                                id="select-125"
                                isOpen={true}
                                modifiers={
                                  Object {
                                    "contentWidth": Object {
                                      "enabled": true,
                                      "fn": [Function],
                                    },
                                    "preventOverflow": Object {
                                      "escapeWithReference": true,
                                    },
                                  }
                                }
                                onClose={[Function]}
                                onOpen={[Function]}
                                placement="bottom-start"
                                usePortal={true}
                              >
                                <Popover
                                  className="css-0"
                                  content={
                                    <DropdownContent
                                      data={
                                        Array [
                                          Object {
                                            "text": "Alpha",
                                            "value": "alpha",
                                          },
                                          Object {
                                            "text": "Beta",
                                            "value": "beta",
                                          },
                                          Object {
                                            "text": "Gamma",
                                            "value": "gamma",
                                          },
                                        ]
                                      }
                                      getItemProps={[Function]}
                                      getMenuProps={[Function]}
                                      id="select-125-content"
                                      modifiers={
                                        Object {
                                          "contentWidth": Object {
                                            "enabled": true,
                                            "fn": [Function],
                                          },
                                          "preventOverflow": Object {
                                            "escapeWithReference": true,
                                          },
                                        }
                                      }
                                      placement="bottom-start"
                                      wide={undefined}
                                    />
                                  }
                                  focusTriggerOnClose={true}
                                  getItemProps={[Function]}
                                  getMenuProps={[Function]}
                                  getTriggerProps={[Function]}
                                  hasArrow={true}
                                  id="select-125"
                                  isOpen={true}
                                  onClose={[Function]}
                                  onOpen={[Function]}
                                  placement="bottom"
                                  triggerRef={[Function]}
                                  usePortal={true}
                                  wrapContent={false}
                                >
                                  <Popover
                                    className="css-0"
                                    content={
                                      <DropdownContent
                                        data={
                                          Array [
                                            Object {
                                              "text": "Alpha",
                                              "value": "alpha",
                                            },
                                            Object {
                                              "text": "Beta",
                                              "value": "beta",
                                            },
                                            Object {
                                              "text": "Gamma",
                                              "value": "gamma",
                                            },
                                          ]
                                        }
                                        getItemProps={[Function]}
                                        getMenuProps={[Function]}
                                        id="select-125-content"
                                        modifiers={
                                          Object {
                                            "contentWidth": Object {
                                              "enabled": true,
                                              "fn": [Function],
                                            },
                                            "preventOverflow": Object {
                                              "escapeWithReference": true,
                                            },
                                          }
                                        }
                                        placement="bottom-start"
                                        wide={undefined}
                                      />
                                    }
                                    focusTriggerOnClose={true}
                                    getItemProps={[Function]}
                                    getMenuProps={[Function]}
                                    getTriggerProps={[Function]}
                                    hasArrow={true}
                                    id="select-125"
                                    isOpen={true}
                                    onClose={[Function]}
                                    onOpen={[Function]}
                                    placement="bottom"
                                    tag="span"
                                    triggerRef={[Function]}
                                    usePortal={true}
                                    wrapContent={false}
                                  >
                                    <Manager
                                      className="css-1"
                                      id="select-125"
                                      tag="span"
                                    >
                                      <span
                                        className="css-1"
                                        id="select-125"
                                      >
                                        <PopoverTrigger
                                          aria-activedescendant="select-125-menu"
                                          aria-describedby="select-125-content"
                                          aria-expanded={true}
                                          aria-haspopup="listbox"
                                          aria-owns="select-125-content"
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          tabIndex={0}
                                        >
                                          <PopoverTrigger
                                            component="span"
                                          >
                                            <Target
                                              className="css-2"
                                              component="span"
                                            >
                                              <span
                                                className="css-2"
                                              >
                                                <SelectTrigger
                                                  aria-activedescendant="select-125-menu"
                                                  aria-describedby="select-125-content"
                                                  aria-expanded={true}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-125-content"
                                                  isOpen={true}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  placeholder="Select..."
                                                  role="button"
                                                  size="large"
                                                  tabIndex={0}
                                                  triggerRef={[Function]}
                                                >
                                                  <SelectTrigger
                                                    afterItems={
                                                      Array [
                                                        <IconArrowDropdownUp
                                                          css={
                                                            Object {
                                                              "margin": "0.5em",
                                                            }
                                                          }
                                                          size="1.5em"
                                                        />,
                                                        <input
                                                          name={undefined}
                                                          type="hidden"
                                                          value=""
                                                        />,
                                                      ]
                                                    }
                                                    aria-activedescendant="select-125-menu"
                                                    aria-describedby="select-125-content"
                                                    aria-expanded={true}
                                                    aria-haspopup="listbox"
                                                    aria-owns="select-125-content"
                                                    control={[Function]}
                                                    controlProps={
                                                      Object {
                                                        "hasPlaceholder": true,
                                                        "variant": undefined,
                                                      }
                                                    }
                                                    fauxControlRef={[Function]}
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    role="button"
                                                    size="large"
                                                    tabIndex={0}
                                                  >
                                                    <FauxControl
                                                      afterItems={
                                                        Array [
                                                          <IconArrowDropdownUp
                                                            css={
                                                              Object {
                                                                "margin": "0.5em",
                                                              }
                                                            }
                                                            size="1.5em"
                                                          />,
                                                          <input
                                                            name={undefined}
                                                            type="hidden"
                                                            value=""
                                                          />,
                                                        ]
                                                      }
                                                      aria-activedescendant="select-125-menu"
                                                      aria-describedby="select-125-content"
                                                      aria-expanded={true}
                                                      aria-haspopup="listbox"
                                                      aria-owns="select-125-content"
                                                      className="css-3"
                                                      control={[Function]}
                                                      controlProps={
                                                        Object {
                                                          "hasPlaceholder": true,
                                                          "variant": undefined,
                                                        }
                                                      }
                                                      fauxControlRef={[Function]}
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      role="button"
                                                      size="large"
                                                      tabIndex={0}
                                                    >
                                                      <FauxControl
                                                        aria-activedescendant="select-125-menu"
                                                        aria-describedby="select-125-content"
                                                        aria-expanded={true}
                                                        aria-haspopup="listbox"
                                                        aria-owns="select-125-content"
                                                        className="css-3"
                                                        control={[Function]}
                                                        innerRef={[Function]}
                                                        onBlur={[Function]}
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        role="button"
                                                        tabIndex={0}
                                                      >
                                                        <div
                                                          aria-activedescendant="select-125-menu"
                                                          aria-describedby="select-125-content"
                                                          aria-expanded={true}
                                                          aria-haspopup="listbox"
                                                          aria-owns="select-125-content"
                                                          className="css-7"
                                                          onBlur={[Function]}
                                                          onClick={[Function]}
                                                          onKeyDown={[Function]}
                                                          onKeyUp={[Function]}
                                                          role="button"
                                                          tabIndex={0}
                                                        >
                                                          <glamorous(Trigger)
                                                            controlPropsIn={
                                                              Object {
                                                                "hasPlaceholder": true,
                                                                "variant": undefined,
                                                              }
                                                            }
                                                            hasPlaceholder={true}
                                                            key="control"
                                                            size="large"
                                                          >
                                                            <div
                                                              className="css-20"
                                                            >
                                                              <TriggerContent>
                                                                <span
                                                                  className="css-34"
                                                                >
                                                                  Select...
                                                                </span>
                                                              </TriggerContent>
                                                            </div>
                                                          </glamorous(Trigger)>
                                                          <IconArrowDropdownUp
                                                            css={
                                                              Object {
                                                                "margin": "0.5em",
                                                              }
                                                            }
                                                            key="arrow"
                                                            size="1.5em"
                                                          >
                                                            <Icon
                                                              css={
                                                                Object {
                                                                  "margin": "0.5em",
                                                                }
                                                              }
                                                              rtl={false}
                                                              size="1.5em"
                                                            >
                                                              <glamorous(svg)
                                                                aria-hidden={true}
                                                                css={
                                                                  Object {
                                                                    "margin": "0.5em",
                                                                  }
                                                                }
                                                                role="img"
                                                                rtl={false}
                                                                size="1.5em"
                                                                viewBox="0 0 24 24"
                                                              >
                                                                <svg
                                                                  aria-hidden={true}
                                                                  className="css-35"
                                                                  role="img"
                                                                  viewBox="0 0 24 24"
                                                                >
                                                                  <g>
                                                                    <path
                                                                      d="M12 7.5l8 8H4z"
                                                                    />
                                                                  </g>
                                                                </svg>
                                                              </glamorous(svg)>
                                                            </Icon>
                                                          </IconArrowDropdownUp>
                                                          <input
                                                            key="input"
                                                            type="hidden"
                                                            value=""
                                                          />
                                                          <Underlay>
                                                            <div
                                                              className="css-36"
                                                            />
                                                          </Underlay>
                                                        </div>
                                                      </FauxControl>
                                                    </FauxControl>
                                                  </SelectTrigger>
                                                </SelectTrigger>
                                              </span>
                                            </Target>
                                          </PopoverTrigger>
                                        </PopoverTrigger>
                                        <Portal />
                                        <EventListener
                                          listeners={
                                            Array [
                                              Object {
                                                "event": "click",
                                                "handler": [Function],
                                                "options": true,
                                                "target": "document",
                                              },
                                              Object {
                                                "event": "keydown",
                                                "handler": [Function],
                                                "options": true,
                                                "target": "document",
                                              },
                                            ]
                                          }
                                        />
                                      </span>
                                    </Manager>
                                  </Popover>
                                </Popover>
                              </Dropdown>
                            </ThemeProvider>
                          </ThemeProvider>
                        </Themed(Dropdown)>
                      </ThemedComponent>
                    </Select>
                  </Select>
                </div>
              </Select>
            </div>
          </glamorous(div)>
        </div>
      </glamorous(div)>
      <glamorous(Button)
        minimal={true}
        onClick={[Function]}
        size="small"
      >
        <Button
          className="css-40"
          element="button"
          minimal={true}
          onClick={[Function]}
          size="small"
          type="button"
          variant="regular"
        >
          <glamorous(button)
            className="css-40"
            element="button"
            minimal={true}
            onClick={[Function]}
            size="small"
            text="Re-center"
            type="button"
            variant="regular"
          >
            <button
              className="css-41"
              onClick={[Function]}
              type="button"
            >
              <glamorous(span)>
                <span
                  className="css-55"
                >
                  <glamorous(span)
                    size="small"
                  >
                    <span
                      className="css-56"
                    >
                      Re-center
                    </span>
                  </glamorous(span)>
                </span>
              </glamorous(span)>
            </button>
          </glamorous(button)>
        </Button>
      </glamorous(Button)>
    </div>
  </glamorous(div)>
</ScrollBox>
`;

exports[`Select demo examples read-only 1`] = `
.css-0,
[data-css-0] {
  width: 100%;
}

.css-0 > span,
[data-css-0] > span {
  width: 100%;
}

.css-1,
[data-css-1] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: inline-block;
  width: 100%;
}

.css-1 *,
[data-css-1] *,
.css-1 *::before,
[data-css-1] *::before,
.css-1 *::after,
[data-css-1] *::after {
  box-sizing: inherit;
}

.css-1 > span,
[data-css-1] > span {
  width: 100%;
}

.css-2,
[data-css-2] {
  display: inline-block;
}

.css-3,
[data-css-3] {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  user-select: none;
  width: 100%;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.css-4,
[data-css-4] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.css-5,
[data-css-5] {
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-5 [role="img"],
[data-css-5] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-5 [role="img"]:first-child,
[data-css-5] [role="img"]:first-child {
  fill: #afbacc;
  margin: 0 0.5em;
}

.css-5 :not([role="img"]) ~ [role="img"],
[data-css-5] :not([role="img"]) ~ [role="img"] {
  fill: #afbacc;
}

.css-5 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-5] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #afbacc;
  margin-left: 0.5em;
}

.css-9,
[data-css-9] {
  background-color: #ebeff5;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.css-10,
[data-css-10] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-10 *,
[data-css-10] *,
.css-10 *::before,
[data-css-10] *::before,
.css-10 *::after,
[data-css-10] *::after {
  box-sizing: inherit;
}

.css-10:hover > div:last-child,
[data-css-10]:hover > div:last-child,
.css-10[data-simulate-hover] > div:last-child,
[data-css-10][data-simulate-hover] > div:last-child {
  border-color: #2e6fd9;
}

.css-10:focus > div:last-child,
[data-css-10]:focus > div:last-child,
.css-10[data-simulate-focus] > div:last-child,
[data-css-10][data-simulate-focus] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-10:active > div:last-child,
[data-css-10]:active > div:last-child,
.css-10[data-simulate-active] > div:last-child,
[data-css-10][data-simulate-active] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-10 [role="img"],
[data-css-10] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-10 [role="img"]:first-child,
[data-css-10] [role="img"]:first-child {
  fill: #afbacc;
  margin: 0 0.5em;
}

.css-10 :not([role="img"]) ~ [role="img"],
[data-css-10] :not([role="img"]) ~ [role="img"] {
  fill: #afbacc;
}

.css-10 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-10] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #afbacc;
  margin-left: 0.5em;
}

.css-23,
[data-css-23] {
  align-items: center;
  color: #8e99ab;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  height: 2.857142857142857em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-23::placeholder,
[data-css-23]::placeholder,
.css-23[data-simulate-placeholder],
[data-css-23][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-23::-ms-input-placeholder,
[data-css-23]::-ms-input-placeholder,
.css-23[data-simulate-msinputplaceholder],
[data-css-23][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-23:-ms-input-placeholder,
[data-css-23]:-ms-input-placeholder,
.css-23[data-simulate-msinputplaceholder],
[data-css-23][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-23::-ms-clear,
[data-css-23]::-ms-clear,
.css-23[data-simulate-msclear],
[data-css-23][data-simulate-msclear] {
  display: none;
}

.css-23:focus ~ div:last-child,
[data-css-23]:focus ~ div:last-child,
.css-23[data-simulate-focus] ~ div:last-child,
[data-css-23][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

<Select
  data={
    Array [
      Object {
        "text": "Alpha",
        "value": "alpha",
      },
      Object {
        "text": "Beta",
        "value": "beta",
      },
      Object {
        "text": "Gamma",
        "value": "gamma",
      },
    ]
  }
  placeholder="Select..."
  placement="bottom-start"
  readOnly={true}
  selectedItem={
    Object {
      "text": "Alpha",
      "value": "alpha",
    }
  }
  size="large"
>
  <Select
    data={
      Array [
        Object {
          "text": "Alpha",
          "value": "alpha",
        },
        Object {
          "text": "Beta",
          "value": "beta",
        },
        Object {
          "text": "Gamma",
          "value": "gamma",
        },
      ]
    }
    disabled={true}
    getItemProps={[Function]}
    getMenuProps={[Function]}
    getTriggerProps={[Function]}
    id="select-96"
    isOpen={false}
    modifiers={
      Object {
        "contentWidth": Object {
          "enabled": true,
          "fn": [Function],
        },
      }
    }
    onClose={[Function]}
    onOpen={[Function]}
    placement="bottom-start"
    selectedItem={
      Object {
        "text": "Alpha",
        "value": "alpha",
      }
    }
  >
    <ThemedComponent
      className="css-0"
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      disabled={true}
      getItemProps={[Function]}
      getMenuProps={[Function]}
      getTriggerProps={[Function]}
      id="select-96"
      isOpen={false}
      modifiers={
        Object {
          "contentWidth": Object {
            "enabled": true,
            "fn": [Function],
          },
        }
      }
      onClose={[Function]}
      onOpen={[Function]}
      placement="bottom-start"
      selectedItem={
        Object {
          "text": "Alpha",
          "value": "alpha",
        }
      }
    >
      <Themed(Dropdown)
        className="css-0"
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        disabled={true}
        getItemProps={[Function]}
        getMenuProps={[Function]}
        getTriggerProps={[Function]}
        id="select-96"
        isOpen={false}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placement="bottom-start"
        selectedItem={
          Object {
            "text": "Alpha",
            "value": "alpha",
          }
        }
      >
        <ThemeProvider>
          <ThemeProvider>
            <Dropdown
              className="css-0"
              data={
                Array [
                  Object {
                    "text": "Alpha",
                    "value": "alpha",
                  },
                  Object {
                    "text": "Beta",
                    "value": "beta",
                  },
                  Object {
                    "text": "Gamma",
                    "value": "gamma",
                  },
                ]
              }
              disabled={true}
              getItemProps={[Function]}
              getMenuProps={[Function]}
              getTriggerProps={[Function]}
              id="select-96"
              isOpen={false}
              modifiers={
                Object {
                  "contentWidth": Object {
                    "enabled": true,
                    "fn": [Function],
                  },
                }
              }
              onClose={[Function]}
              onOpen={[Function]}
              placement="bottom-start"
              selectedItem={
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                }
              }
            >
              <Popover
                className="css-0"
                content={
                  <DropdownContent
                    data={
                      Array [
                        Object {
                          "text": "Alpha",
                          "value": "alpha",
                        },
                        Object {
                          "text": "Beta",
                          "value": "beta",
                        },
                        Object {
                          "text": "Gamma",
                          "value": "gamma",
                        },
                      ]
                    }
                    getItemProps={[Function]}
                    getMenuProps={[Function]}
                    id="select-96-content"
                    modifiers={
                      Object {
                        "contentWidth": Object {
                          "enabled": true,
                          "fn": [Function],
                        },
                      }
                    }
                    placement="bottom-start"
                    wide={undefined}
                  />
                }
                disabled={true}
                focusTriggerOnClose={true}
                getItemProps={[Function]}
                getMenuProps={[Function]}
                getTriggerProps={[Function]}
                hasArrow={true}
                id="select-96"
                isOpen={false}
                onClose={[Function]}
                onOpen={[Function]}
                placement="bottom"
                selectedItem={
                  Object {
                    "text": "Alpha",
                    "value": "alpha",
                  }
                }
                triggerRef={[Function]}
                wrapContent={false}
              >
                <Popover
                  className="css-0"
                  content={
                    <DropdownContent
                      data={
                        Array [
                          Object {
                            "text": "Alpha",
                            "value": "alpha",
                          },
                          Object {
                            "text": "Beta",
                            "value": "beta",
                          },
                          Object {
                            "text": "Gamma",
                            "value": "gamma",
                          },
                        ]
                      }
                      getItemProps={[Function]}
                      getMenuProps={[Function]}
                      id="select-96-content"
                      modifiers={
                        Object {
                          "contentWidth": Object {
                            "enabled": true,
                            "fn": [Function],
                          },
                        }
                      }
                      placement="bottom-start"
                      wide={undefined}
                    />
                  }
                  disabled={true}
                  focusTriggerOnClose={true}
                  getItemProps={[Function]}
                  getMenuProps={[Function]}
                  getTriggerProps={[Function]}
                  hasArrow={true}
                  id="select-96"
                  isOpen={false}
                  onClose={[Function]}
                  onOpen={[Function]}
                  placement="bottom"
                  selectedItem={
                    Object {
                      "text": "Alpha",
                      "value": "alpha",
                    }
                  }
                  tag="span"
                  triggerRef={[Function]}
                  wrapContent={false}
                >
                  <Manager
                    className="css-1"
                    id="select-96"
                    tag="span"
                  >
                    <span
                      className="css-1"
                      id="select-96"
                    >
                      <PopoverTrigger
                        aria-describedby="select-96-content"
                        aria-disabled={true}
                        aria-expanded={false}
                        aria-haspopup="listbox"
                        aria-owns="select-96-content"
                        aria-readonly={true}
                        onBlur={[Function]}
                        onKeyUp={[Function]}
                        role="button"
                        tabIndex={0}
                      >
                        <PopoverTrigger
                          component="span"
                        >
                          <Target
                            className="css-2"
                            component="span"
                          >
                            <span
                              className="css-2"
                            >
                              <SelectTrigger
                                aria-describedby="select-96-content"
                                aria-disabled={true}
                                aria-expanded={false}
                                aria-haspopup="listbox"
                                aria-owns="select-96-content"
                                aria-readonly={true}
                                isOpen={false}
                                item={
                                  Object {
                                    "text": "Alpha",
                                    "value": "alpha",
                                  }
                                }
                                onBlur={[Function]}
                                onKeyUp={[Function]}
                                placeholder="Select..."
                                readOnly={true}
                                role="button"
                                size="large"
                                tabIndex={0}
                                triggerRef={[Function]}
                              >
                                <SelectTrigger
                                  afterItems={
                                    Array [
                                      <IconArrowDropdownDown
                                        css={
                                          Object {
                                            "margin": "0.5em",
                                          }
                                        }
                                        size="1.5em"
                                      />,
                                      <input
                                        name={undefined}
                                        type="hidden"
                                        value="alpha"
                                      />,
                                    ]
                                  }
                                  aria-describedby="select-96-content"
                                  aria-disabled={true}
                                  aria-expanded={false}
                                  aria-haspopup="listbox"
                                  aria-owns="select-96-content"
                                  aria-readonly={true}
                                  control={[Function]}
                                  controlProps={
                                    Object {
                                      "hasPlaceholder": false,
                                      "variant": undefined,
                                    }
                                  }
                                  fauxControlRef={[Function]}
                                  item={
                                    Object {
                                      "text": "Alpha",
                                      "value": "alpha",
                                    }
                                  }
                                  onBlur={[Function]}
                                  onKeyUp={[Function]}
                                  readOnly={true}
                                  role="button"
                                  size="large"
                                  tabIndex={0}
                                >
                                  <FauxControl
                                    afterItems={
                                      Array [
                                        <IconArrowDropdownDown
                                          css={
                                            Object {
                                              "margin": "0.5em",
                                            }
                                          }
                                          size="1.5em"
                                        />,
                                        <input
                                          name={undefined}
                                          type="hidden"
                                          value="alpha"
                                        />,
                                      ]
                                    }
                                    aria-describedby="select-96-content"
                                    aria-disabled={true}
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-96-content"
                                    aria-readonly={true}
                                    className="css-5"
                                    control={[Function]}
                                    controlProps={
                                      Object {
                                        "hasPlaceholder": false,
                                        "variant": undefined,
                                      }
                                    }
                                    fauxControlRef={[Function]}
                                    item={
                                      Object {
                                        "text": "Alpha",
                                        "value": "alpha",
                                      }
                                    }
                                    onBlur={[Function]}
                                    onKeyUp={[Function]}
                                    readOnly={true}
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                  >
                                    <FauxControl
                                      aria-describedby="select-96-content"
                                      aria-disabled={true}
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-96-content"
                                      aria-readonly={true}
                                      className="css-5"
                                      control={[Function]}
                                      innerRef={[Function]}
                                      item={
                                        Object {
                                          "text": "Alpha",
                                          "value": "alpha",
                                        }
                                      }
                                      onBlur={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      tabIndex={0}
                                    >
                                      <div
                                        aria-describedby="select-96-content"
                                        aria-disabled={true}
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-96-content"
                                        aria-readonly={true}
                                        className="css-10"
                                        onBlur={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        <glamorous(Trigger)
                                          controlPropsIn={
                                            Object {
                                              "hasPlaceholder": false,
                                              "variant": undefined,
                                            }
                                          }
                                          hasPlaceholder={false}
                                          key="control"
                                          readOnly={true}
                                          size="large"
                                        >
                                          <div
                                            className="css-23"
                                            readOnly={true}
                                          >
                                            <TriggerContent>
                                              <span
                                                className="css-3"
                                              >
                                                Alpha
                                              </span>
                                            </TriggerContent>
                                          </div>
                                        </glamorous(Trigger)>
                                        <IconArrowDropdownDown
                                          css={
                                            Object {
                                              "margin": "0.5em",
                                            }
                                          }
                                          key="arrow"
                                          size="1.5em"
                                        >
                                          <Icon
                                            css={
                                              Object {
                                                "margin": "0.5em",
                                              }
                                            }
                                            rtl={false}
                                            size="1.5em"
                                          >
                                            <glamorous(svg)
                                              aria-hidden={true}
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              role="img"
                                              rtl={false}
                                              size="1.5em"
                                              viewBox="0 0 24 24"
                                            >
                                              <svg
                                                aria-hidden={true}
                                                className="css-4"
                                                role="img"
                                                viewBox="0 0 24 24"
                                              >
                                                <g>
                                                  <path
                                                    d="M12 17.5l-8-8h16z"
                                                  />
                                                </g>
                                              </svg>
                                            </glamorous(svg)>
                                          </Icon>
                                        </IconArrowDropdownDown>
                                        <input
                                          key="input"
                                          type="hidden"
                                          value="alpha"
                                        />
                                        <Underlay
                                          readOnly={true}
                                        >
                                          <div
                                            className="css-9"
                                            readOnly={true}
                                          />
                                        </Underlay>
                                      </div>
                                    </FauxControl>
                                  </FauxControl>
                                </SelectTrigger>
                              </SelectTrigger>
                            </span>
                          </Target>
                        </PopoverTrigger>
                      </PopoverTrigger>
                    </span>
                  </Manager>
                </Popover>
              </Popover>
            </Dropdown>
          </ThemeProvider>
        </ThemeProvider>
      </Themed(Dropdown)>
    </ThemedComponent>
  </Select>
</Select>
`;

exports[`Select demo examples required 1`] = `
.css-0,
[data-css-0] {
  width: 100%;
}

.css-0 > span,
[data-css-0] > span {
  width: 100%;
}

.css-1,
[data-css-1] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: inline-block;
  width: 100%;
}

.css-1 *,
[data-css-1] *,
.css-1 *::before,
[data-css-1] *::before,
.css-1 *::after,
[data-css-1] *::after {
  box-sizing: inherit;
}

.css-1 > span,
[data-css-1] > span {
  width: 100%;
}

.css-2,
[data-css-2] {
  display: inline-block;
}

.css-3,
[data-css-3] {
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-3 [role="img"],
[data-css-3] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-3 [role="img"]:first-child,
[data-css-3] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-3 :not([role="img"]) ~ [role="img"],
[data-css-3] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-3 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-3] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-7,
[data-css-7] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-7 *,
[data-css-7] *,
.css-7 *::before,
[data-css-7] *::before,
.css-7 *::after,
[data-css-7] *::after {
  box-sizing: inherit;
}

.css-7:hover > div:last-child,
[data-css-7]:hover > div:last-child,
.css-7[data-simulate-hover] > div:last-child,
[data-css-7][data-simulate-hover] > div:last-child {
  border-color: #2e6fd9;
}

.css-7:focus > div:last-child,
[data-css-7]:focus > div:last-child,
.css-7[data-simulate-focus] > div:last-child,
[data-css-7][data-simulate-focus] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7:active > div:last-child,
[data-css-7]:active > div:last-child,
.css-7[data-simulate-active] > div:last-child,
[data-css-7][data-simulate-active] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7 [role="img"],
[data-css-7] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-7 [role="img"]:first-child,
[data-css-7] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-7 :not([role="img"]) ~ [role="img"],
[data-css-7] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-7 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-7] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-20,
[data-css-20] {
  align-items: center;
  color: #8e99ab;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  font-style: italic;
  height: 2.857142857142857em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-20::placeholder,
[data-css-20]::placeholder,
.css-20[data-simulate-placeholder],
[data-css-20][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-input-placeholder,
[data-css-20]::-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20:-ms-input-placeholder,
[data-css-20]:-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-clear,
[data-css-20]::-ms-clear,
.css-20[data-simulate-msclear],
[data-css-20][data-simulate-msclear] {
  display: none;
}

.css-20:focus ~ div:last-child,
[data-css-20]:focus ~ div:last-child,
.css-20[data-simulate-focus] ~ div:last-child,
[data-css-20][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-34,
[data-css-34] {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  user-select: none;
  width: 100%;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.css-35,
[data-css-35] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.css-36,
[data-css-36] {
  background-color: #fff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

<Select
  data={
    Array [
      Object {
        "text": "Alpha",
        "value": "alpha",
      },
      Object {
        "text": "Beta",
        "value": "beta",
      },
      Object {
        "text": "Gamma",
        "value": "gamma",
      },
    ]
  }
  placeholder="Select..."
  placement="bottom-start"
  required={true}
  size="large"
>
  <Select
    data={
      Array [
        Object {
          "text": "Alpha",
          "value": "alpha",
        },
        Object {
          "text": "Beta",
          "value": "beta",
        },
        Object {
          "text": "Gamma",
          "value": "gamma",
        },
      ]
    }
    getItemProps={[Function]}
    getMenuProps={[Function]}
    getTriggerProps={[Function]}
    id="select-98"
    isOpen={false}
    modifiers={
      Object {
        "contentWidth": Object {
          "enabled": true,
          "fn": [Function],
        },
      }
    }
    onClose={[Function]}
    onOpen={[Function]}
    placement="bottom-start"
    required={true}
  >
    <ThemedComponent
      className="css-0"
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      getItemProps={[Function]}
      getMenuProps={[Function]}
      getTriggerProps={[Function]}
      id="select-98"
      isOpen={false}
      modifiers={
        Object {
          "contentWidth": Object {
            "enabled": true,
            "fn": [Function],
          },
        }
      }
      onClose={[Function]}
      onOpen={[Function]}
      placement="bottom-start"
      required={true}
    >
      <Themed(Dropdown)
        className="css-0"
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        getItemProps={[Function]}
        getMenuProps={[Function]}
        getTriggerProps={[Function]}
        id="select-98"
        isOpen={false}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placement="bottom-start"
        required={true}
      >
        <ThemeProvider>
          <ThemeProvider>
            <Dropdown
              className="css-0"
              data={
                Array [
                  Object {
                    "text": "Alpha",
                    "value": "alpha",
                  },
                  Object {
                    "text": "Beta",
                    "value": "beta",
                  },
                  Object {
                    "text": "Gamma",
                    "value": "gamma",
                  },
                ]
              }
              getItemProps={[Function]}
              getMenuProps={[Function]}
              getTriggerProps={[Function]}
              id="select-98"
              isOpen={false}
              modifiers={
                Object {
                  "contentWidth": Object {
                    "enabled": true,
                    "fn": [Function],
                  },
                }
              }
              onClose={[Function]}
              onOpen={[Function]}
              placement="bottom-start"
              required={true}
            >
              <Popover
                className="css-0"
                content={
                  <DropdownContent
                    data={
                      Array [
                        Object {
                          "text": "Alpha",
                          "value": "alpha",
                        },
                        Object {
                          "text": "Beta",
                          "value": "beta",
                        },
                        Object {
                          "text": "Gamma",
                          "value": "gamma",
                        },
                      ]
                    }
                    getItemProps={[Function]}
                    getMenuProps={[Function]}
                    id="select-98-content"
                    modifiers={
                      Object {
                        "contentWidth": Object {
                          "enabled": true,
                          "fn": [Function],
                        },
                      }
                    }
                    placement="bottom-start"
                    wide={undefined}
                  />
                }
                focusTriggerOnClose={true}
                getItemProps={[Function]}
                getMenuProps={[Function]}
                getTriggerProps={[Function]}
                hasArrow={true}
                id="select-98"
                isOpen={false}
                onClose={[Function]}
                onOpen={[Function]}
                placement="bottom"
                required={true}
                triggerRef={[Function]}
                wrapContent={false}
              >
                <Popover
                  className="css-0"
                  content={
                    <DropdownContent
                      data={
                        Array [
                          Object {
                            "text": "Alpha",
                            "value": "alpha",
                          },
                          Object {
                            "text": "Beta",
                            "value": "beta",
                          },
                          Object {
                            "text": "Gamma",
                            "value": "gamma",
                          },
                        ]
                      }
                      getItemProps={[Function]}
                      getMenuProps={[Function]}
                      id="select-98-content"
                      modifiers={
                        Object {
                          "contentWidth": Object {
                            "enabled": true,
                            "fn": [Function],
                          },
                        }
                      }
                      placement="bottom-start"
                      wide={undefined}
                    />
                  }
                  focusTriggerOnClose={true}
                  getItemProps={[Function]}
                  getMenuProps={[Function]}
                  getTriggerProps={[Function]}
                  hasArrow={true}
                  id="select-98"
                  isOpen={false}
                  onClose={[Function]}
                  onOpen={[Function]}
                  placement="bottom"
                  required={true}
                  tag="span"
                  triggerRef={[Function]}
                  wrapContent={false}
                >
                  <Manager
                    className="css-1"
                    id="select-98"
                    tag="span"
                  >
                    <span
                      className="css-1"
                      id="select-98"
                    >
                      <PopoverTrigger
                        aria-describedby="select-98-content"
                        aria-expanded={false}
                        aria-haspopup="listbox"
                        aria-owns="select-98-content"
                        aria-required={true}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        role="button"
                        tabIndex={0}
                      >
                        <PopoverTrigger
                          component="span"
                        >
                          <Target
                            className="css-2"
                            component="span"
                          >
                            <span
                              className="css-2"
                            >
                              <SelectTrigger
                                aria-describedby="select-98-content"
                                aria-expanded={false}
                                aria-haspopup="listbox"
                                aria-owns="select-98-content"
                                aria-required={true}
                                isOpen={false}
                                onBlur={[Function]}
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                placeholder="Select..."
                                role="button"
                                size="large"
                                tabIndex={0}
                                triggerRef={[Function]}
                              >
                                <SelectTrigger
                                  afterItems={
                                    Array [
                                      <IconArrowDropdownDown
                                        css={
                                          Object {
                                            "margin": "0.5em",
                                          }
                                        }
                                        size="1.5em"
                                      />,
                                      <input
                                        name={undefined}
                                        type="hidden"
                                        value=""
                                      />,
                                    ]
                                  }
                                  aria-describedby="select-98-content"
                                  aria-expanded={false}
                                  aria-haspopup="listbox"
                                  aria-owns="select-98-content"
                                  aria-required={true}
                                  control={[Function]}
                                  controlProps={
                                    Object {
                                      "hasPlaceholder": true,
                                      "variant": undefined,
                                    }
                                  }
                                  fauxControlRef={[Function]}
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  role="button"
                                  size="large"
                                  tabIndex={0}
                                >
                                  <FauxControl
                                    afterItems={
                                      Array [
                                        <IconArrowDropdownDown
                                          css={
                                            Object {
                                              "margin": "0.5em",
                                            }
                                          }
                                          size="1.5em"
                                        />,
                                        <input
                                          name={undefined}
                                          type="hidden"
                                          value=""
                                        />,
                                      ]
                                    }
                                    aria-describedby="select-98-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-98-content"
                                    aria-required={true}
                                    className="css-3"
                                    control={[Function]}
                                    controlProps={
                                      Object {
                                        "hasPlaceholder": true,
                                        "variant": undefined,
                                      }
                                    }
                                    fauxControlRef={[Function]}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                  >
                                    <FauxControl
                                      aria-describedby="select-98-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-98-content"
                                      aria-required={true}
                                      className="css-3"
                                      control={[Function]}
                                      innerRef={[Function]}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      tabIndex={0}
                                    >
                                      <div
                                        aria-describedby="select-98-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-98-content"
                                        aria-required={true}
                                        className="css-7"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        <glamorous(Trigger)
                                          controlPropsIn={
                                            Object {
                                              "hasPlaceholder": true,
                                              "variant": undefined,
                                            }
                                          }
                                          hasPlaceholder={true}
                                          key="control"
                                          size="large"
                                        >
                                          <div
                                            className="css-20"
                                          >
                                            <TriggerContent>
                                              <span
                                                className="css-34"
                                              >
                                                Select...
                                              </span>
                                            </TriggerContent>
                                          </div>
                                        </glamorous(Trigger)>
                                        <IconArrowDropdownDown
                                          css={
                                            Object {
                                              "margin": "0.5em",
                                            }
                                          }
                                          key="arrow"
                                          size="1.5em"
                                        >
                                          <Icon
                                            css={
                                              Object {
                                                "margin": "0.5em",
                                              }
                                            }
                                            rtl={false}
                                            size="1.5em"
                                          >
                                            <glamorous(svg)
                                              aria-hidden={true}
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              role="img"
                                              rtl={false}
                                              size="1.5em"
                                              viewBox="0 0 24 24"
                                            >
                                              <svg
                                                aria-hidden={true}
                                                className="css-35"
                                                role="img"
                                                viewBox="0 0 24 24"
                                              >
                                                <g>
                                                  <path
                                                    d="M12 17.5l-8-8h16z"
                                                  />
                                                </g>
                                              </svg>
                                            </glamorous(svg)>
                                          </Icon>
                                        </IconArrowDropdownDown>
                                        <input
                                          key="input"
                                          type="hidden"
                                          value=""
                                        />
                                        <Underlay>
                                          <div
                                            className="css-36"
                                          />
                                        </Underlay>
                                      </div>
                                    </FauxControl>
                                  </FauxControl>
                                </SelectTrigger>
                              </SelectTrigger>
                            </span>
                          </Target>
                        </PopoverTrigger>
                      </PopoverTrigger>
                    </span>
                  </Manager>
                </Popover>
              </Popover>
            </Dropdown>
          </ThemeProvider>
        </ThemeProvider>
      </Themed(Dropdown)>
    </ThemedComponent>
  </Select>
</Select>
`;

exports[`Select demo examples rtl 1`] = `
.css-0,
[data-css-0] {
  width: 100%;
}

.css-0 > span,
[data-css-0] > span {
  width: 100%;
}

.css-1,
[data-css-1] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: inline-block;
  width: 100%;
}

.css-1 *,
[data-css-1] *,
.css-1 *::before,
[data-css-1] *::before,
.css-1 *::after,
[data-css-1] *::after {
  box-sizing: inherit;
}

.css-1 > span,
[data-css-1] > span {
  width: 100%;
}

.css-2,
[data-css-2] {
  display: inline-block;
}

.css-3,
[data-css-3] {
  align-items: center;
  color: #8e99ab;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  font-style: italic;
  height: 2.857142857142857em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-3::placeholder,
[data-css-3]::placeholder,
.css-3[data-simulate-placeholder],
[data-css-3][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-3::-ms-input-placeholder,
[data-css-3]::-ms-input-placeholder,
.css-3[data-simulate-msinputplaceholder],
[data-css-3][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-3:-ms-input-placeholder,
[data-css-3]:-ms-input-placeholder,
.css-3[data-simulate-msinputplaceholder],
[data-css-3][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-3::-ms-clear,
[data-css-3]::-ms-clear,
.css-3[data-simulate-msclear],
[data-css-3][data-simulate-msclear] {
  display: none;
}

.css-3:focus ~ div:last-child,
[data-css-3]:focus ~ div:last-child,
.css-3[data-simulate-focus] ~ div:last-child,
[data-css-3][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-17,
[data-css-17] {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  user-select: none;
  width: 100%;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.css-18,
[data-css-18] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.css-19,
[data-css-19] {
  background-color: #fff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.css-20,
[data-css-20] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
}

.css-21,
[data-css-21] {
  background-color: #fff;
  border-color: #10a35a;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.css-22,
[data-css-22] {
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-22 [role="img"],
[data-css-22] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-22 [role="img"]:first-child,
[data-css-22] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-22 :not([role="img"]) ~ [role="img"],
[data-css-22] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-22 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-22] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-right: 0.5em;
}

.css-26,
[data-css-26] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-26 *,
[data-css-26] *,
.css-26 *::before,
[data-css-26] *::before,
.css-26 *::after,
[data-css-26] *::after {
  box-sizing: inherit;
}

.css-26:hover > div:last-child,
[data-css-26]:hover > div:last-child,
.css-26[data-simulate-hover] > div:last-child,
[data-css-26][data-simulate-hover] > div:last-child {
  border-color: #2e6fd9;
}

.css-26:focus > div:last-child,
[data-css-26]:focus > div:last-child,
.css-26[data-simulate-focus] > div:last-child,
[data-css-26][data-simulate-focus] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-26:active > div:last-child,
[data-css-26]:active > div:last-child,
.css-26[data-simulate-active] > div:last-child,
[data-css-26][data-simulate-active] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-26 [role="img"],
[data-css-26] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-26 [role="img"]:first-child,
[data-css-26] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-26 :not([role="img"]) ~ [role="img"],
[data-css-26] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-26 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-26] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-right: 0.5em;
}

.css-39,
[data-css-39] {
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-39 [role="img"],
[data-css-39] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-39 [role="img"]:first-child,
[data-css-39] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-39 :not([role="img"]) ~ [role="img"],
[data-css-39] :not([role="img"]) ~ [role="img"] {
  fill: #06783f;
}

.css-39 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-39] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #06783f;
  margin-right: 0.5em;
}

.css-43,
[data-css-43] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-43 *,
[data-css-43] *,
.css-43 *::before,
[data-css-43] *::before,
.css-43 *::after,
[data-css-43] *::after {
  box-sizing: inherit;
}

.css-43:hover > div:last-child,
[data-css-43]:hover > div:last-child,
.css-43[data-simulate-hover] > div:last-child,
[data-css-43][data-simulate-hover] > div:last-child {
  border-color: #0a8f4c;
}

.css-43:focus > div:last-child,
[data-css-43]:focus > div:last-child,
.css-43[data-simulate-focus] > div:last-child,
[data-css-43][data-simulate-focus] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #10a35a;
}

.css-43:active > div:last-child,
[data-css-43]:active > div:last-child,
.css-43[data-simulate-active] > div:last-child,
[data-css-43][data-simulate-active] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #10a35a;
}

.css-43 [role="img"],
[data-css-43] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-43 [role="img"]:first-child,
[data-css-43] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-43 :not([role="img"]) ~ [role="img"],
[data-css-43] :not([role="img"]) ~ [role="img"] {
  fill: #06783f;
}

.css-43 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-43] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #06783f;
  margin-right: 0.5em;
}

.css-56,
[data-css-56] {
  align-items: center;
  color: #8e99ab;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  font-style: italic;
  height: 2.857142857142857em;
  outline: 0;
  padding-left: 0;
  padding-right: 1.1428571428571428em;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-56::placeholder,
[data-css-56]::placeholder,
.css-56[data-simulate-placeholder],
[data-css-56][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-56::-ms-input-placeholder,
[data-css-56]::-ms-input-placeholder,
.css-56[data-simulate-msinputplaceholder],
[data-css-56][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-56:-ms-input-placeholder,
[data-css-56]:-ms-input-placeholder,
.css-56[data-simulate-msinputplaceholder],
[data-css-56][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-56::-ms-clear,
[data-css-56]::-ms-clear,
.css-56[data-simulate-msclear],
[data-css-56][data-simulate-msclear] {
  display: none;
}

.css-56:focus ~ div:last-child,
[data-css-56]:focus ~ div:last-child,
.css-56[data-simulate-focus] ~ div:last-child,
[data-css-56][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #10a35a;
}

<div
  dir="rtl"
>
  <ThemeProvider>
    <ThemeProvider>
      <glamorous(div)>
        <div
          className="css-1p1xtzc"
        >
          <Select
            data={
              Array [
                Object {
                  "text": "ألفا",
                  "value": "alpha",
                },
                Object {
                  "text": "بيتا",
                  "value": "beta",
                },
                Object {
                  "text": "غاما",
                  "value": "gamma",
                },
              ]
            }
            placeholder="تحديد..."
            placement="bottom-start"
            size="large"
          >
            <Select
              data={
                Array [
                  Object {
                    "text": "ألفا",
                    "value": "alpha",
                  },
                  Object {
                    "text": "بيتا",
                    "value": "beta",
                  },
                  Object {
                    "text": "غاما",
                    "value": "gamma",
                  },
                ]
              }
              getItemProps={[Function]}
              getMenuProps={[Function]}
              getTriggerProps={[Function]}
              id="select-129"
              isOpen={false}
              modifiers={
                Object {
                  "contentWidth": Object {
                    "enabled": true,
                    "fn": [Function],
                  },
                }
              }
              onClose={[Function]}
              onOpen={[Function]}
              placement="bottom-start"
            >
              <ThemedComponent
                className="css-0"
                data={
                  Array [
                    Object {
                      "text": "ألفا",
                      "value": "alpha",
                    },
                    Object {
                      "text": "بيتا",
                      "value": "beta",
                    },
                    Object {
                      "text": "غاما",
                      "value": "gamma",
                    },
                  ]
                }
                getItemProps={[Function]}
                getMenuProps={[Function]}
                getTriggerProps={[Function]}
                id="select-129"
                isOpen={false}
                modifiers={
                  Object {
                    "contentWidth": Object {
                      "enabled": true,
                      "fn": [Function],
                    },
                  }
                }
                onClose={[Function]}
                onOpen={[Function]}
                placement="bottom-start"
              >
                <Themed(Dropdown)
                  className="css-0"
                  data={
                    Array [
                      Object {
                        "text": "ألفا",
                        "value": "alpha",
                      },
                      Object {
                        "text": "بيتا",
                        "value": "beta",
                      },
                      Object {
                        "text": "غاما",
                        "value": "gamma",
                      },
                    ]
                  }
                  getItemProps={[Function]}
                  getMenuProps={[Function]}
                  getTriggerProps={[Function]}
                  id="select-129"
                  isOpen={false}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placement="bottom-start"
                >
                  <ThemeProvider>
                    <ThemeProvider>
                      <Dropdown
                        className="css-0"
                        data={
                          Array [
                            Object {
                              "text": "ألفا",
                              "value": "alpha",
                            },
                            Object {
                              "text": "بيتا",
                              "value": "beta",
                            },
                            Object {
                              "text": "غاما",
                              "value": "gamma",
                            },
                          ]
                        }
                        getItemProps={[Function]}
                        getMenuProps={[Function]}
                        getTriggerProps={[Function]}
                        id="select-129"
                        isOpen={false}
                        modifiers={
                          Object {
                            "contentWidth": Object {
                              "enabled": true,
                              "fn": [Function],
                            },
                          }
                        }
                        onClose={[Function]}
                        onOpen={[Function]}
                        placement="bottom-start"
                      >
                        <Popover
                          className="css-0"
                          content={
                            <DropdownContent
                              data={
                                Array [
                                  Object {
                                    "text": "ألفا",
                                    "value": "alpha",
                                  },
                                  Object {
                                    "text": "بيتا",
                                    "value": "beta",
                                  },
                                  Object {
                                    "text": "غاما",
                                    "value": "gamma",
                                  },
                                ]
                              }
                              getItemProps={[Function]}
                              getMenuProps={[Function]}
                              id="select-129-content"
                              modifiers={
                                Object {
                                  "contentWidth": Object {
                                    "enabled": true,
                                    "fn": [Function],
                                  },
                                }
                              }
                              placement="bottom-start"
                              wide={undefined}
                            />
                          }
                          focusTriggerOnClose={true}
                          getItemProps={[Function]}
                          getMenuProps={[Function]}
                          getTriggerProps={[Function]}
                          hasArrow={true}
                          id="select-129"
                          isOpen={false}
                          onClose={[Function]}
                          onOpen={[Function]}
                          placement="bottom"
                          triggerRef={[Function]}
                          wrapContent={false}
                        >
                          <Popover
                            className="css-0"
                            content={
                              <DropdownContent
                                data={
                                  Array [
                                    Object {
                                      "text": "ألفا",
                                      "value": "alpha",
                                    },
                                    Object {
                                      "text": "بيتا",
                                      "value": "beta",
                                    },
                                    Object {
                                      "text": "غاما",
                                      "value": "gamma",
                                    },
                                  ]
                                }
                                getItemProps={[Function]}
                                getMenuProps={[Function]}
                                id="select-129-content"
                                modifiers={
                                  Object {
                                    "contentWidth": Object {
                                      "enabled": true,
                                      "fn": [Function],
                                    },
                                  }
                                }
                                placement="bottom-start"
                                wide={undefined}
                              />
                            }
                            focusTriggerOnClose={true}
                            getItemProps={[Function]}
                            getMenuProps={[Function]}
                            getTriggerProps={[Function]}
                            hasArrow={true}
                            id="select-129"
                            isOpen={false}
                            onClose={[Function]}
                            onOpen={[Function]}
                            placement="bottom"
                            tag="span"
                            triggerRef={[Function]}
                            wrapContent={false}
                          >
                            <Manager
                              className="css-1"
                              id="select-129"
                              tag="span"
                            >
                              <span
                                className="css-1"
                                id="select-129"
                              >
                                <PopoverTrigger
                                  aria-describedby="select-129-content"
                                  aria-expanded={false}
                                  aria-haspopup="listbox"
                                  aria-owns="select-129-content"
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  role="button"
                                  tabIndex={0}
                                >
                                  <PopoverTrigger
                                    component="span"
                                  >
                                    <Target
                                      className="css-2"
                                      component="span"
                                    >
                                      <span
                                        className="css-2"
                                      >
                                        <SelectTrigger
                                          aria-describedby="select-129-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-129-content"
                                          isOpen={false}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          placeholder="تحديد..."
                                          role="button"
                                          size="large"
                                          tabIndex={0}
                                          triggerRef={[Function]}
                                        >
                                          <SelectTrigger
                                            afterItems={
                                              Array [
                                                <IconArrowDropdownDown
                                                  css={
                                                    Object {
                                                      "margin": "0.5em",
                                                    }
                                                  }
                                                  size="1.5em"
                                                />,
                                                <input
                                                  name={undefined}
                                                  type="hidden"
                                                  value=""
                                                />,
                                              ]
                                            }
                                            aria-describedby="select-129-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-129-content"
                                            control={[Function]}
                                            controlProps={
                                              Object {
                                                "hasPlaceholder": true,
                                                "variant": undefined,
                                              }
                                            }
                                            fauxControlRef={[Function]}
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            size="large"
                                            tabIndex={0}
                                          >
                                            <FauxControl
                                              afterItems={
                                                Array [
                                                  <IconArrowDropdownDown
                                                    css={
                                                      Object {
                                                        "margin": "0.5em",
                                                      }
                                                    }
                                                    size="1.5em"
                                                  />,
                                                  <input
                                                    name={undefined}
                                                    type="hidden"
                                                    value=""
                                                  />,
                                                ]
                                              }
                                              aria-describedby="select-129-content"
                                              aria-expanded={false}
                                              aria-haspopup="listbox"
                                              aria-owns="select-129-content"
                                              className="css-22"
                                              control={[Function]}
                                              controlProps={
                                                Object {
                                                  "hasPlaceholder": true,
                                                  "variant": undefined,
                                                }
                                              }
                                              fauxControlRef={[Function]}
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onKeyDown={[Function]}
                                              onKeyUp={[Function]}
                                              role="button"
                                              size="large"
                                              tabIndex={0}
                                            >
                                              <FauxControl
                                                aria-describedby="select-129-content"
                                                aria-expanded={false}
                                                aria-haspopup="listbox"
                                                aria-owns="select-129-content"
                                                className="css-22"
                                                control={[Function]}
                                                innerRef={[Function]}
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                role="button"
                                                tabIndex={0}
                                              >
                                                <div
                                                  aria-describedby="select-129-content"
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-129-content"
                                                  className="css-26"
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <glamorous(Trigger)
                                                    controlPropsIn={
                                                      Object {
                                                        "hasPlaceholder": true,
                                                        "variant": undefined,
                                                      }
                                                    }
                                                    hasPlaceholder={true}
                                                    key="control"
                                                    size="large"
                                                  >
                                                    <div
                                                      className="css-3"
                                                    >
                                                      <TriggerContent>
                                                        <span
                                                          className="css-17"
                                                        >
                                                          تحديد...
                                                        </span>
                                                      </TriggerContent>
                                                    </div>
                                                  </glamorous(Trigger)>
                                                  <IconArrowDropdownDown
                                                    css={
                                                      Object {
                                                        "margin": "0.5em",
                                                      }
                                                    }
                                                    key="arrow"
                                                    size="1.5em"
                                                  >
                                                    <Icon
                                                      css={
                                                        Object {
                                                          "margin": "0.5em",
                                                        }
                                                      }
                                                      rtl={false}
                                                      size="1.5em"
                                                    >
                                                      <glamorous(svg)
                                                        aria-hidden={true}
                                                        css={
                                                          Object {
                                                            "margin": "0.5em",
                                                          }
                                                        }
                                                        role="img"
                                                        rtl={false}
                                                        size="1.5em"
                                                        viewBox="0 0 24 24"
                                                      >
                                                        <svg
                                                          aria-hidden={true}
                                                          className="css-18"
                                                          role="img"
                                                          viewBox="0 0 24 24"
                                                        >
                                                          <g>
                                                            <path
                                                              d="M12 17.5l-8-8h16z"
                                                            />
                                                          </g>
                                                        </svg>
                                                      </glamorous(svg)>
                                                    </Icon>
                                                  </IconArrowDropdownDown>
                                                  <input
                                                    key="input"
                                                    type="hidden"
                                                    value=""
                                                  />
                                                  <Underlay>
                                                    <div
                                                      className="css-19"
                                                    />
                                                  </Underlay>
                                                </div>
                                              </FauxControl>
                                            </FauxControl>
                                          </SelectTrigger>
                                        </SelectTrigger>
                                      </span>
                                    </Target>
                                  </PopoverTrigger>
                                </PopoverTrigger>
                              </span>
                            </Manager>
                          </Popover>
                        </Popover>
                      </Dropdown>
                    </ThemeProvider>
                  </ThemeProvider>
                </Themed(Dropdown)>
              </ThemedComponent>
            </Select>
          </Select>
          <Select
            data={
              Array [
                Object {
                  "text": "ألفا",
                  "value": "alpha",
                },
                Object {
                  "text": "بيتا",
                  "value": "beta",
                },
                Object {
                  "text": "غاما",
                  "value": "gamma",
                },
              ]
            }
            placeholder="تحديد..."
            placement="bottom-start"
            size="large"
            variant="success"
          >
            <Select
              data={
                Array [
                  Object {
                    "text": "ألفا",
                    "value": "alpha",
                  },
                  Object {
                    "text": "بيتا",
                    "value": "beta",
                  },
                  Object {
                    "text": "غاما",
                    "value": "gamma",
                  },
                ]
              }
              getItemProps={[Function]}
              getMenuProps={[Function]}
              getTriggerProps={[Function]}
              id="select-131"
              isOpen={false}
              modifiers={
                Object {
                  "contentWidth": Object {
                    "enabled": true,
                    "fn": [Function],
                  },
                }
              }
              onClose={[Function]}
              onOpen={[Function]}
              placement="bottom-start"
            >
              <ThemedComponent
                className="css-0"
                data={
                  Array [
                    Object {
                      "text": "ألفا",
                      "value": "alpha",
                    },
                    Object {
                      "text": "بيتا",
                      "value": "beta",
                    },
                    Object {
                      "text": "غاما",
                      "value": "gamma",
                    },
                  ]
                }
                getItemProps={[Function]}
                getMenuProps={[Function]}
                getTriggerProps={[Function]}
                id="select-131"
                isOpen={false}
                modifiers={
                  Object {
                    "contentWidth": Object {
                      "enabled": true,
                      "fn": [Function],
                    },
                  }
                }
                onClose={[Function]}
                onOpen={[Function]}
                placement="bottom-start"
              >
                <Themed(Dropdown)
                  className="css-0"
                  data={
                    Array [
                      Object {
                        "text": "ألفا",
                        "value": "alpha",
                      },
                      Object {
                        "text": "بيتا",
                        "value": "beta",
                      },
                      Object {
                        "text": "غاما",
                        "value": "gamma",
                      },
                    ]
                  }
                  getItemProps={[Function]}
                  getMenuProps={[Function]}
                  getTriggerProps={[Function]}
                  id="select-131"
                  isOpen={false}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placement="bottom-start"
                >
                  <ThemeProvider>
                    <ThemeProvider>
                      <Dropdown
                        className="css-0"
                        data={
                          Array [
                            Object {
                              "text": "ألفا",
                              "value": "alpha",
                            },
                            Object {
                              "text": "بيتا",
                              "value": "beta",
                            },
                            Object {
                              "text": "غاما",
                              "value": "gamma",
                            },
                          ]
                        }
                        getItemProps={[Function]}
                        getMenuProps={[Function]}
                        getTriggerProps={[Function]}
                        id="select-131"
                        isOpen={false}
                        modifiers={
                          Object {
                            "contentWidth": Object {
                              "enabled": true,
                              "fn": [Function],
                            },
                          }
                        }
                        onClose={[Function]}
                        onOpen={[Function]}
                        placement="bottom-start"
                      >
                        <Popover
                          className="css-0"
                          content={
                            <DropdownContent
                              data={
                                Array [
                                  Object {
                                    "text": "ألفا",
                                    "value": "alpha",
                                  },
                                  Object {
                                    "text": "بيتا",
                                    "value": "beta",
                                  },
                                  Object {
                                    "text": "غاما",
                                    "value": "gamma",
                                  },
                                ]
                              }
                              getItemProps={[Function]}
                              getMenuProps={[Function]}
                              id="select-131-content"
                              modifiers={
                                Object {
                                  "contentWidth": Object {
                                    "enabled": true,
                                    "fn": [Function],
                                  },
                                }
                              }
                              placement="bottom-start"
                              wide={undefined}
                            />
                          }
                          focusTriggerOnClose={true}
                          getItemProps={[Function]}
                          getMenuProps={[Function]}
                          getTriggerProps={[Function]}
                          hasArrow={true}
                          id="select-131"
                          isOpen={false}
                          onClose={[Function]}
                          onOpen={[Function]}
                          placement="bottom"
                          triggerRef={[Function]}
                          wrapContent={false}
                        >
                          <Popover
                            className="css-0"
                            content={
                              <DropdownContent
                                data={
                                  Array [
                                    Object {
                                      "text": "ألفا",
                                      "value": "alpha",
                                    },
                                    Object {
                                      "text": "بيتا",
                                      "value": "beta",
                                    },
                                    Object {
                                      "text": "غاما",
                                      "value": "gamma",
                                    },
                                  ]
                                }
                                getItemProps={[Function]}
                                getMenuProps={[Function]}
                                id="select-131-content"
                                modifiers={
                                  Object {
                                    "contentWidth": Object {
                                      "enabled": true,
                                      "fn": [Function],
                                    },
                                  }
                                }
                                placement="bottom-start"
                                wide={undefined}
                              />
                            }
                            focusTriggerOnClose={true}
                            getItemProps={[Function]}
                            getMenuProps={[Function]}
                            getTriggerProps={[Function]}
                            hasArrow={true}
                            id="select-131"
                            isOpen={false}
                            onClose={[Function]}
                            onOpen={[Function]}
                            placement="bottom"
                            tag="span"
                            triggerRef={[Function]}
                            wrapContent={false}
                          >
                            <Manager
                              className="css-1"
                              id="select-131"
                              tag="span"
                            >
                              <span
                                className="css-1"
                                id="select-131"
                              >
                                <PopoverTrigger
                                  aria-describedby="select-131-content"
                                  aria-expanded={false}
                                  aria-haspopup="listbox"
                                  aria-owns="select-131-content"
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  role="button"
                                  tabIndex={0}
                                >
                                  <PopoverTrigger
                                    component="span"
                                  >
                                    <Target
                                      className="css-2"
                                      component="span"
                                    >
                                      <span
                                        className="css-2"
                                      >
                                        <SelectTrigger
                                          aria-describedby="select-131-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-131-content"
                                          isOpen={false}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          placeholder="تحديد..."
                                          role="button"
                                          size="large"
                                          tabIndex={0}
                                          triggerRef={[Function]}
                                          variant="success"
                                        >
                                          <SelectTrigger
                                            afterItems={
                                              Array [
                                                <IconArrowDropdownDown
                                                  css={
                                                    Object {
                                                      "margin": "0.5em",
                                                    }
                                                  }
                                                  size="1.5em"
                                                />,
                                                <input
                                                  name={undefined}
                                                  type="hidden"
                                                  value=""
                                                />,
                                              ]
                                            }
                                            aria-describedby="select-131-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-131-content"
                                            control={[Function]}
                                            controlProps={
                                              Object {
                                                "hasPlaceholder": true,
                                                "variant": undefined,
                                              }
                                            }
                                            fauxControlRef={[Function]}
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            size="large"
                                            tabIndex={0}
                                            variant="success"
                                          >
                                            <FauxControl
                                              afterItems={
                                                Array [
                                                  <IconArrowDropdownDown
                                                    css={
                                                      Object {
                                                        "margin": "0.5em",
                                                      }
                                                    }
                                                    size="1.5em"
                                                  />,
                                                  <input
                                                    name={undefined}
                                                    type="hidden"
                                                    value=""
                                                  />,
                                                ]
                                              }
                                              aria-describedby="select-131-content"
                                              aria-expanded={false}
                                              aria-haspopup="listbox"
                                              aria-owns="select-131-content"
                                              className="css-39"
                                              control={[Function]}
                                              controlProps={
                                                Object {
                                                  "hasPlaceholder": true,
                                                  "variant": undefined,
                                                }
                                              }
                                              fauxControlRef={[Function]}
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onKeyDown={[Function]}
                                              onKeyUp={[Function]}
                                              role="button"
                                              size="large"
                                              tabIndex={0}
                                              variant="success"
                                            >
                                              <FauxControl
                                                aria-describedby="select-131-content"
                                                aria-expanded={false}
                                                aria-haspopup="listbox"
                                                aria-owns="select-131-content"
                                                className="css-39"
                                                control={[Function]}
                                                innerRef={[Function]}
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                role="button"
                                                tabIndex={0}
                                                variant="success"
                                              >
                                                <div
                                                  aria-describedby="select-131-content"
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-131-content"
                                                  className="css-43"
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <glamorous(Trigger)
                                                    controlPropsIn={
                                                      Object {
                                                        "hasPlaceholder": true,
                                                        "variant": undefined,
                                                      }
                                                    }
                                                    hasPlaceholder={true}
                                                    key="control"
                                                    size="large"
                                                    variant="success"
                                                  >
                                                    <div
                                                      className="css-56"
                                                    >
                                                      <TriggerContent>
                                                        <span
                                                          className="css-17"
                                                        >
                                                          تحديد...
                                                        </span>
                                                      </TriggerContent>
                                                    </div>
                                                  </glamorous(Trigger)>
                                                  <IconSuccess
                                                    key="iconEnd"
                                                    size="1.5em"
                                                  >
                                                    <Icon
                                                      rtl={false}
                                                      size="1.5em"
                                                    >
                                                      <glamorous(svg)
                                                        aria-hidden={true}
                                                        role="img"
                                                        rtl={false}
                                                        size="1.5em"
                                                        viewBox="0 0 24 24"
                                                      >
                                                        <svg
                                                          aria-hidden={true}
                                                          className="css-20"
                                                          role="img"
                                                          viewBox="0 0 24 24"
                                                        >
                                                          <g>
                                                            <path
                                                              d="M12 3c4.968 0 9 4.032 9 9s-4.032 9-9 9-9-4.032-9-9 4.032-9 9-9zm-4.247 8.445L6.5 12.698l3.838 3.838 7.198-7.198-1.253-1.254-5.945 5.945-2.585-2.585z"
                                                            />
                                                          </g>
                                                        </svg>
                                                      </glamorous(svg)>
                                                    </Icon>
                                                  </IconSuccess>
                                                  <IconArrowDropdownDown
                                                    css={
                                                      Object {
                                                        "margin": "0.5em",
                                                      }
                                                    }
                                                    key="arrow"
                                                    size="1.5em"
                                                  >
                                                    <Icon
                                                      css={
                                                        Object {
                                                          "margin": "0.5em",
                                                        }
                                                      }
                                                      rtl={false}
                                                      size="1.5em"
                                                    >
                                                      <glamorous(svg)
                                                        aria-hidden={true}
                                                        css={
                                                          Object {
                                                            "margin": "0.5em",
                                                          }
                                                        }
                                                        role="img"
                                                        rtl={false}
                                                        size="1.5em"
                                                        viewBox="0 0 24 24"
                                                      >
                                                        <svg
                                                          aria-hidden={true}
                                                          className="css-18"
                                                          role="img"
                                                          viewBox="0 0 24 24"
                                                        >
                                                          <g>
                                                            <path
                                                              d="M12 17.5l-8-8h16z"
                                                            />
                                                          </g>
                                                        </svg>
                                                      </glamorous(svg)>
                                                    </Icon>
                                                  </IconArrowDropdownDown>
                                                  <input
                                                    key="input"
                                                    type="hidden"
                                                    value=""
                                                  />
                                                  <Underlay
                                                    variant="success"
                                                  >
                                                    <div
                                                      className="css-21"
                                                    />
                                                  </Underlay>
                                                </div>
                                              </FauxControl>
                                            </FauxControl>
                                          </SelectTrigger>
                                        </SelectTrigger>
                                      </span>
                                    </Target>
                                  </PopoverTrigger>
                                </PopoverTrigger>
                              </span>
                            </Manager>
                          </Popover>
                        </Popover>
                      </Dropdown>
                    </ThemeProvider>
                  </ThemeProvider>
                </Themed(Dropdown)>
              </ThemedComponent>
            </Select>
          </Select>
        </div>
      </glamorous(div)>
    </ThemeProvider>
  </ThemeProvider>
</div>
`;

exports[`Select demo examples scrolling-container 1`] = `
.css-0,
[data-css-0] {
  width: 100%;
}

.css-0 > span,
[data-css-0] > span {
  width: 100%;
}

.css-1,
[data-css-1] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: inline-block;
  width: 100%;
}

.css-1 *,
[data-css-1] *,
.css-1 *::before,
[data-css-1] *::before,
.css-1 *::after,
[data-css-1] *::after {
  box-sizing: inherit;
}

.css-1 > span,
[data-css-1] > span {
  width: 100%;
}

.css-2,
[data-css-2] {
  display: inline-block;
}

.css-3,
[data-css-3] {
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-3 [role="img"],
[data-css-3] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-3 [role="img"]:first-child,
[data-css-3] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-3 :not([role="img"]) ~ [role="img"],
[data-css-3] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-3 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-3] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-7,
[data-css-7] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-7 *,
[data-css-7] *,
.css-7 *::before,
[data-css-7] *::before,
.css-7 *::after,
[data-css-7] *::after {
  box-sizing: inherit;
}

.css-7:hover > div:last-child,
[data-css-7]:hover > div:last-child,
.css-7[data-simulate-hover] > div:last-child,
[data-css-7][data-simulate-hover] > div:last-child {
  border-color: #2e6fd9;
}

.css-7:focus > div:last-child,
[data-css-7]:focus > div:last-child,
.css-7[data-simulate-focus] > div:last-child,
[data-css-7][data-simulate-focus] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7:active > div:last-child,
[data-css-7]:active > div:last-child,
.css-7[data-simulate-active] > div:last-child,
[data-css-7][data-simulate-active] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7 [role="img"],
[data-css-7] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-7 [role="img"]:first-child,
[data-css-7] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-7 :not([role="img"]) ~ [role="img"],
[data-css-7] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-7 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-7] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-20,
[data-css-20] {
  align-items: center;
  color: #8e99ab;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  font-style: italic;
  height: 2.857142857142857em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-20::placeholder,
[data-css-20]::placeholder,
.css-20[data-simulate-placeholder],
[data-css-20][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-input-placeholder,
[data-css-20]::-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20:-ms-input-placeholder,
[data-css-20]:-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-clear,
[data-css-20]::-ms-clear,
.css-20[data-simulate-msclear],
[data-css-20][data-simulate-msclear] {
  display: none;
}

.css-20:focus ~ div:last-child,
[data-css-20]:focus ~ div:last-child,
.css-20[data-simulate-focus] ~ div:last-child,
[data-css-20][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-34,
[data-css-34] {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  user-select: none;
  width: 100%;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.css-35,
[data-css-35] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.css-36,
[data-css-36] {
  background-color: #fff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.css-37,
[data-css-37] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #fff;
  border: 1px solid #ebeff5;
  border-radius: 0.1875em;
  box-shadow: 0 2px 4px 0 rgba(0,0,0,0.2), 0 4px 8px 0 rgba(0,0,0,0.2);
  max-height: 23em;
  overflow-y: auto;
  user-select: none;
  width: 14em;
  z-index: 100;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.css-37 *,
[data-css-37] *,
.css-37 *::before,
[data-css-37] *::before,
.css-37 *::after,
[data-css-37] *::after {
  box-sizing: inherit;
}

.css-38,
[data-css-38] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
}

.css-38 *,
[data-css-38] *,
.css-38 *::before,
[data-css-38] *::before,
.css-38 *::after,
[data-css-38] *::after {
  box-sizing: inherit;
}

.css-39,
[data-css-39] {
  margin: 0.5em 0;
}

.css-39:first-child,
[data-css-39]:first-child,
.css-39 + .css-39,
[data-css-39] + [data-css-39] {
  margin-top: 0;
}

.css-39:last-child,
[data-css-39]:last-child,
.css-39[data-simulate-lastchild],
[data-css-39][data-simulate-lastchild] {
  margin-bottom: 0;
}

.css-45,
[data-css-45] {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  justify-content: space-between;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
}

.css-46,
[data-css-46] {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  flex-wrap: wrap;
  font-size: 0.875em;
  justify-content: space-between;
  padding: 0.21428571428571427em 0 0.2857142857142857em;
  white-space: normal;
  word-break: break-all;
  -webkit-flex: 1 1 auto;
  -webkit-box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
}

.css-47,
[data-css-47] {
  margin-right: 0.5714285714285714em;
  word-break: break-word;
}

.css-48,
[data-css-48] {
  color: #58606e;
  font-size: 0.75em;
  padding-top: 0.25em;
  word-break: break-word;
}

.css-49,
[data-css-49] {
  color: #333840;
  cursor: pointer;
  font-weight: 400;
  padding: 0.5em 1em;
}

.css-49:focus,
[data-css-49]:focus,
.css-49[data-simulate-focus],
[data-css-49][data-simulate-focus] {
  background-color: #f5f7fa;
  outline: 0;
}

.css-49:hover,
[data-css-49]:hover,
.css-49[data-simulate-hover],
[data-css-49][data-simulate-hover] {
  background-color: #f5f7fa;
}

.css-49:active,
[data-css-49]:active,
.css-49[data-simulate-active],
[data-css-49][data-simulate-active] {
  background-color: #ebeff5;
}

.css-49 [role="img"],
[data-css-49] [role="img"] {
  box-sizing: content-box;
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-49 [role="img"]:first-child,
[data-css-49] [role="img"]:first-child {
  margin-right: 0.5em;
}

.css-49 [role="img"]:last-child,
[data-css-49] [role="img"]:last-child {
  margin-left: 0.5em;
}

.css-60,
[data-css-60] {
  position: relative;
}

.css-61,
[data-css-61] {
  background-color: aliceblue;
  height: 360px;
  overflow: auto;
  position: relative;
}

.css-62,
[data-css-62] {
  height: 860px;
  width: 300vw;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  align-items: center;
  justify-content: center;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
}

.css-63,
[data-css-63] {
  left: 0;
  position: absolute;
  top: 0;
}

.css-64,
[data-css-64] {
  box-sizing: border-box;
  color: #2e6fd9;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: transparent;
  border-color: transparent;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 1.5em;
  min-width: 1.5em;
  padding: 0 0.5em;
  text-decoration: none;
  vertical-align: middle;
  left: 0;
  position: absolute;
  top: 0;
}

.css-64 *,
[data-css-64] *,
.css-64 *::before,
[data-css-64] *::before,
.css-64 *::after,
[data-css-64] *::after {
  box-sizing: inherit;
}

.css-64:focus,
[data-css-64]:focus,
.css-64[data-simulate-focus],
[data-css-64][data-simulate-focus] {
  border-color: #fff;
  box-shadow: 0 0 0 1px #2e6fd9;
  color: #2e6fd9;
  text-decoration: none;
}

.css-64:hover,
[data-css-64]:hover,
.css-64[data-simulate-hover],
[data-css-64][data-simulate-hover] {
  background-color: #f5f7fa;
  color: #2e6fd9;
  text-decoration: none;
}

.css-64:active,
[data-css-64]:active,
.css-64[data-simulate-active],
[data-css-64][data-simulate-active] {
  background-color: #ebeff5;
  color: #2e6fd9;
}

.css-64::-moz-focus-inner,
[data-css-64]::-moz-focus-inner,
.css-64[data-simulate-mozfocusinner],
[data-css-64][data-simulate-mozfocusinner] {
  border: 0;
}

.css-64 [role="img"],
[data-css-64] [role="img"] {
  box-sizing: content-box;
  fill: currentColor;
  display: block;
}

.css-64 [role="img"]:first-child,
[data-css-64] [role="img"]:first-child {
  margin-right: 0.5em;
}

.css-64 [role="img"]:last-child,
[data-css-64] [role="img"]:last-child {
  margin-left: 0.5em;
}

.css-64 [role="img"]:only-child,
[data-css-64] [role="img"]:only-child {
  margin: 0;
}

.css-78,
[data-css-78] {
  align-items: center;
  display: -webkit-inline-box;
  display: -moz-inline-box;
  display: -ms-inline-flexbox;
  display: -webkit-inline-flex;
  display: inline-flex;
  justify-content: center;
  max-height: 100%;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
}

.css-79,
[data-css-79] {
  display: block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  font-size: 0.75em;
  line-height: 2em;
}

<ScrollBox
  autoCenter={true}
  height={360}
>
  <glamorous(div)>
    <div
      className="css-60"
    >
      <glamorous(div)
        height={360}
      >
        <div
          className="css-61"
        >
          <glamorous(div)
            scrollAreaHeight={360}
          >
            <div
              className="css-62"
            >
              <Select
                data={
                  Array [
                    Object {
                      "text": "Alpha",
                      "value": "alpha",
                    },
                    Object {
                      "text": "Beta",
                      "value": "beta",
                    },
                    Object {
                      "text": "Gamma",
                      "value": "gamma",
                    },
                  ]
                }
                isOpen={true}
              >
                <div
                  style={
                    Object {
                      "width": "14em",
                    }
                  }
                >
                  <Select
                    data={
                      Array [
                        Object {
                          "text": "Alpha",
                          "value": "alpha",
                        },
                        Object {
                          "text": "Beta",
                          "value": "beta",
                        },
                        Object {
                          "text": "Gamma",
                          "value": "gamma",
                        },
                      ]
                    }
                    isOpen={true}
                    placeholder="Select..."
                    placement="bottom-start"
                    size="large"
                  >
                    <Select
                      data={
                        Array [
                          Object {
                            "text": "Alpha",
                            "value": "alpha",
                          },
                          Object {
                            "text": "Beta",
                            "value": "beta",
                          },
                          Object {
                            "text": "Gamma",
                            "value": "gamma",
                          },
                        ]
                      }
                      getItemProps={[Function]}
                      getMenuProps={[Function]}
                      getTriggerProps={[Function]}
                      id="select-123"
                      isOpen={true}
                      modifiers={
                        Object {
                          "contentWidth": Object {
                            "enabled": true,
                            "fn": [Function],
                          },
                        }
                      }
                      onClose={[Function]}
                      onOpen={[Function]}
                      placement="bottom-start"
                    >
                      <ThemedComponent
                        className="css-0"
                        data={
                          Array [
                            Object {
                              "text": "Alpha",
                              "value": "alpha",
                            },
                            Object {
                              "text": "Beta",
                              "value": "beta",
                            },
                            Object {
                              "text": "Gamma",
                              "value": "gamma",
                            },
                          ]
                        }
                        getItemProps={[Function]}
                        getMenuProps={[Function]}
                        getTriggerProps={[Function]}
                        id="select-123"
                        isOpen={true}
                        modifiers={
                          Object {
                            "contentWidth": Object {
                              "enabled": true,
                              "fn": [Function],
                            },
                          }
                        }
                        onClose={[Function]}
                        onOpen={[Function]}
                        placement="bottom-start"
                      >
                        <Themed(Dropdown)
                          className="css-0"
                          data={
                            Array [
                              Object {
                                "text": "Alpha",
                                "value": "alpha",
                              },
                              Object {
                                "text": "Beta",
                                "value": "beta",
                              },
                              Object {
                                "text": "Gamma",
                                "value": "gamma",
                              },
                            ]
                          }
                          getItemProps={[Function]}
                          getMenuProps={[Function]}
                          getTriggerProps={[Function]}
                          id="select-123"
                          isOpen={true}
                          modifiers={
                            Object {
                              "contentWidth": Object {
                                "enabled": true,
                                "fn": [Function],
                              },
                            }
                          }
                          onClose={[Function]}
                          onOpen={[Function]}
                          placement="bottom-start"
                        >
                          <ThemeProvider>
                            <ThemeProvider>
                              <Dropdown
                                className="css-0"
                                data={
                                  Array [
                                    Object {
                                      "text": "Alpha",
                                      "value": "alpha",
                                    },
                                    Object {
                                      "text": "Beta",
                                      "value": "beta",
                                    },
                                    Object {
                                      "text": "Gamma",
                                      "value": "gamma",
                                    },
                                  ]
                                }
                                getItemProps={[Function]}
                                getMenuProps={[Function]}
                                getTriggerProps={[Function]}
                                id="select-123"
                                isOpen={true}
                                modifiers={
                                  Object {
                                    "contentWidth": Object {
                                      "enabled": true,
                                      "fn": [Function],
                                    },
                                  }
                                }
                                onClose={[Function]}
                                onOpen={[Function]}
                                placement="bottom-start"
                              >
                                <Popover
                                  className="css-0"
                                  content={
                                    <DropdownContent
                                      data={
                                        Array [
                                          Object {
                                            "text": "Alpha",
                                            "value": "alpha",
                                          },
                                          Object {
                                            "text": "Beta",
                                            "value": "beta",
                                          },
                                          Object {
                                            "text": "Gamma",
                                            "value": "gamma",
                                          },
                                        ]
                                      }
                                      getItemProps={[Function]}
                                      getMenuProps={[Function]}
                                      id="select-123-content"
                                      modifiers={
                                        Object {
                                          "contentWidth": Object {
                                            "enabled": true,
                                            "fn": [Function],
                                          },
                                        }
                                      }
                                      placement="bottom-start"
                                      wide={undefined}
                                    />
                                  }
                                  focusTriggerOnClose={true}
                                  getItemProps={[Function]}
                                  getMenuProps={[Function]}
                                  getTriggerProps={[Function]}
                                  hasArrow={true}
                                  id="select-123"
                                  isOpen={true}
                                  onClose={[Function]}
                                  onOpen={[Function]}
                                  placement="bottom"
                                  triggerRef={[Function]}
                                  wrapContent={false}
                                >
                                  <Popover
                                    className="css-0"
                                    content={
                                      <DropdownContent
                                        data={
                                          Array [
                                            Object {
                                              "text": "Alpha",
                                              "value": "alpha",
                                            },
                                            Object {
                                              "text": "Beta",
                                              "value": "beta",
                                            },
                                            Object {
                                              "text": "Gamma",
                                              "value": "gamma",
                                            },
                                          ]
                                        }
                                        getItemProps={[Function]}
                                        getMenuProps={[Function]}
                                        id="select-123-content"
                                        modifiers={
                                          Object {
                                            "contentWidth": Object {
                                              "enabled": true,
                                              "fn": [Function],
                                            },
                                          }
                                        }
                                        placement="bottom-start"
                                        wide={undefined}
                                      />
                                    }
                                    focusTriggerOnClose={true}
                                    getItemProps={[Function]}
                                    getMenuProps={[Function]}
                                    getTriggerProps={[Function]}
                                    hasArrow={true}
                                    id="select-123"
                                    isOpen={true}
                                    onClose={[Function]}
                                    onOpen={[Function]}
                                    placement="bottom"
                                    tag="span"
                                    triggerRef={[Function]}
                                    wrapContent={false}
                                  >
                                    <Manager
                                      className="css-1"
                                      id="select-123"
                                      tag="span"
                                    >
                                      <span
                                        className="css-1"
                                        id="select-123"
                                      >
                                        <PopoverTrigger
                                          aria-activedescendant="select-123-menu"
                                          aria-describedby="select-123-content"
                                          aria-expanded={true}
                                          aria-haspopup="listbox"
                                          aria-owns="select-123-content"
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          tabIndex={0}
                                        >
                                          <PopoverTrigger
                                            component="span"
                                          >
                                            <Target
                                              className="css-2"
                                              component="span"
                                            >
                                              <span
                                                className="css-2"
                                              >
                                                <SelectTrigger
                                                  aria-activedescendant="select-123-menu"
                                                  aria-describedby="select-123-content"
                                                  aria-expanded={true}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-123-content"
                                                  isOpen={true}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  placeholder="Select..."
                                                  role="button"
                                                  size="large"
                                                  tabIndex={0}
                                                  triggerRef={[Function]}
                                                >
                                                  <SelectTrigger
                                                    afterItems={
                                                      Array [
                                                        <IconArrowDropdownUp
                                                          css={
                                                            Object {
                                                              "margin": "0.5em",
                                                            }
                                                          }
                                                          size="1.5em"
                                                        />,
                                                        <input
                                                          name={undefined}
                                                          type="hidden"
                                                          value=""
                                                        />,
                                                      ]
                                                    }
                                                    aria-activedescendant="select-123-menu"
                                                    aria-describedby="select-123-content"
                                                    aria-expanded={true}
                                                    aria-haspopup="listbox"
                                                    aria-owns="select-123-content"
                                                    control={[Function]}
                                                    controlProps={
                                                      Object {
                                                        "hasPlaceholder": true,
                                                        "variant": undefined,
                                                      }
                                                    }
                                                    fauxControlRef={[Function]}
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    role="button"
                                                    size="large"
                                                    tabIndex={0}
                                                  >
                                                    <FauxControl
                                                      afterItems={
                                                        Array [
                                                          <IconArrowDropdownUp
                                                            css={
                                                              Object {
                                                                "margin": "0.5em",
                                                              }
                                                            }
                                                            size="1.5em"
                                                          />,
                                                          <input
                                                            name={undefined}
                                                            type="hidden"
                                                            value=""
                                                          />,
                                                        ]
                                                      }
                                                      aria-activedescendant="select-123-menu"
                                                      aria-describedby="select-123-content"
                                                      aria-expanded={true}
                                                      aria-haspopup="listbox"
                                                      aria-owns="select-123-content"
                                                      className="css-3"
                                                      control={[Function]}
                                                      controlProps={
                                                        Object {
                                                          "hasPlaceholder": true,
                                                          "variant": undefined,
                                                        }
                                                      }
                                                      fauxControlRef={[Function]}
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      role="button"
                                                      size="large"
                                                      tabIndex={0}
                                                    >
                                                      <FauxControl
                                                        aria-activedescendant="select-123-menu"
                                                        aria-describedby="select-123-content"
                                                        aria-expanded={true}
                                                        aria-haspopup="listbox"
                                                        aria-owns="select-123-content"
                                                        className="css-3"
                                                        control={[Function]}
                                                        innerRef={[Function]}
                                                        onBlur={[Function]}
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        role="button"
                                                        tabIndex={0}
                                                      >
                                                        <div
                                                          aria-activedescendant="select-123-menu"
                                                          aria-describedby="select-123-content"
                                                          aria-expanded={true}
                                                          aria-haspopup="listbox"
                                                          aria-owns="select-123-content"
                                                          className="css-7"
                                                          onBlur={[Function]}
                                                          onClick={[Function]}
                                                          onKeyDown={[Function]}
                                                          onKeyUp={[Function]}
                                                          role="button"
                                                          tabIndex={0}
                                                        >
                                                          <glamorous(Trigger)
                                                            controlPropsIn={
                                                              Object {
                                                                "hasPlaceholder": true,
                                                                "variant": undefined,
                                                              }
                                                            }
                                                            hasPlaceholder={true}
                                                            key="control"
                                                            size="large"
                                                          >
                                                            <div
                                                              className="css-20"
                                                            >
                                                              <TriggerContent>
                                                                <span
                                                                  className="css-34"
                                                                >
                                                                  Select...
                                                                </span>
                                                              </TriggerContent>
                                                            </div>
                                                          </glamorous(Trigger)>
                                                          <IconArrowDropdownUp
                                                            css={
                                                              Object {
                                                                "margin": "0.5em",
                                                              }
                                                            }
                                                            key="arrow"
                                                            size="1.5em"
                                                          >
                                                            <Icon
                                                              css={
                                                                Object {
                                                                  "margin": "0.5em",
                                                                }
                                                              }
                                                              rtl={false}
                                                              size="1.5em"
                                                            >
                                                              <glamorous(svg)
                                                                aria-hidden={true}
                                                                css={
                                                                  Object {
                                                                    "margin": "0.5em",
                                                                  }
                                                                }
                                                                role="img"
                                                                rtl={false}
                                                                size="1.5em"
                                                                viewBox="0 0 24 24"
                                                              >
                                                                <svg
                                                                  aria-hidden={true}
                                                                  className="css-35"
                                                                  role="img"
                                                                  viewBox="0 0 24 24"
                                                                >
                                                                  <g>
                                                                    <path
                                                                      d="M12 7.5l8 8H4z"
                                                                    />
                                                                  </g>
                                                                </svg>
                                                              </glamorous(svg)>
                                                            </Icon>
                                                          </IconArrowDropdownUp>
                                                          <input
                                                            key="input"
                                                            type="hidden"
                                                            value=""
                                                          />
                                                          <Underlay>
                                                            <div
                                                              className="css-36"
                                                            />
                                                          </Underlay>
                                                        </div>
                                                      </FauxControl>
                                                    </FauxControl>
                                                  </SelectTrigger>
                                                </SelectTrigger>
                                              </span>
                                            </Target>
                                          </PopoverTrigger>
                                        </PopoverTrigger>
                                        <DropdownContent
                                          data={
                                            Array [
                                              Object {
                                                "text": "Alpha",
                                                "value": "alpha",
                                              },
                                              Object {
                                                "text": "Beta",
                                                "value": "beta",
                                              },
                                              Object {
                                                "text": "Gamma",
                                                "value": "gamma",
                                              },
                                            ]
                                          }
                                          getItemProps={[Function]}
                                          getMenuProps={[Function]}
                                          id="select-123-content"
                                          modifiers={
                                            Object {
                                              "contentWidth": Object {
                                                "enabled": true,
                                                "fn": [Function],
                                              },
                                            }
                                          }
                                          placement="bottom-start"
                                        >
                                          <DropdownContent
                                            id="select-123-content"
                                            modifiers={
                                              Object {
                                                "contentWidth": Object {
                                                  "enabled": true,
                                                  "fn": [Function],
                                                },
                                              }
                                            }
                                            placement="bottom-start"
                                          >
                                            <ThemedComponent
                                              className="css-37"
                                              id="select-123-content"
                                              modifiers={
                                                Object {
                                                  "contentWidth": Object {
                                                    "enabled": true,
                                                    "fn": [Function],
                                                  },
                                                }
                                              }
                                              placement="bottom-start"
                                            >
                                              <RtlPopper
                                                className="css-37"
                                                id="select-123-content"
                                                modifiers={
                                                  Object {
                                                    "contentWidth": Object {
                                                      "enabled": true,
                                                      "fn": [Function],
                                                    },
                                                  }
                                                }
                                                placement="bottom-start"
                                                theme={
                                                  Object {
                                                    "DropdownContent_backgroundColor": "#fff",
                                                    "DropdownContent_borderColor": "#ebeff5",
                                                    "DropdownContent_borderRadius": "0.1875em",
                                                    "DropdownContent_boxShadow": "0 2px 4px 0 rgba(0,0,0,0.2), 0 4px 8px 0 rgba(0,0,0,0.2)",
                                                    "DropdownContent_margin": "5px",
                                                    "DropdownContent_zIndex": 100,
                                                    "DropdownIcon_fill": "#2e6fd9",
                                                    "DropdownIcon_marginHorizontal": "0.5em",
                                                    "Dropdown_backgroundColor": "#fff",
                                                    "Dropdown_borderColor": "#c8d1e0",
                                                    "Dropdown_borderColor_active": "#c8d1e0",
                                                    "Dropdown_borderColor_focus": "#c8d1e0",
                                                    "Dropdown_borderColor_hover": "#2e6fd9",
                                                    "Dropdown_borderRadius": "0.1875em",
                                                    "Dropdown_borderWidth": "1px",
                                                    "Dropdown_boxShadow_active": "0 0 0 1px #fff, 0 0 0 2px #2e6fd9",
                                                    "Dropdown_boxShadow_focus": "0 0 0 1px #fff, 0 0 0 2px #2e6fd9",
                                                    "Dropdown_color_placeholder": "#8e99ab",
                                                    "Dropdown_color_text": "#58606e",
                                                    "Dropdown_fontSize": "0.875em",
                                                    "Dropdown_fontSize_small": "0.75em",
                                                    "Dropdown_height_jumbo": "3.25em",
                                                    "Dropdown_height_large": "2.5em",
                                                    "Dropdown_height_medium": "2em",
                                                    "Dropdown_height_small": "1.5em",
                                                    "Dropdown_paddingHorizontal": "1em",
                                                    "Dropdown_paddingHorizontal_small": "0.5em",
                                                    "backgroundColor_danger": "#db2929",
                                                    "backgroundColor_danger_active": "#c71818",
                                                    "backgroundColor_danger_activeMuted": "#f79999",
                                                    "backgroundColor_danger_focus": "#db2929",
                                                    "backgroundColor_danger_hover": "#eb4d4d",
                                                    "backgroundColor_danger_muted": "#fabebe",
                                                    "backgroundColor_disabled": "#ebeff5",
                                                    "backgroundColor_input": "#fff",
                                                    "backgroundColor_link_focus": "#dde3ed",
                                                    "backgroundColor_success": "#0a8f4c",
                                                    "backgroundColor_success_active": "#06783f",
                                                    "backgroundColor_success_activeMuted": "#95f5c3",
                                                    "backgroundColor_success_focus": "#0a8f4c",
                                                    "backgroundColor_success_hover": "#10a35a",
                                                    "backgroundColor_success_muted": "#c0fadc",
                                                    "backgroundColor_warning": "#e05b2b",
                                                    "backgroundColor_warning_active": "#cf4615",
                                                    "backgroundColor_warning_activeMuted": "#fab69d",
                                                    "backgroundColor_warning_focus": "#e05b2b",
                                                    "backgroundColor_warning_hover": "#ed774c",
                                                    "backgroundColor_warning_muted": "#fcd0c0",
                                                    "borderColor": "#c8d1e0",
                                                    "borderColor_active": "#2e6fd9",
                                                    "borderColor_danger": "#db2929",
                                                    "borderColor_danger_active": "#c71818",
                                                    "borderColor_danger_focus": "#c71818",
                                                    "borderColor_danger_hover": "#c71818",
                                                    "borderColor_danger_muted": "#f27474",
                                                    "borderColor_focus": "#2e6fd9",
                                                    "borderColor_hover": "#2e6fd9",
                                                    "borderColor_success": "#10a35a",
                                                    "borderColor_success_active": "#0a8f4c",
                                                    "borderColor_success_focus": "#0a8f4c",
                                                    "borderColor_success_hover": "#0a8f4c",
                                                    "borderColor_success_muted": "#67eba7",
                                                    "borderColor_warning": "#e05b2b",
                                                    "borderColor_warning_active": "#cf4615",
                                                    "borderColor_warning_focus": "#cf4615",
                                                    "borderColor_warning_hover": "#cf4615",
                                                    "borderColor_warning_muted": "#f59776",
                                                    "borderRadius_1": "0.1875em",
                                                    "breakpoint_medium": 768,
                                                    "breakpoint_narrow": 512,
                                                    "breakpoint_wide": 1024,
                                                    "color_black": "#1d1f24",
                                                    "color_caption": "#58606e",
                                                    "color_gray_10": "#f5f7fa",
                                                    "color_gray_100": "#333840",
                                                    "color_gray_20": "#ebeff5",
                                                    "color_gray_30": "#dde3ed",
                                                    "color_gray_40": "#c8d1e0",
                                                    "color_gray_50": "#afbacc",
                                                    "color_gray_60": "#8e99ab",
                                                    "color_gray_70": "#707a8a",
                                                    "color_gray_80": "#58606e",
                                                    "color_gray_90": "#434a54",
                                                    "color_placeholder": "#8e99ab",
                                                    "color_text": "#333840",
                                                    "color_text_danger": "#db2929",
                                                    "color_text_danger_active": "#c71818",
                                                    "color_text_danger_focus": "#db2929",
                                                    "color_text_danger_hover": "#eb4d4d",
                                                    "color_text_disabled": "#afbacc",
                                                    "color_text_ondanger": "#fff",
                                                    "color_text_onprimary": "#fff",
                                                    "color_text_onsuccess": "#fff",
                                                    "color_text_onwarning": "#fff",
                                                    "color_text_primary": "#2e6fd9",
                                                    "color_text_primary_active": "#1f5dc2",
                                                    "color_text_primary_focus": "#2e6fd9",
                                                    "color_text_primary_hover": "#4a89e8",
                                                    "color_text_success": "#06783f",
                                                    "color_text_success_active": "#046132",
                                                    "color_text_success_focus": "#06783f",
                                                    "color_text_success_hover": "#0a8f4c",
                                                    "color_text_warning": "#cf4615",
                                                    "color_text_warning_active": "#bd3909",
                                                    "color_text_warning_focus": "#cf4615",
                                                    "color_text_warning_hover": "#e05b2b",
                                                    "color_theme_10": "#e6eefc",
                                                    "color_theme_100": "#0f397d",
                                                    "color_theme_20": "#c2dbfc",
                                                    "color_theme_30": "#9dc2fa",
                                                    "color_theme_40": "#72a5f2",
                                                    "color_theme_50": "#4a89e8",
                                                    "color_theme_60": "#2e6fd9",
                                                    "color_theme_70": "#1f5dc2",
                                                    "color_theme_80": "#164ea8",
                                                    "color_theme_90": "#114091",
                                                    "color_white": "#fff",
                                                    "direction": "ltr",
                                                    "fontFamily": "Open Sans",
                                                    "fontFamily_monospace": "\\"SF Mono\\", \\"Droid Sans Mono\\", \\"Source Code Pro\\", Monaco, Consolas, \\"Courier New\\", Courier, monospace",
                                                    "fontFamily_system": "-apple-system, system-ui, BlinkMacSystemFont, \\"Segoe UI\\", Roboto, Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\", \\"Segoe UI Symbol\\"",
                                                    "fontSize_base": 16,
                                                    "fontSize_h1": "2.125em",
                                                    "fontSize_h2": "1.75em",
                                                    "fontSize_h3": "1.375em",
                                                    "fontSize_h4": "1.125em",
                                                    "fontSize_h5": "0.875em",
                                                    "fontSize_h6": "0.875em",
                                                    "fontSize_mouse": "0.6875em",
                                                    "fontSize_prose": "1em",
                                                    "fontSize_ui": "0.875em",
                                                    "fontWeight_bold": 700,
                                                    "fontWeight_extraBold": 800,
                                                    "fontWeight_regular": 400,
                                                    "fontWeight_semiBold": 600,
                                                    "lineHeight": 1.25,
                                                    "lineHeight_prose": 1.5,
                                                    "shadow_1": "0 1px 2px 0 rgba(0,0,0,0.2), 0 2px 4px 0 rgba(0,0,0,0.2)",
                                                    "shadow_2": "0 2px 4px 0 rgba(0,0,0,0.2), 0 4px 8px 0 rgba(0,0,0,0.2)",
                                                    "shadow_3": "0 4px 8px 0 rgba(0,0,0,0.2), 0 8px 16px 0 rgba(0,0,0,0.2)",
                                                    "shadow_4": "0 8px 16px 0 rgba(0,0,0,0.2), 0 20px 16px -8px rgba(0,0,0,0.2)",
                                                    "shadow_5": "0 16px 24px 0 rgba(0,0,0,0.2), 0 32px 24px -16px rgba(0,0,0,0.2)",
                                                    "size_jumbo": "3.25em",
                                                    "size_large": "2.5em",
                                                    "size_medium": "2em",
                                                    "size_small": "1.5em",
                                                    "space_inline_lg": "1.5em",
                                                    "space_inline_md": "1em",
                                                    "space_inline_sm": "0.5em",
                                                    "space_inline_xl": "2em",
                                                    "space_inline_xs": "0.25em",
                                                    "space_inline_xxl": "4em",
                                                    "space_inline_xxs": "0.125em",
                                                    "space_inset_lg": "1.5em",
                                                    "space_inset_md": "1em",
                                                    "space_inset_sm": "0.5em",
                                                    "space_stack_lg": "1.5em",
                                                    "space_stack_md": "1em",
                                                    "space_stack_sm": "0.5em",
                                                    "space_stack_xl": "2em",
                                                    "space_stack_xs": "0.25em",
                                                    "space_stack_xxl": "4em",
                                                    "space_stack_xxs": "0.125em",
                                                    "zIndex_100": 100,
                                                    "zIndex_1600": 1600,
                                                    "zIndex_200": 200,
                                                    "zIndex_400": 400,
                                                    "zIndex_800": 800,
                                                  }
                                                }
                                              >
                                                <Popper
                                                  className="css-37"
                                                  component="div"
                                                  eventsEnabled={true}
                                                  id="select-123-content"
                                                  modifiers={
                                                    Object {
                                                      "contentWidth": Object {
                                                        "enabled": true,
                                                        "fn": [Function],
                                                      },
                                                    }
                                                  }
                                                  placement="bottom-start"
                                                >
                                                  <div
                                                    className="css-37"
                                                    id="select-123-content"
                                                    style={
                                                      Object {
                                                        "opacity": 0,
                                                        "pointerEvents": "none",
                                                        "position": "absolute",
                                                      }
                                                    }
                                                  >
                                                    <Menu
                                                      data={
                                                        Array [
                                                          Object {
                                                            "text": "Alpha",
                                                            "value": "alpha",
                                                          },
                                                          Object {
                                                            "text": "Beta",
                                                            "value": "beta",
                                                          },
                                                          Object {
                                                            "text": "Gamma",
                                                            "value": "gamma",
                                                          },
                                                        ]
                                                      }
                                                      getItemProps={[Function]}
                                                      id="select-123-menu"
                                                      role="listbox"
                                                    >
                                                      <Menu
                                                        id="select-123-menu"
                                                        role="listbox"
                                                      >
                                                        <div
                                                          className="css-38"
                                                          id="select-123-menu"
                                                          role="listbox"
                                                        >
                                                          <MenuGroup
                                                            key="0"
                                                          >
                                                            <MenuGroup>
                                                              <div
                                                                className="css-39"
                                                              >
                                                                <MenuItem
                                                                  aria-selected={false}
                                                                  id="select-123-item-0"
                                                                  isHighlighted={false}
                                                                  item={
                                                                    Object {
                                                                      "text": "Alpha",
                                                                      "value": "alpha",
                                                                    }
                                                                  }
                                                                  key="0"
                                                                  onClick={[Function]}
                                                                  role="option"
                                                                  tabIndex={null}
                                                                  value="alpha"
                                                                >
                                                                  <MenuItem
                                                                    aria-selected={false}
                                                                    id="select-123-item-0"
                                                                    isHighlighted={false}
                                                                    item={
                                                                      Object {
                                                                        "text": "Alpha",
                                                                        "value": "alpha",
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    role="option"
                                                                    tabIndex={null}
                                                                    value="alpha"
                                                                  >
                                                                    <div
                                                                      aria-selected={false}
                                                                      className="css-49"
                                                                      id="select-123-item-0"
                                                                      onClick={[Function]}
                                                                      onKeyDown={[Function]}
                                                                      role="option"
                                                                      tabIndex={null}
                                                                    >
                                                                      <glamorous(span)>
                                                                        <span
                                                                          className="css-45"
                                                                        >
                                                                          <glamorous(span)>
                                                                            <span
                                                                              className="css-46"
                                                                            >
                                                                              <glamorous(span)>
                                                                                <span
                                                                                  className="css-47"
                                                                                >
                                                                                  Alpha
                                                                                </span>
                                                                              </glamorous(span)>
                                                                              <glamorous(span)>
                                                                                <span
                                                                                  className="css-48"
                                                                                />
                                                                              </glamorous(span)>
                                                                            </span>
                                                                          </glamorous(span)>
                                                                        </span>
                                                                      </glamorous(span)>
                                                                    </div>
                                                                  </MenuItem>
                                                                </MenuItem>
                                                                <MenuItem
                                                                  aria-selected={false}
                                                                  id="select-123-item-1"
                                                                  isHighlighted={false}
                                                                  item={
                                                                    Object {
                                                                      "text": "Beta",
                                                                      "value": "beta",
                                                                    }
                                                                  }
                                                                  key="1"
                                                                  onClick={[Function]}
                                                                  role="option"
                                                                  tabIndex={null}
                                                                  value="beta"
                                                                >
                                                                  <MenuItem
                                                                    aria-selected={false}
                                                                    id="select-123-item-1"
                                                                    isHighlighted={false}
                                                                    item={
                                                                      Object {
                                                                        "text": "Beta",
                                                                        "value": "beta",
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    role="option"
                                                                    tabIndex={null}
                                                                    value="beta"
                                                                  >
                                                                    <div
                                                                      aria-selected={false}
                                                                      className="css-49"
                                                                      id="select-123-item-1"
                                                                      onClick={[Function]}
                                                                      onKeyDown={[Function]}
                                                                      role="option"
                                                                      tabIndex={null}
                                                                    >
                                                                      <glamorous(span)>
                                                                        <span
                                                                          className="css-45"
                                                                        >
                                                                          <glamorous(span)>
                                                                            <span
                                                                              className="css-46"
                                                                            >
                                                                              <glamorous(span)>
                                                                                <span
                                                                                  className="css-47"
                                                                                >
                                                                                  Beta
                                                                                </span>
                                                                              </glamorous(span)>
                                                                              <glamorous(span)>
                                                                                <span
                                                                                  className="css-48"
                                                                                />
                                                                              </glamorous(span)>
                                                                            </span>
                                                                          </glamorous(span)>
                                                                        </span>
                                                                      </glamorous(span)>
                                                                    </div>
                                                                  </MenuItem>
                                                                </MenuItem>
                                                                <MenuItem
                                                                  aria-selected={false}
                                                                  id="select-123-item-2"
                                                                  isHighlighted={false}
                                                                  item={
                                                                    Object {
                                                                      "text": "Gamma",
                                                                      "value": "gamma",
                                                                    }
                                                                  }
                                                                  key="2"
                                                                  onClick={[Function]}
                                                                  role="option"
                                                                  tabIndex={null}
                                                                  value="gamma"
                                                                >
                                                                  <MenuItem
                                                                    aria-selected={false}
                                                                    id="select-123-item-2"
                                                                    isHighlighted={false}
                                                                    item={
                                                                      Object {
                                                                        "text": "Gamma",
                                                                        "value": "gamma",
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    role="option"
                                                                    tabIndex={null}
                                                                    value="gamma"
                                                                  >
                                                                    <div
                                                                      aria-selected={false}
                                                                      className="css-49"
                                                                      id="select-123-item-2"
                                                                      onClick={[Function]}
                                                                      onKeyDown={[Function]}
                                                                      role="option"
                                                                      tabIndex={null}
                                                                    >
                                                                      <glamorous(span)>
                                                                        <span
                                                                          className="css-45"
                                                                        >
                                                                          <glamorous(span)>
                                                                            <span
                                                                              className="css-46"
                                                                            >
                                                                              <glamorous(span)>
                                                                                <span
                                                                                  className="css-47"
                                                                                >
                                                                                  Gamma
                                                                                </span>
                                                                              </glamorous(span)>
                                                                              <glamorous(span)>
                                                                                <span
                                                                                  className="css-48"
                                                                                />
                                                                              </glamorous(span)>
                                                                            </span>
                                                                          </glamorous(span)>
                                                                        </span>
                                                                      </glamorous(span)>
                                                                    </div>
                                                                  </MenuItem>
                                                                </MenuItem>
                                                              </div>
                                                            </MenuGroup>
                                                          </MenuGroup>
                                                        </div>
                                                      </Menu>
                                                    </Menu>
                                                  </div>
                                                </Popper>
                                              </RtlPopper>
                                            </ThemedComponent>
                                          </DropdownContent>
                                        </DropdownContent>
                                        <EventListener
                                          listeners={
                                            Array [
                                              Object {
                                                "event": "click",
                                                "handler": [Function],
                                                "options": true,
                                                "target": "document",
                                              },
                                              Object {
                                                "event": "keydown",
                                                "handler": [Function],
                                                "options": true,
                                                "target": "document",
                                              },
                                            ]
                                          }
                                        />
                                      </span>
                                    </Manager>
                                  </Popover>
                                </Popover>
                              </Dropdown>
                            </ThemeProvider>
                          </ThemeProvider>
                        </Themed(Dropdown)>
                      </ThemedComponent>
                    </Select>
                  </Select>
                </div>
              </Select>
            </div>
          </glamorous(div)>
        </div>
      </glamorous(div)>
      <glamorous(Button)
        minimal={true}
        onClick={[Function]}
        size="small"
      >
        <Button
          className="css-63"
          element="button"
          minimal={true}
          onClick={[Function]}
          size="small"
          type="button"
          variant="regular"
        >
          <glamorous(button)
            className="css-63"
            element="button"
            minimal={true}
            onClick={[Function]}
            size="small"
            text="Re-center"
            type="button"
            variant="regular"
          >
            <button
              className="css-64"
              onClick={[Function]}
              type="button"
            >
              <glamorous(span)>
                <span
                  className="css-78"
                >
                  <glamorous(span)
                    size="small"
                  >
                    <span
                      className="css-79"
                    >
                      Re-center
                    </span>
                  </glamorous(span)>
                </span>
              </glamorous(span)>
            </button>
          </glamorous(button)>
        </Button>
      </glamorous(Button)>
    </div>
  </glamorous(div)>
</ScrollBox>
`;

exports[`Select demo examples size 1`] = `
.css-0,
[data-css-0] {
  width: 100%;
}

.css-0 > span,
[data-css-0] > span {
  width: 100%;
}

.css-1,
[data-css-1] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: inline-block;
  width: 100%;
}

.css-1 *,
[data-css-1] *,
.css-1 *::before,
[data-css-1] *::before,
.css-1 *::after,
[data-css-1] *::after {
  box-sizing: inherit;
}

.css-1 > span,
[data-css-1] > span {
  width: 100%;
}

.css-2,
[data-css-2] {
  display: inline-block;
}

.css-3,
[data-css-3] {
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-3 [role="img"],
[data-css-3] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-3 [role="img"]:first-child,
[data-css-3] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-3 :not([role="img"]) ~ [role="img"],
[data-css-3] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-3 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-3] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-7,
[data-css-7] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-7 *,
[data-css-7] *,
.css-7 *::before,
[data-css-7] *::before,
.css-7 *::after,
[data-css-7] *::after {
  box-sizing: inherit;
}

.css-7:hover > div:last-child,
[data-css-7]:hover > div:last-child,
.css-7[data-simulate-hover] > div:last-child,
[data-css-7][data-simulate-hover] > div:last-child {
  border-color: #2e6fd9;
}

.css-7:focus > div:last-child,
[data-css-7]:focus > div:last-child,
.css-7[data-simulate-focus] > div:last-child,
[data-css-7][data-simulate-focus] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7:active > div:last-child,
[data-css-7]:active > div:last-child,
.css-7[data-simulate-active] > div:last-child,
[data-css-7][data-simulate-active] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7 [role="img"],
[data-css-7] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-7 [role="img"]:first-child,
[data-css-7] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-7 :not([role="img"]) ~ [role="img"],
[data-css-7] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-7 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-7] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-20,
[data-css-20] {
  align-items: center;
  color: #8e99ab;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  font-style: italic;
  height: 2.857142857142857em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-20::placeholder,
[data-css-20]::placeholder,
.css-20[data-simulate-placeholder],
[data-css-20][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-input-placeholder,
[data-css-20]::-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20:-ms-input-placeholder,
[data-css-20]:-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-clear,
[data-css-20]::-ms-clear,
.css-20[data-simulate-msclear],
[data-css-20][data-simulate-msclear] {
  display: none;
}

.css-20:focus ~ div:last-child,
[data-css-20]:focus ~ div:last-child,
.css-20[data-simulate-focus] ~ div:last-child,
[data-css-20][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-34,
[data-css-34] {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  user-select: none;
  width: 100%;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.css-35,
[data-css-35] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.css-36,
[data-css-36] {
  background-color: #fff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.css-37,
[data-css-37] {
  align-items: center;
  color: #8e99ab;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.75em;
  font-style: italic;
  height: 2em;
  outline: 0;
  padding-left: 0.6666666666666666em;
  padding-right: 0.6666666666666666em;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-37::placeholder,
[data-css-37]::placeholder,
.css-37[data-simulate-placeholder],
[data-css-37][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-37::-ms-input-placeholder,
[data-css-37]::-ms-input-placeholder,
.css-37[data-simulate-msinputplaceholder],
[data-css-37][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-37:-ms-input-placeholder,
[data-css-37]:-ms-input-placeholder,
.css-37[data-simulate-msinputplaceholder],
[data-css-37][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-37::-ms-clear,
[data-css-37]::-ms-clear,
.css-37[data-simulate-msclear],
[data-css-37][data-simulate-msclear] {
  display: none;
}

.css-37:focus ~ div:last-child,
[data-css-37]:focus ~ div:last-child,
.css-37[data-simulate-focus] ~ div:last-child,
[data-css-37][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-51,
[data-css-51] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1em;
  width: 1em;
  margin: 0.25em;
}

.css-52,
[data-css-52] {
  align-items: center;
  color: #8e99ab;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  font-style: italic;
  height: 2.2857142857142856em;
  outline: 0;
  padding-left: 0.5714285714285714em;
  padding-right: 0.5714285714285714em;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-52::placeholder,
[data-css-52]::placeholder,
.css-52[data-simulate-placeholder],
[data-css-52][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-52::-ms-input-placeholder,
[data-css-52]::-ms-input-placeholder,
.css-52[data-simulate-msinputplaceholder],
[data-css-52][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-52:-ms-input-placeholder,
[data-css-52]:-ms-input-placeholder,
.css-52[data-simulate-msinputplaceholder],
[data-css-52][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-52::-ms-clear,
[data-css-52]::-ms-clear,
.css-52[data-simulate-msclear],
[data-css-52][data-simulate-msclear] {
  display: none;
}

.css-52:focus ~ div:last-child,
[data-css-52]:focus ~ div:last-child,
.css-52[data-simulate-focus] ~ div:last-child,
[data-css-52][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-66,
[data-css-66] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1em;
  width: 1em;
  margin: 0.5em;
}

.css-67,
[data-css-67] {
  align-items: center;
  color: #8e99ab;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  font-style: italic;
  height: 3.7142857142857144em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-67::placeholder,
[data-css-67]::placeholder,
.css-67[data-simulate-placeholder],
[data-css-67][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-67::-ms-input-placeholder,
[data-css-67]::-ms-input-placeholder,
.css-67[data-simulate-msinputplaceholder],
[data-css-67][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-67:-ms-input-placeholder,
[data-css-67]:-ms-input-placeholder,
.css-67[data-simulate-msinputplaceholder],
[data-css-67][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-67::-ms-clear,
[data-css-67]::-ms-clear,
.css-67[data-simulate-msclear],
[data-css-67][data-simulate-msclear] {
  display: none;
}

.css-67:focus ~ div:last-child,
[data-css-67]:focus ~ div:last-child,
.css-67[data-simulate-focus] ~ div:last-child,
[data-css-67][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-81,
[data-css-81] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.875em;
}

<glamorous(div)>
  <div
    className="css-1p1xtzc"
  >
    <Select
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      placeholder="Small"
      placement="bottom-start"
      size="small"
    >
      <Select
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        getItemProps={[Function]}
        getMenuProps={[Function]}
        getTriggerProps={[Function]}
        id="select-102"
        isOpen={false}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placement="bottom-start"
      >
        <ThemedComponent
          className="css-0"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          getItemProps={[Function]}
          getMenuProps={[Function]}
          getTriggerProps={[Function]}
          id="select-102"
          isOpen={false}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placement="bottom-start"
        >
          <Themed(Dropdown)
            className="css-0"
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            getItemProps={[Function]}
            getMenuProps={[Function]}
            getTriggerProps={[Function]}
            id="select-102"
            isOpen={false}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onClose={[Function]}
            onOpen={[Function]}
            placement="bottom-start"
          >
            <ThemeProvider>
              <ThemeProvider>
                <Dropdown
                  className="css-0"
                  data={
                    Array [
                      Object {
                        "text": "Alpha",
                        "value": "alpha",
                      },
                      Object {
                        "text": "Beta",
                        "value": "beta",
                      },
                      Object {
                        "text": "Gamma",
                        "value": "gamma",
                      },
                    ]
                  }
                  getItemProps={[Function]}
                  getMenuProps={[Function]}
                  getTriggerProps={[Function]}
                  id="select-102"
                  isOpen={false}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placement="bottom-start"
                >
                  <Popover
                    className="css-0"
                    content={
                      <DropdownContent
                        data={
                          Array [
                            Object {
                              "text": "Alpha",
                              "value": "alpha",
                            },
                            Object {
                              "text": "Beta",
                              "value": "beta",
                            },
                            Object {
                              "text": "Gamma",
                              "value": "gamma",
                            },
                          ]
                        }
                        getItemProps={[Function]}
                        getMenuProps={[Function]}
                        id="select-102-content"
                        modifiers={
                          Object {
                            "contentWidth": Object {
                              "enabled": true,
                              "fn": [Function],
                            },
                          }
                        }
                        placement="bottom-start"
                        wide={undefined}
                      />
                    }
                    focusTriggerOnClose={true}
                    getItemProps={[Function]}
                    getMenuProps={[Function]}
                    getTriggerProps={[Function]}
                    hasArrow={true}
                    id="select-102"
                    isOpen={false}
                    onClose={[Function]}
                    onOpen={[Function]}
                    placement="bottom"
                    triggerRef={[Function]}
                    wrapContent={false}
                  >
                    <Popover
                      className="css-0"
                      content={
                        <DropdownContent
                          data={
                            Array [
                              Object {
                                "text": "Alpha",
                                "value": "alpha",
                              },
                              Object {
                                "text": "Beta",
                                "value": "beta",
                              },
                              Object {
                                "text": "Gamma",
                                "value": "gamma",
                              },
                            ]
                          }
                          getItemProps={[Function]}
                          getMenuProps={[Function]}
                          id="select-102-content"
                          modifiers={
                            Object {
                              "contentWidth": Object {
                                "enabled": true,
                                "fn": [Function],
                              },
                            }
                          }
                          placement="bottom-start"
                          wide={undefined}
                        />
                      }
                      focusTriggerOnClose={true}
                      getItemProps={[Function]}
                      getMenuProps={[Function]}
                      getTriggerProps={[Function]}
                      hasArrow={true}
                      id="select-102"
                      isOpen={false}
                      onClose={[Function]}
                      onOpen={[Function]}
                      placement="bottom"
                      tag="span"
                      triggerRef={[Function]}
                      wrapContent={false}
                    >
                      <Manager
                        className="css-1"
                        id="select-102"
                        tag="span"
                      >
                        <span
                          className="css-1"
                          id="select-102"
                        >
                          <PopoverTrigger
                            aria-describedby="select-102-content"
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            aria-owns="select-102-content"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            <PopoverTrigger
                              component="span"
                            >
                              <Target
                                className="css-2"
                                component="span"
                              >
                                <span
                                  className="css-2"
                                >
                                  <SelectTrigger
                                    aria-describedby="select-102-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-102-content"
                                    isOpen={false}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    placeholder="Small"
                                    role="button"
                                    size="small"
                                    tabIndex={0}
                                    triggerRef={[Function]}
                                  >
                                    <SelectTrigger
                                      afterItems={
                                        Array [
                                          <IconArrowDropdownDown
                                            css={
                                              Object {
                                                "margin": "0.25em",
                                              }
                                            }
                                            size="medium"
                                          />,
                                          <input
                                            name={undefined}
                                            type="hidden"
                                            value=""
                                          />,
                                        ]
                                      }
                                      aria-describedby="select-102-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-102-content"
                                      control={[Function]}
                                      controlProps={
                                        Object {
                                          "hasPlaceholder": true,
                                          "variant": undefined,
                                        }
                                      }
                                      fauxControlRef={[Function]}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      size="small"
                                      tabIndex={0}
                                    >
                                      <FauxControl
                                        afterItems={
                                          Array [
                                            <IconArrowDropdownDown
                                              css={
                                                Object {
                                                  "margin": "0.25em",
                                                }
                                              }
                                              size="medium"
                                            />,
                                            <input
                                              name={undefined}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-102-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-102-content"
                                        className="css-3"
                                        control={[Function]}
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="small"
                                        tabIndex={0}
                                      >
                                        <FauxControl
                                          aria-describedby="select-102-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-102-content"
                                          className="css-3"
                                          control={[Function]}
                                          innerRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          tabIndex={0}
                                        >
                                          <div
                                            aria-describedby="select-102-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-102-content"
                                            className="css-7"
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            tabIndex={0}
                                          >
                                            <glamorous(Trigger)
                                              controlPropsIn={
                                                Object {
                                                  "hasPlaceholder": true,
                                                  "variant": undefined,
                                                }
                                              }
                                              hasPlaceholder={true}
                                              key="control"
                                              size="small"
                                            >
                                              <div
                                                className="css-37"
                                              >
                                                <TriggerContent>
                                                  <span
                                                    className="css-34"
                                                  >
                                                    Small
                                                  </span>
                                                </TriggerContent>
                                              </div>
                                            </glamorous(Trigger)>
                                            <IconArrowDropdownDown
                                              css={
                                                Object {
                                                  "margin": "0.25em",
                                                }
                                              }
                                              key="arrow"
                                              size="medium"
                                            >
                                              <Icon
                                                css={
                                                  Object {
                                                    "margin": "0.25em",
                                                  }
                                                }
                                                rtl={false}
                                                size="medium"
                                              >
                                                <glamorous(svg)
                                                  aria-hidden={true}
                                                  css={
                                                    Object {
                                                      "margin": "0.25em",
                                                    }
                                                  }
                                                  role="img"
                                                  rtl={false}
                                                  size="medium"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="css-51"
                                                    role="img"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <g>
                                                      <path
                                                        d="M12 17.5l-8-8h16z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </glamorous(svg)>
                                              </Icon>
                                            </IconArrowDropdownDown>
                                            <input
                                              key="input"
                                              type="hidden"
                                              value=""
                                            />
                                            <Underlay>
                                              <div
                                                className="css-36"
                                              />
                                            </Underlay>
                                          </div>
                                        </FauxControl>
                                      </FauxControl>
                                    </SelectTrigger>
                                  </SelectTrigger>
                                </span>
                              </Target>
                            </PopoverTrigger>
                          </PopoverTrigger>
                        </span>
                      </Manager>
                    </Popover>
                  </Popover>
                </Dropdown>
              </ThemeProvider>
            </ThemeProvider>
          </Themed(Dropdown)>
        </ThemedComponent>
      </Select>
    </Select>
    <Select
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      placeholder="Medium"
      placement="bottom-start"
      size="medium"
    >
      <Select
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        getItemProps={[Function]}
        getMenuProps={[Function]}
        getTriggerProps={[Function]}
        id="select-104"
        isOpen={false}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placement="bottom-start"
      >
        <ThemedComponent
          className="css-0"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          getItemProps={[Function]}
          getMenuProps={[Function]}
          getTriggerProps={[Function]}
          id="select-104"
          isOpen={false}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placement="bottom-start"
        >
          <Themed(Dropdown)
            className="css-0"
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            getItemProps={[Function]}
            getMenuProps={[Function]}
            getTriggerProps={[Function]}
            id="select-104"
            isOpen={false}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onClose={[Function]}
            onOpen={[Function]}
            placement="bottom-start"
          >
            <ThemeProvider>
              <ThemeProvider>
                <Dropdown
                  className="css-0"
                  data={
                    Array [
                      Object {
                        "text": "Alpha",
                        "value": "alpha",
                      },
                      Object {
                        "text": "Beta",
                        "value": "beta",
                      },
                      Object {
                        "text": "Gamma",
                        "value": "gamma",
                      },
                    ]
                  }
                  getItemProps={[Function]}
                  getMenuProps={[Function]}
                  getTriggerProps={[Function]}
                  id="select-104"
                  isOpen={false}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placement="bottom-start"
                >
                  <Popover
                    className="css-0"
                    content={
                      <DropdownContent
                        data={
                          Array [
                            Object {
                              "text": "Alpha",
                              "value": "alpha",
                            },
                            Object {
                              "text": "Beta",
                              "value": "beta",
                            },
                            Object {
                              "text": "Gamma",
                              "value": "gamma",
                            },
                          ]
                        }
                        getItemProps={[Function]}
                        getMenuProps={[Function]}
                        id="select-104-content"
                        modifiers={
                          Object {
                            "contentWidth": Object {
                              "enabled": true,
                              "fn": [Function],
                            },
                          }
                        }
                        placement="bottom-start"
                        wide={undefined}
                      />
                    }
                    focusTriggerOnClose={true}
                    getItemProps={[Function]}
                    getMenuProps={[Function]}
                    getTriggerProps={[Function]}
                    hasArrow={true}
                    id="select-104"
                    isOpen={false}
                    onClose={[Function]}
                    onOpen={[Function]}
                    placement="bottom"
                    triggerRef={[Function]}
                    wrapContent={false}
                  >
                    <Popover
                      className="css-0"
                      content={
                        <DropdownContent
                          data={
                            Array [
                              Object {
                                "text": "Alpha",
                                "value": "alpha",
                              },
                              Object {
                                "text": "Beta",
                                "value": "beta",
                              },
                              Object {
                                "text": "Gamma",
                                "value": "gamma",
                              },
                            ]
                          }
                          getItemProps={[Function]}
                          getMenuProps={[Function]}
                          id="select-104-content"
                          modifiers={
                            Object {
                              "contentWidth": Object {
                                "enabled": true,
                                "fn": [Function],
                              },
                            }
                          }
                          placement="bottom-start"
                          wide={undefined}
                        />
                      }
                      focusTriggerOnClose={true}
                      getItemProps={[Function]}
                      getMenuProps={[Function]}
                      getTriggerProps={[Function]}
                      hasArrow={true}
                      id="select-104"
                      isOpen={false}
                      onClose={[Function]}
                      onOpen={[Function]}
                      placement="bottom"
                      tag="span"
                      triggerRef={[Function]}
                      wrapContent={false}
                    >
                      <Manager
                        className="css-1"
                        id="select-104"
                        tag="span"
                      >
                        <span
                          className="css-1"
                          id="select-104"
                        >
                          <PopoverTrigger
                            aria-describedby="select-104-content"
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            aria-owns="select-104-content"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            <PopoverTrigger
                              component="span"
                            >
                              <Target
                                className="css-2"
                                component="span"
                              >
                                <span
                                  className="css-2"
                                >
                                  <SelectTrigger
                                    aria-describedby="select-104-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-104-content"
                                    isOpen={false}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    placeholder="Medium"
                                    role="button"
                                    size="medium"
                                    tabIndex={0}
                                    triggerRef={[Function]}
                                  >
                                    <SelectTrigger
                                      afterItems={
                                        Array [
                                          <IconArrowDropdownDown
                                            css={
                                              Object {
                                                "margin": "0.5em",
                                              }
                                            }
                                            size="medium"
                                          />,
                                          <input
                                            name={undefined}
                                            type="hidden"
                                            value=""
                                          />,
                                        ]
                                      }
                                      aria-describedby="select-104-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-104-content"
                                      control={[Function]}
                                      controlProps={
                                        Object {
                                          "hasPlaceholder": true,
                                          "variant": undefined,
                                        }
                                      }
                                      fauxControlRef={[Function]}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      size="medium"
                                      tabIndex={0}
                                    >
                                      <FauxControl
                                        afterItems={
                                          Array [
                                            <IconArrowDropdownDown
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              size="medium"
                                            />,
                                            <input
                                              name={undefined}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-104-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-104-content"
                                        className="css-3"
                                        control={[Function]}
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="medium"
                                        tabIndex={0}
                                      >
                                        <FauxControl
                                          aria-describedby="select-104-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-104-content"
                                          className="css-3"
                                          control={[Function]}
                                          innerRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          tabIndex={0}
                                        >
                                          <div
                                            aria-describedby="select-104-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-104-content"
                                            className="css-7"
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            tabIndex={0}
                                          >
                                            <glamorous(Trigger)
                                              controlPropsIn={
                                                Object {
                                                  "hasPlaceholder": true,
                                                  "variant": undefined,
                                                }
                                              }
                                              hasPlaceholder={true}
                                              key="control"
                                              size="medium"
                                            >
                                              <div
                                                className="css-52"
                                              >
                                                <TriggerContent>
                                                  <span
                                                    className="css-34"
                                                  >
                                                    Medium
                                                  </span>
                                                </TriggerContent>
                                              </div>
                                            </glamorous(Trigger)>
                                            <IconArrowDropdownDown
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              key="arrow"
                                              size="medium"
                                            >
                                              <Icon
                                                css={
                                                  Object {
                                                    "margin": "0.5em",
                                                  }
                                                }
                                                rtl={false}
                                                size="medium"
                                              >
                                                <glamorous(svg)
                                                  aria-hidden={true}
                                                  css={
                                                    Object {
                                                      "margin": "0.5em",
                                                    }
                                                  }
                                                  role="img"
                                                  rtl={false}
                                                  size="medium"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="css-66"
                                                    role="img"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <g>
                                                      <path
                                                        d="M12 17.5l-8-8h16z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </glamorous(svg)>
                                              </Icon>
                                            </IconArrowDropdownDown>
                                            <input
                                              key="input"
                                              type="hidden"
                                              value=""
                                            />
                                            <Underlay>
                                              <div
                                                className="css-36"
                                              />
                                            </Underlay>
                                          </div>
                                        </FauxControl>
                                      </FauxControl>
                                    </SelectTrigger>
                                  </SelectTrigger>
                                </span>
                              </Target>
                            </PopoverTrigger>
                          </PopoverTrigger>
                        </span>
                      </Manager>
                    </Popover>
                  </Popover>
                </Dropdown>
              </ThemeProvider>
            </ThemeProvider>
          </Themed(Dropdown)>
        </ThemedComponent>
      </Select>
    </Select>
    <Select
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      placeholder="Large"
      placement="bottom-start"
      size="large"
    >
      <Select
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        getItemProps={[Function]}
        getMenuProps={[Function]}
        getTriggerProps={[Function]}
        id="select-106"
        isOpen={false}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placement="bottom-start"
      >
        <ThemedComponent
          className="css-0"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          getItemProps={[Function]}
          getMenuProps={[Function]}
          getTriggerProps={[Function]}
          id="select-106"
          isOpen={false}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placement="bottom-start"
        >
          <Themed(Dropdown)
            className="css-0"
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            getItemProps={[Function]}
            getMenuProps={[Function]}
            getTriggerProps={[Function]}
            id="select-106"
            isOpen={false}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onClose={[Function]}
            onOpen={[Function]}
            placement="bottom-start"
          >
            <ThemeProvider>
              <ThemeProvider>
                <Dropdown
                  className="css-0"
                  data={
                    Array [
                      Object {
                        "text": "Alpha",
                        "value": "alpha",
                      },
                      Object {
                        "text": "Beta",
                        "value": "beta",
                      },
                      Object {
                        "text": "Gamma",
                        "value": "gamma",
                      },
                    ]
                  }
                  getItemProps={[Function]}
                  getMenuProps={[Function]}
                  getTriggerProps={[Function]}
                  id="select-106"
                  isOpen={false}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placement="bottom-start"
                >
                  <Popover
                    className="css-0"
                    content={
                      <DropdownContent
                        data={
                          Array [
                            Object {
                              "text": "Alpha",
                              "value": "alpha",
                            },
                            Object {
                              "text": "Beta",
                              "value": "beta",
                            },
                            Object {
                              "text": "Gamma",
                              "value": "gamma",
                            },
                          ]
                        }
                        getItemProps={[Function]}
                        getMenuProps={[Function]}
                        id="select-106-content"
                        modifiers={
                          Object {
                            "contentWidth": Object {
                              "enabled": true,
                              "fn": [Function],
                            },
                          }
                        }
                        placement="bottom-start"
                        wide={undefined}
                      />
                    }
                    focusTriggerOnClose={true}
                    getItemProps={[Function]}
                    getMenuProps={[Function]}
                    getTriggerProps={[Function]}
                    hasArrow={true}
                    id="select-106"
                    isOpen={false}
                    onClose={[Function]}
                    onOpen={[Function]}
                    placement="bottom"
                    triggerRef={[Function]}
                    wrapContent={false}
                  >
                    <Popover
                      className="css-0"
                      content={
                        <DropdownContent
                          data={
                            Array [
                              Object {
                                "text": "Alpha",
                                "value": "alpha",
                              },
                              Object {
                                "text": "Beta",
                                "value": "beta",
                              },
                              Object {
                                "text": "Gamma",
                                "value": "gamma",
                              },
                            ]
                          }
                          getItemProps={[Function]}
                          getMenuProps={[Function]}
                          id="select-106-content"
                          modifiers={
                            Object {
                              "contentWidth": Object {
                                "enabled": true,
                                "fn": [Function],
                              },
                            }
                          }
                          placement="bottom-start"
                          wide={undefined}
                        />
                      }
                      focusTriggerOnClose={true}
                      getItemProps={[Function]}
                      getMenuProps={[Function]}
                      getTriggerProps={[Function]}
                      hasArrow={true}
                      id="select-106"
                      isOpen={false}
                      onClose={[Function]}
                      onOpen={[Function]}
                      placement="bottom"
                      tag="span"
                      triggerRef={[Function]}
                      wrapContent={false}
                    >
                      <Manager
                        className="css-1"
                        id="select-106"
                        tag="span"
                      >
                        <span
                          className="css-1"
                          id="select-106"
                        >
                          <PopoverTrigger
                            aria-describedby="select-106-content"
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            aria-owns="select-106-content"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            <PopoverTrigger
                              component="span"
                            >
                              <Target
                                className="css-2"
                                component="span"
                              >
                                <span
                                  className="css-2"
                                >
                                  <SelectTrigger
                                    aria-describedby="select-106-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-106-content"
                                    isOpen={false}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    placeholder="Large"
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                    triggerRef={[Function]}
                                  >
                                    <SelectTrigger
                                      afterItems={
                                        Array [
                                          <IconArrowDropdownDown
                                            css={
                                              Object {
                                                "margin": "0.5em",
                                              }
                                            }
                                            size="1.5em"
                                          />,
                                          <input
                                            name={undefined}
                                            type="hidden"
                                            value=""
                                          />,
                                        ]
                                      }
                                      aria-describedby="select-106-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-106-content"
                                      control={[Function]}
                                      controlProps={
                                        Object {
                                          "hasPlaceholder": true,
                                          "variant": undefined,
                                        }
                                      }
                                      fauxControlRef={[Function]}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                    >
                                      <FauxControl
                                        afterItems={
                                          Array [
                                            <IconArrowDropdownDown
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              size="1.5em"
                                            />,
                                            <input
                                              name={undefined}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-106-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-106-content"
                                        className="css-3"
                                        control={[Function]}
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                      >
                                        <FauxControl
                                          aria-describedby="select-106-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-106-content"
                                          className="css-3"
                                          control={[Function]}
                                          innerRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          tabIndex={0}
                                        >
                                          <div
                                            aria-describedby="select-106-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-106-content"
                                            className="css-7"
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            tabIndex={0}
                                          >
                                            <glamorous(Trigger)
                                              controlPropsIn={
                                                Object {
                                                  "hasPlaceholder": true,
                                                  "variant": undefined,
                                                }
                                              }
                                              hasPlaceholder={true}
                                              key="control"
                                              size="large"
                                            >
                                              <div
                                                className="css-20"
                                              >
                                                <TriggerContent>
                                                  <span
                                                    className="css-34"
                                                  >
                                                    Large
                                                  </span>
                                                </TriggerContent>
                                              </div>
                                            </glamorous(Trigger)>
                                            <IconArrowDropdownDown
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              key="arrow"
                                              size="1.5em"
                                            >
                                              <Icon
                                                css={
                                                  Object {
                                                    "margin": "0.5em",
                                                  }
                                                }
                                                rtl={false}
                                                size="1.5em"
                                              >
                                                <glamorous(svg)
                                                  aria-hidden={true}
                                                  css={
                                                    Object {
                                                      "margin": "0.5em",
                                                    }
                                                  }
                                                  role="img"
                                                  rtl={false}
                                                  size="1.5em"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="css-35"
                                                    role="img"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <g>
                                                      <path
                                                        d="M12 17.5l-8-8h16z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </glamorous(svg)>
                                              </Icon>
                                            </IconArrowDropdownDown>
                                            <input
                                              key="input"
                                              type="hidden"
                                              value=""
                                            />
                                            <Underlay>
                                              <div
                                                className="css-36"
                                              />
                                            </Underlay>
                                          </div>
                                        </FauxControl>
                                      </FauxControl>
                                    </SelectTrigger>
                                  </SelectTrigger>
                                </span>
                              </Target>
                            </PopoverTrigger>
                          </PopoverTrigger>
                        </span>
                      </Manager>
                    </Popover>
                  </Popover>
                </Dropdown>
              </ThemeProvider>
            </ThemeProvider>
          </Themed(Dropdown)>
        </ThemedComponent>
      </Select>
    </Select>
    <Select
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      placeholder="Jumbo"
      placement="bottom-start"
      size="jumbo"
    >
      <Select
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        getItemProps={[Function]}
        getMenuProps={[Function]}
        getTriggerProps={[Function]}
        id="select-108"
        isOpen={false}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placement="bottom-start"
      >
        <ThemedComponent
          className="css-0"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          getItemProps={[Function]}
          getMenuProps={[Function]}
          getTriggerProps={[Function]}
          id="select-108"
          isOpen={false}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placement="bottom-start"
        >
          <Themed(Dropdown)
            className="css-0"
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            getItemProps={[Function]}
            getMenuProps={[Function]}
            getTriggerProps={[Function]}
            id="select-108"
            isOpen={false}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onClose={[Function]}
            onOpen={[Function]}
            placement="bottom-start"
          >
            <ThemeProvider>
              <ThemeProvider>
                <Dropdown
                  className="css-0"
                  data={
                    Array [
                      Object {
                        "text": "Alpha",
                        "value": "alpha",
                      },
                      Object {
                        "text": "Beta",
                        "value": "beta",
                      },
                      Object {
                        "text": "Gamma",
                        "value": "gamma",
                      },
                    ]
                  }
                  getItemProps={[Function]}
                  getMenuProps={[Function]}
                  getTriggerProps={[Function]}
                  id="select-108"
                  isOpen={false}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placement="bottom-start"
                >
                  <Popover
                    className="css-0"
                    content={
                      <DropdownContent
                        data={
                          Array [
                            Object {
                              "text": "Alpha",
                              "value": "alpha",
                            },
                            Object {
                              "text": "Beta",
                              "value": "beta",
                            },
                            Object {
                              "text": "Gamma",
                              "value": "gamma",
                            },
                          ]
                        }
                        getItemProps={[Function]}
                        getMenuProps={[Function]}
                        id="select-108-content"
                        modifiers={
                          Object {
                            "contentWidth": Object {
                              "enabled": true,
                              "fn": [Function],
                            },
                          }
                        }
                        placement="bottom-start"
                        wide={undefined}
                      />
                    }
                    focusTriggerOnClose={true}
                    getItemProps={[Function]}
                    getMenuProps={[Function]}
                    getTriggerProps={[Function]}
                    hasArrow={true}
                    id="select-108"
                    isOpen={false}
                    onClose={[Function]}
                    onOpen={[Function]}
                    placement="bottom"
                    triggerRef={[Function]}
                    wrapContent={false}
                  >
                    <Popover
                      className="css-0"
                      content={
                        <DropdownContent
                          data={
                            Array [
                              Object {
                                "text": "Alpha",
                                "value": "alpha",
                              },
                              Object {
                                "text": "Beta",
                                "value": "beta",
                              },
                              Object {
                                "text": "Gamma",
                                "value": "gamma",
                              },
                            ]
                          }
                          getItemProps={[Function]}
                          getMenuProps={[Function]}
                          id="select-108-content"
                          modifiers={
                            Object {
                              "contentWidth": Object {
                                "enabled": true,
                                "fn": [Function],
                              },
                            }
                          }
                          placement="bottom-start"
                          wide={undefined}
                        />
                      }
                      focusTriggerOnClose={true}
                      getItemProps={[Function]}
                      getMenuProps={[Function]}
                      getTriggerProps={[Function]}
                      hasArrow={true}
                      id="select-108"
                      isOpen={false}
                      onClose={[Function]}
                      onOpen={[Function]}
                      placement="bottom"
                      tag="span"
                      triggerRef={[Function]}
                      wrapContent={false}
                    >
                      <Manager
                        className="css-1"
                        id="select-108"
                        tag="span"
                      >
                        <span
                          className="css-1"
                          id="select-108"
                        >
                          <PopoverTrigger
                            aria-describedby="select-108-content"
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            aria-owns="select-108-content"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            <PopoverTrigger
                              component="span"
                            >
                              <Target
                                className="css-2"
                                component="span"
                              >
                                <span
                                  className="css-2"
                                >
                                  <SelectTrigger
                                    aria-describedby="select-108-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-108-content"
                                    isOpen={false}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    placeholder="Jumbo"
                                    role="button"
                                    size="jumbo"
                                    tabIndex={0}
                                    triggerRef={[Function]}
                                  >
                                    <SelectTrigger
                                      afterItems={
                                        Array [
                                          <IconArrowDropdownDown
                                            css={
                                              Object {
                                                "margin": "0.875em",
                                              }
                                            }
                                            size="1.5em"
                                          />,
                                          <input
                                            name={undefined}
                                            type="hidden"
                                            value=""
                                          />,
                                        ]
                                      }
                                      aria-describedby="select-108-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-108-content"
                                      control={[Function]}
                                      controlProps={
                                        Object {
                                          "hasPlaceholder": true,
                                          "variant": undefined,
                                        }
                                      }
                                      fauxControlRef={[Function]}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      size="jumbo"
                                      tabIndex={0}
                                    >
                                      <FauxControl
                                        afterItems={
                                          Array [
                                            <IconArrowDropdownDown
                                              css={
                                                Object {
                                                  "margin": "0.875em",
                                                }
                                              }
                                              size="1.5em"
                                            />,
                                            <input
                                              name={undefined}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-108-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-108-content"
                                        className="css-3"
                                        control={[Function]}
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="jumbo"
                                        tabIndex={0}
                                      >
                                        <FauxControl
                                          aria-describedby="select-108-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-108-content"
                                          className="css-3"
                                          control={[Function]}
                                          innerRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          tabIndex={0}
                                        >
                                          <div
                                            aria-describedby="select-108-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-108-content"
                                            className="css-7"
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            tabIndex={0}
                                          >
                                            <glamorous(Trigger)
                                              controlPropsIn={
                                                Object {
                                                  "hasPlaceholder": true,
                                                  "variant": undefined,
                                                }
                                              }
                                              hasPlaceholder={true}
                                              key="control"
                                              size="jumbo"
                                            >
                                              <div
                                                className="css-67"
                                              >
                                                <TriggerContent>
                                                  <span
                                                    className="css-34"
                                                  >
                                                    Jumbo
                                                  </span>
                                                </TriggerContent>
                                              </div>
                                            </glamorous(Trigger)>
                                            <IconArrowDropdownDown
                                              css={
                                                Object {
                                                  "margin": "0.875em",
                                                }
                                              }
                                              key="arrow"
                                              size="1.5em"
                                            >
                                              <Icon
                                                css={
                                                  Object {
                                                    "margin": "0.875em",
                                                  }
                                                }
                                                rtl={false}
                                                size="1.5em"
                                              >
                                                <glamorous(svg)
                                                  aria-hidden={true}
                                                  css={
                                                    Object {
                                                      "margin": "0.875em",
                                                    }
                                                  }
                                                  role="img"
                                                  rtl={false}
                                                  size="1.5em"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="css-81"
                                                    role="img"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <g>
                                                      <path
                                                        d="M12 17.5l-8-8h16z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </glamorous(svg)>
                                              </Icon>
                                            </IconArrowDropdownDown>
                                            <input
                                              key="input"
                                              type="hidden"
                                              value=""
                                            />
                                            <Underlay>
                                              <div
                                                className="css-36"
                                              />
                                            </Underlay>
                                          </div>
                                        </FauxControl>
                                      </FauxControl>
                                    </SelectTrigger>
                                  </SelectTrigger>
                                </span>
                              </Target>
                            </PopoverTrigger>
                          </PopoverTrigger>
                        </span>
                      </Manager>
                    </Popover>
                  </Popover>
                </Dropdown>
              </ThemeProvider>
            </ThemeProvider>
          </Themed(Dropdown)>
        </ThemedComponent>
      </Select>
    </Select>
  </div>
</glamorous(div)>
`;

exports[`Select demo examples trigger-ref 1`] = `
.css-0,
[data-css-0] {
  width: 100%;
}

.css-0 > span,
[data-css-0] > span {
  width: 100%;
}

.css-1,
[data-css-1] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: inline-block;
  width: 100%;
}

.css-1 *,
[data-css-1] *,
.css-1 *::before,
[data-css-1] *::before,
.css-1 *::after,
[data-css-1] *::after {
  box-sizing: inherit;
}

.css-1 > span,
[data-css-1] > span {
  width: 100%;
}

.css-2,
[data-css-2] {
  display: inline-block;
}

.css-3,
[data-css-3] {
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-3 [role="img"],
[data-css-3] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-3 [role="img"]:first-child,
[data-css-3] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-3 :not([role="img"]) ~ [role="img"],
[data-css-3] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-3 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-3] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-7,
[data-css-7] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-7 *,
[data-css-7] *,
.css-7 *::before,
[data-css-7] *::before,
.css-7 *::after,
[data-css-7] *::after {
  box-sizing: inherit;
}

.css-7:hover > div:last-child,
[data-css-7]:hover > div:last-child,
.css-7[data-simulate-hover] > div:last-child,
[data-css-7][data-simulate-hover] > div:last-child {
  border-color: #2e6fd9;
}

.css-7:focus > div:last-child,
[data-css-7]:focus > div:last-child,
.css-7[data-simulate-focus] > div:last-child,
[data-css-7][data-simulate-focus] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7:active > div:last-child,
[data-css-7]:active > div:last-child,
.css-7[data-simulate-active] > div:last-child,
[data-css-7][data-simulate-active] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7 [role="img"],
[data-css-7] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-7 [role="img"]:first-child,
[data-css-7] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-7 :not([role="img"]) ~ [role="img"],
[data-css-7] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-7 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-7] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-20,
[data-css-20] {
  align-items: center;
  color: #8e99ab;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  font-style: italic;
  height: 2.857142857142857em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-20::placeholder,
[data-css-20]::placeholder,
.css-20[data-simulate-placeholder],
[data-css-20][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-input-placeholder,
[data-css-20]::-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20:-ms-input-placeholder,
[data-css-20]:-ms-input-placeholder,
.css-20[data-simulate-msinputplaceholder],
[data-css-20][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-20::-ms-clear,
[data-css-20]::-ms-clear,
.css-20[data-simulate-msclear],
[data-css-20][data-simulate-msclear] {
  display: none;
}

.css-20:focus ~ div:last-child,
[data-css-20]:focus ~ div:last-child,
.css-20[data-simulate-focus] ~ div:last-child,
[data-css-20][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-34,
[data-css-34] {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  user-select: none;
  width: 100%;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.css-35,
[data-css-35] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.css-36,
[data-css-36] {
  background-color: #fff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.css-37,
[data-css-37] {
  align-items: center;
  display: -webkit-inline-box;
  display: -moz-inline-box;
  display: -ms-inline-flexbox;
  display: -webkit-inline-flex;
  display: inline-flex;
  justify-content: center;
  max-height: 100%;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
}

.css-38,
[data-css-38] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ebeff5;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  min-width: 2.5em;
  padding: 0 0.5em;
  text-decoration: none;
  vertical-align: middle;
}

.css-38 *,
[data-css-38] *,
.css-38 *::before,
[data-css-38] *::before,
.css-38 *::after,
[data-css-38] *::after {
  box-sizing: inherit;
}

.css-38:focus,
[data-css-38]:focus,
.css-38[data-simulate-focus],
[data-css-38][data-simulate-focus] {
  background-color: #ebeff5;
  border-color: #fff;
  box-shadow: 0 0 0 1px #2e6fd9;
  color: #333840;
  text-decoration: none;
}

.css-38:hover,
[data-css-38]:hover,
.css-38[data-simulate-hover],
[data-css-38][data-simulate-hover] {
  background-color: #f5f7fa;
  color: #333840;
  text-decoration: none;
}

.css-38:active,
[data-css-38]:active,
.css-38[data-simulate-active],
[data-css-38][data-simulate-active] {
  background-color: #dde3ed;
  color: #333840;
}

.css-38::-moz-focus-inner,
[data-css-38]::-moz-focus-inner,
.css-38[data-simulate-mozfocusinner],
[data-css-38][data-simulate-mozfocusinner] {
  border: 0;
}

.css-38 [role="img"],
[data-css-38] [role="img"] {
  box-sizing: content-box;
  fill: #2e6fd9;
  display: block;
}

.css-38 [role="img"]:first-child,
[data-css-38] [role="img"]:first-child {
  margin-right: 0.5em;
}

.css-38 [role="img"]:last-child,
[data-css-38] [role="img"]:last-child {
  margin-left: 0.5em;
}

.css-38 [role="img"]:only-child,
[data-css-38] [role="img"]:only-child {
  margin: 0;
}

.css-52,
[data-css-52] {
  display: block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  font-size: 0.875em;
  line-height: 2.857142857142857em;
}

.css-52:first-child,
[data-css-52]:first-child,
.css-52[data-simulate-firstchild],
[data-css-52][data-simulate-firstchild] {
  padding-left: 0.5714285714285714em;
}

.css-52:last-child,
[data-css-52]:last-child,
.css-52[data-simulate-lastchild],
[data-css-52][data-simulate-lastchild] {
  padding-right: 0.5714285714285714em;
}

<Component>
  <MyForm>
    <glamorous(div)>
      <div
        className="css-1p1xtzc"
      >
        <Select
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          placeholder="Select..."
          placement="bottom-start"
          size="large"
          triggerRef={[Function]}
        >
          <Select
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            getItemProps={[Function]}
            getMenuProps={[Function]}
            getTriggerProps={[Function]}
            id="select-127"
            isOpen={false}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onClose={[Function]}
            onOpen={[Function]}
            placement="bottom-start"
          >
            <ThemedComponent
              className="css-0"
              data={
                Array [
                  Object {
                    "text": "Alpha",
                    "value": "alpha",
                  },
                  Object {
                    "text": "Beta",
                    "value": "beta",
                  },
                  Object {
                    "text": "Gamma",
                    "value": "gamma",
                  },
                ]
              }
              getItemProps={[Function]}
              getMenuProps={[Function]}
              getTriggerProps={[Function]}
              id="select-127"
              isOpen={false}
              modifiers={
                Object {
                  "contentWidth": Object {
                    "enabled": true,
                    "fn": [Function],
                  },
                }
              }
              onClose={[Function]}
              onOpen={[Function]}
              placement="bottom-start"
            >
              <Themed(Dropdown)
                className="css-0"
                data={
                  Array [
                    Object {
                      "text": "Alpha",
                      "value": "alpha",
                    },
                    Object {
                      "text": "Beta",
                      "value": "beta",
                    },
                    Object {
                      "text": "Gamma",
                      "value": "gamma",
                    },
                  ]
                }
                getItemProps={[Function]}
                getMenuProps={[Function]}
                getTriggerProps={[Function]}
                id="select-127"
                isOpen={false}
                modifiers={
                  Object {
                    "contentWidth": Object {
                      "enabled": true,
                      "fn": [Function],
                    },
                  }
                }
                onClose={[Function]}
                onOpen={[Function]}
                placement="bottom-start"
              >
                <ThemeProvider>
                  <ThemeProvider>
                    <Dropdown
                      className="css-0"
                      data={
                        Array [
                          Object {
                            "text": "Alpha",
                            "value": "alpha",
                          },
                          Object {
                            "text": "Beta",
                            "value": "beta",
                          },
                          Object {
                            "text": "Gamma",
                            "value": "gamma",
                          },
                        ]
                      }
                      getItemProps={[Function]}
                      getMenuProps={[Function]}
                      getTriggerProps={[Function]}
                      id="select-127"
                      isOpen={false}
                      modifiers={
                        Object {
                          "contentWidth": Object {
                            "enabled": true,
                            "fn": [Function],
                          },
                        }
                      }
                      onClose={[Function]}
                      onOpen={[Function]}
                      placement="bottom-start"
                    >
                      <Popover
                        className="css-0"
                        content={
                          <DropdownContent
                            data={
                              Array [
                                Object {
                                  "text": "Alpha",
                                  "value": "alpha",
                                },
                                Object {
                                  "text": "Beta",
                                  "value": "beta",
                                },
                                Object {
                                  "text": "Gamma",
                                  "value": "gamma",
                                },
                              ]
                            }
                            getItemProps={[Function]}
                            getMenuProps={[Function]}
                            id="select-127-content"
                            modifiers={
                              Object {
                                "contentWidth": Object {
                                  "enabled": true,
                                  "fn": [Function],
                                },
                              }
                            }
                            placement="bottom-start"
                            wide={undefined}
                          />
                        }
                        focusTriggerOnClose={true}
                        getItemProps={[Function]}
                        getMenuProps={[Function]}
                        getTriggerProps={[Function]}
                        hasArrow={true}
                        id="select-127"
                        isOpen={false}
                        onClose={[Function]}
                        onOpen={[Function]}
                        placement="bottom"
                        triggerRef={[Function]}
                        wrapContent={false}
                      >
                        <Popover
                          className="css-0"
                          content={
                            <DropdownContent
                              data={
                                Array [
                                  Object {
                                    "text": "Alpha",
                                    "value": "alpha",
                                  },
                                  Object {
                                    "text": "Beta",
                                    "value": "beta",
                                  },
                                  Object {
                                    "text": "Gamma",
                                    "value": "gamma",
                                  },
                                ]
                              }
                              getItemProps={[Function]}
                              getMenuProps={[Function]}
                              id="select-127-content"
                              modifiers={
                                Object {
                                  "contentWidth": Object {
                                    "enabled": true,
                                    "fn": [Function],
                                  },
                                }
                              }
                              placement="bottom-start"
                              wide={undefined}
                            />
                          }
                          focusTriggerOnClose={true}
                          getItemProps={[Function]}
                          getMenuProps={[Function]}
                          getTriggerProps={[Function]}
                          hasArrow={true}
                          id="select-127"
                          isOpen={false}
                          onClose={[Function]}
                          onOpen={[Function]}
                          placement="bottom"
                          tag="span"
                          triggerRef={[Function]}
                          wrapContent={false}
                        >
                          <Manager
                            className="css-1"
                            id="select-127"
                            tag="span"
                          >
                            <span
                              className="css-1"
                              id="select-127"
                            >
                              <PopoverTrigger
                                aria-describedby="select-127-content"
                                aria-expanded={false}
                                aria-haspopup="listbox"
                                aria-owns="select-127-content"
                                onBlur={[Function]}
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                role="button"
                                tabIndex={0}
                              >
                                <PopoverTrigger
                                  component="span"
                                >
                                  <Target
                                    className="css-2"
                                    component="span"
                                  >
                                    <span
                                      className="css-2"
                                    >
                                      <SelectTrigger
                                        aria-describedby="select-127-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-127-content"
                                        isOpen={false}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        placeholder="Select..."
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                        triggerRef={[Function]}
                                      >
                                        <SelectTrigger
                                          afterItems={
                                            Array [
                                              <IconArrowDropdownDown
                                                css={
                                                  Object {
                                                    "margin": "0.5em",
                                                  }
                                                }
                                                size="1.5em"
                                              />,
                                              <input
                                                name={undefined}
                                                type="hidden"
                                                value=""
                                              />,
                                            ]
                                          }
                                          aria-describedby="select-127-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-127-content"
                                          control={[Function]}
                                          controlProps={
                                            Object {
                                              "hasPlaceholder": true,
                                              "variant": undefined,
                                            }
                                          }
                                          fauxControlRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          size="large"
                                          tabIndex={0}
                                        >
                                          <FauxControl
                                            afterItems={
                                              Array [
                                                <IconArrowDropdownDown
                                                  css={
                                                    Object {
                                                      "margin": "0.5em",
                                                    }
                                                  }
                                                  size="1.5em"
                                                />,
                                                <input
                                                  name={undefined}
                                                  type="hidden"
                                                  value=""
                                                />,
                                              ]
                                            }
                                            aria-describedby="select-127-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-127-content"
                                            className="css-3"
                                            control={[Function]}
                                            controlProps={
                                              Object {
                                                "hasPlaceholder": true,
                                                "variant": undefined,
                                              }
                                            }
                                            fauxControlRef={[Function]}
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            size="large"
                                            tabIndex={0}
                                          >
                                            <FauxControl
                                              aria-describedby="select-127-content"
                                              aria-expanded={false}
                                              aria-haspopup="listbox"
                                              aria-owns="select-127-content"
                                              className="css-3"
                                              control={[Function]}
                                              innerRef={[Function]}
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onKeyDown={[Function]}
                                              onKeyUp={[Function]}
                                              role="button"
                                              tabIndex={0}
                                            >
                                              <div
                                                aria-describedby="select-127-content"
                                                aria-expanded={false}
                                                aria-haspopup="listbox"
                                                aria-owns="select-127-content"
                                                className="css-7"
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                role="button"
                                                tabIndex={0}
                                              >
                                                <glamorous(Trigger)
                                                  controlPropsIn={
                                                    Object {
                                                      "hasPlaceholder": true,
                                                      "variant": undefined,
                                                    }
                                                  }
                                                  hasPlaceholder={true}
                                                  key="control"
                                                  size="large"
                                                >
                                                  <div
                                                    className="css-20"
                                                  >
                                                    <TriggerContent>
                                                      <span
                                                        className="css-34"
                                                      >
                                                        Select...
                                                      </span>
                                                    </TriggerContent>
                                                  </div>
                                                </glamorous(Trigger)>
                                                <IconArrowDropdownDown
                                                  css={
                                                    Object {
                                                      "margin": "0.5em",
                                                    }
                                                  }
                                                  key="arrow"
                                                  size="1.5em"
                                                >
                                                  <Icon
                                                    css={
                                                      Object {
                                                        "margin": "0.5em",
                                                      }
                                                    }
                                                    rtl={false}
                                                    size="1.5em"
                                                  >
                                                    <glamorous(svg)
                                                      aria-hidden={true}
                                                      css={
                                                        Object {
                                                          "margin": "0.5em",
                                                        }
                                                      }
                                                      role="img"
                                                      rtl={false}
                                                      size="1.5em"
                                                      viewBox="0 0 24 24"
                                                    >
                                                      <svg
                                                        aria-hidden={true}
                                                        className="css-35"
                                                        role="img"
                                                        viewBox="0 0 24 24"
                                                      >
                                                        <g>
                                                          <path
                                                            d="M12 17.5l-8-8h16z"
                                                          />
                                                        </g>
                                                      </svg>
                                                    </glamorous(svg)>
                                                  </Icon>
                                                </IconArrowDropdownDown>
                                                <input
                                                  key="input"
                                                  type="hidden"
                                                  value=""
                                                />
                                                <Underlay>
                                                  <div
                                                    className="css-36"
                                                  />
                                                </Underlay>
                                              </div>
                                            </FauxControl>
                                          </FauxControl>
                                        </SelectTrigger>
                                      </SelectTrigger>
                                    </span>
                                  </Target>
                                </PopoverTrigger>
                              </PopoverTrigger>
                            </span>
                          </Manager>
                        </Popover>
                      </Popover>
                    </Dropdown>
                  </ThemeProvider>
                </ThemeProvider>
              </Themed(Dropdown)>
            </ThemedComponent>
          </Select>
        </Select>
        <Button
          element="button"
          onClick={[Function]}
          size="large"
          type="button"
          variant="regular"
        >
          <glamorous(button)
            element="button"
            onClick={[Function]}
            size="large"
            text="Focus the control"
            type="button"
            variant="regular"
          >
            <button
              className="css-38"
              onClick={[Function]}
              type="button"
            >
              <glamorous(span)>
                <span
                  className="css-37"
                >
                  <glamorous(span)
                    size="large"
                  >
                    <span
                      className="css-52"
                    >
                      Focus the control
                    </span>
                  </glamorous(span)>
                </span>
              </glamorous(span)>
            </button>
          </glamorous(button)>
        </Button>
      </div>
    </glamorous(div)>
  </MyForm>
</Component>
`;

exports[`Select demo examples uncontrolled 1`] = `
.css-0,
[data-css-0] {
  width: 100%;
}

.css-0 > span,
[data-css-0] > span {
  width: 100%;
}

.css-1,
[data-css-1] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: inline-block;
  width: 100%;
}

.css-1 *,
[data-css-1] *,
.css-1 *::before,
[data-css-1] *::before,
.css-1 *::after,
[data-css-1] *::after {
  box-sizing: inherit;
}

.css-1 > span,
[data-css-1] > span {
  width: 100%;
}

.css-2,
[data-css-2] {
  display: inline-block;
}

.css-3,
[data-css-3] {
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-3 [role="img"],
[data-css-3] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-3 [role="img"]:first-child,
[data-css-3] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-3 :not([role="img"]) ~ [role="img"],
[data-css-3] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-3 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-3] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-7,
[data-css-7] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-7 *,
[data-css-7] *,
.css-7 *::before,
[data-css-7] *::before,
.css-7 *::after,
[data-css-7] *::after {
  box-sizing: inherit;
}

.css-7:hover > div:last-child,
[data-css-7]:hover > div:last-child,
.css-7[data-simulate-hover] > div:last-child,
[data-css-7][data-simulate-hover] > div:last-child {
  border-color: #2e6fd9;
}

.css-7:focus > div:last-child,
[data-css-7]:focus > div:last-child,
.css-7[data-simulate-focus] > div:last-child,
[data-css-7][data-simulate-focus] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7:active > div:last-child,
[data-css-7]:active > div:last-child,
.css-7[data-simulate-active] > div:last-child,
[data-css-7][data-simulate-active] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

.css-7 [role="img"],
[data-css-7] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-7 [role="img"]:first-child,
[data-css-7] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-7 :not([role="img"]) ~ [role="img"],
[data-css-7] :not([role="img"]) ~ [role="img"] {
  fill: #2e6fd9;
}

.css-7 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-7] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #2e6fd9;
  margin-left: 0.5em;
}

.css-20,
[data-css-20] {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  user-select: none;
  width: 100%;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.css-21,
[data-css-21] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.css-22,
[data-css-22] {
  background-color: #fff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.css-23,
[data-css-23] {
  align-items: center;
  color: #58606e;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  height: 2.857142857142857em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-23::placeholder,
[data-css-23]::placeholder,
.css-23[data-simulate-placeholder],
[data-css-23][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-23::-ms-input-placeholder,
[data-css-23]::-ms-input-placeholder,
.css-23[data-simulate-msinputplaceholder],
[data-css-23][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-23:-ms-input-placeholder,
[data-css-23]:-ms-input-placeholder,
.css-23[data-simulate-msinputplaceholder],
[data-css-23][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-23::-ms-clear,
[data-css-23]::-ms-clear,
.css-23[data-simulate-msclear],
[data-css-23][data-simulate-msclear] {
  display: none;
}

.css-23:focus ~ div:last-child,
[data-css-23]:focus ~ div:last-child,
.css-23[data-simulate-focus] ~ div:last-child,
[data-css-23][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #2e6fd9;
}

<Select
  data={
    Array [
      Object {
        "text": "Alabama",
        "value": "AL",
      },
      Object {
        "text": "Alaska",
        "value": "AK",
      },
      Object {
        "text": "Arizona",
        "value": "AZ",
      },
      Object {
        "text": "Arkansas",
        "value": "AR",
      },
      Object {
        "text": "California",
        "value": "CA",
      },
      Object {
        "text": "Colorado",
        "value": "CO",
      },
      Object {
        "text": "Connecticut",
        "value": "CT",
      },
      Object {
        "text": "Delaware",
        "value": "DE",
      },
      Object {
        "text": "Florida",
        "value": "FL",
      },
      Object {
        "text": "Georgia",
        "value": "GA",
      },
      Object {
        "text": "Hawaii",
        "value": "HI",
      },
      Object {
        "text": "Idaho",
        "value": "ID",
      },
      Object {
        "text": "Illinois",
        "value": "IL",
      },
      Object {
        "text": "Indiana",
        "value": "IN",
      },
      Object {
        "text": "Iowa",
        "value": "IA",
      },
      Object {
        "text": "Kansas",
        "value": "KS",
      },
      Object {
        "text": "Kentucky",
        "value": "KY",
      },
      Object {
        "text": "Louisiana",
        "value": "LA",
      },
      Object {
        "text": "Maine",
        "value": "ME",
      },
      Object {
        "text": "Maryland",
        "value": "MD",
      },
      Object {
        "text": "Massachusetts",
        "value": "MA",
      },
      Object {
        "text": "Michigan",
        "value": "MI",
      },
      Object {
        "text": "Minnesota",
        "value": "MN",
      },
      Object {
        "text": "Mississippi",
        "value": "MS",
      },
      Object {
        "text": "Missouri",
        "value": "MO",
      },
      Object {
        "text": "Montana",
        "value": "MT",
      },
      Object {
        "text": "Nebraska",
        "value": "NE",
      },
      Object {
        "text": "Nevada",
        "value": "NV",
      },
      Object {
        "text": "New Hampshire",
        "value": "NH",
      },
      Object {
        "text": "New Jersey",
        "value": "NJ",
      },
      Object {
        "text": "New Mexico",
        "value": "NM",
      },
      Object {
        "text": "New York",
        "value": "NY",
      },
      Object {
        "text": "North Carolina",
        "value": "NC",
      },
      Object {
        "text": "North Dakota",
        "value": "ND",
      },
      Object {
        "text": "Ohio",
        "value": "OH",
      },
      Object {
        "text": "Oklahoma",
        "value": "OK",
      },
      Object {
        "text": "Oregon",
        "value": "OR",
      },
      Object {
        "text": "Pennsylvania",
        "value": "PA",
      },
      Object {
        "text": "Rhode Island",
        "value": "RI",
      },
      Object {
        "text": "South Carolina",
        "value": "SC",
      },
      Object {
        "text": "South Dakota",
        "value": "SD",
      },
      Object {
        "text": "Tennessee",
        "value": "TN",
      },
      Object {
        "text": "Texas",
        "value": "TX",
      },
      Object {
        "text": "Utah",
        "value": "UT",
      },
      Object {
        "text": "Vermont",
        "value": "VT",
      },
      Object {
        "text": "Virginia",
        "value": "VA",
      },
      Object {
        "text": "Washington",
        "value": "WA",
      },
      Object {
        "text": "West Virginia",
        "value": "WV",
      },
      Object {
        "text": "Wisconsin",
        "value": "WI",
      },
      Object {
        "text": "Wyoming",
        "value": "WY",
      },
    ]
  }
  defaultSelectedItem={
    Object {
      "text": "Colorado",
      "value": "CO",
    }
  }
  name="state"
  placeholder="Select..."
  placement="bottom-start"
  size="large"
>
  <Select
    data={
      Array [
        Object {
          "text": "Alabama",
          "value": "AL",
        },
        Object {
          "text": "Alaska",
          "value": "AK",
        },
        Object {
          "text": "Arizona",
          "value": "AZ",
        },
        Object {
          "text": "Arkansas",
          "value": "AR",
        },
        Object {
          "text": "California",
          "value": "CA",
        },
        Object {
          "text": "Colorado",
          "value": "CO",
        },
        Object {
          "text": "Connecticut",
          "value": "CT",
        },
        Object {
          "text": "Delaware",
          "value": "DE",
        },
        Object {
          "text": "Florida",
          "value": "FL",
        },
        Object {
          "text": "Georgia",
          "value": "GA",
        },
        Object {
          "text": "Hawaii",
          "value": "HI",
        },
        Object {
          "text": "Idaho",
          "value": "ID",
        },
        Object {
          "text": "Illinois",
          "value": "IL",
        },
        Object {
          "text": "Indiana",
          "value": "IN",
        },
        Object {
          "text": "Iowa",
          "value": "IA",
        },
        Object {
          "text": "Kansas",
          "value": "KS",
        },
        Object {
          "text": "Kentucky",
          "value": "KY",
        },
        Object {
          "text": "Louisiana",
          "value": "LA",
        },
        Object {
          "text": "Maine",
          "value": "ME",
        },
        Object {
          "text": "Maryland",
          "value": "MD",
        },
        Object {
          "text": "Massachusetts",
          "value": "MA",
        },
        Object {
          "text": "Michigan",
          "value": "MI",
        },
        Object {
          "text": "Minnesota",
          "value": "MN",
        },
        Object {
          "text": "Mississippi",
          "value": "MS",
        },
        Object {
          "text": "Missouri",
          "value": "MO",
        },
        Object {
          "text": "Montana",
          "value": "MT",
        },
        Object {
          "text": "Nebraska",
          "value": "NE",
        },
        Object {
          "text": "Nevada",
          "value": "NV",
        },
        Object {
          "text": "New Hampshire",
          "value": "NH",
        },
        Object {
          "text": "New Jersey",
          "value": "NJ",
        },
        Object {
          "text": "New Mexico",
          "value": "NM",
        },
        Object {
          "text": "New York",
          "value": "NY",
        },
        Object {
          "text": "North Carolina",
          "value": "NC",
        },
        Object {
          "text": "North Dakota",
          "value": "ND",
        },
        Object {
          "text": "Ohio",
          "value": "OH",
        },
        Object {
          "text": "Oklahoma",
          "value": "OK",
        },
        Object {
          "text": "Oregon",
          "value": "OR",
        },
        Object {
          "text": "Pennsylvania",
          "value": "PA",
        },
        Object {
          "text": "Rhode Island",
          "value": "RI",
        },
        Object {
          "text": "South Carolina",
          "value": "SC",
        },
        Object {
          "text": "South Dakota",
          "value": "SD",
        },
        Object {
          "text": "Tennessee",
          "value": "TN",
        },
        Object {
          "text": "Texas",
          "value": "TX",
        },
        Object {
          "text": "Utah",
          "value": "UT",
        },
        Object {
          "text": "Vermont",
          "value": "VT",
        },
        Object {
          "text": "Virginia",
          "value": "VA",
        },
        Object {
          "text": "Washington",
          "value": "WA",
        },
        Object {
          "text": "West Virginia",
          "value": "WV",
        },
        Object {
          "text": "Wisconsin",
          "value": "WI",
        },
        Object {
          "text": "Wyoming",
          "value": "WY",
        },
      ]
    }
    defaultSelectedItem={
      Object {
        "text": "Colorado",
        "value": "CO",
      }
    }
    getItemProps={[Function]}
    getMenuProps={[Function]}
    getTriggerProps={[Function]}
    id="select-86"
    isOpen={false}
    modifiers={
      Object {
        "contentWidth": Object {
          "enabled": true,
          "fn": [Function],
        },
      }
    }
    onClose={[Function]}
    onOpen={[Function]}
    placement="bottom-start"
  >
    <ThemedComponent
      className="css-0"
      data={
        Array [
          Object {
            "text": "Alabama",
            "value": "AL",
          },
          Object {
            "text": "Alaska",
            "value": "AK",
          },
          Object {
            "text": "Arizona",
            "value": "AZ",
          },
          Object {
            "text": "Arkansas",
            "value": "AR",
          },
          Object {
            "text": "California",
            "value": "CA",
          },
          Object {
            "text": "Colorado",
            "value": "CO",
          },
          Object {
            "text": "Connecticut",
            "value": "CT",
          },
          Object {
            "text": "Delaware",
            "value": "DE",
          },
          Object {
            "text": "Florida",
            "value": "FL",
          },
          Object {
            "text": "Georgia",
            "value": "GA",
          },
          Object {
            "text": "Hawaii",
            "value": "HI",
          },
          Object {
            "text": "Idaho",
            "value": "ID",
          },
          Object {
            "text": "Illinois",
            "value": "IL",
          },
          Object {
            "text": "Indiana",
            "value": "IN",
          },
          Object {
            "text": "Iowa",
            "value": "IA",
          },
          Object {
            "text": "Kansas",
            "value": "KS",
          },
          Object {
            "text": "Kentucky",
            "value": "KY",
          },
          Object {
            "text": "Louisiana",
            "value": "LA",
          },
          Object {
            "text": "Maine",
            "value": "ME",
          },
          Object {
            "text": "Maryland",
            "value": "MD",
          },
          Object {
            "text": "Massachusetts",
            "value": "MA",
          },
          Object {
            "text": "Michigan",
            "value": "MI",
          },
          Object {
            "text": "Minnesota",
            "value": "MN",
          },
          Object {
            "text": "Mississippi",
            "value": "MS",
          },
          Object {
            "text": "Missouri",
            "value": "MO",
          },
          Object {
            "text": "Montana",
            "value": "MT",
          },
          Object {
            "text": "Nebraska",
            "value": "NE",
          },
          Object {
            "text": "Nevada",
            "value": "NV",
          },
          Object {
            "text": "New Hampshire",
            "value": "NH",
          },
          Object {
            "text": "New Jersey",
            "value": "NJ",
          },
          Object {
            "text": "New Mexico",
            "value": "NM",
          },
          Object {
            "text": "New York",
            "value": "NY",
          },
          Object {
            "text": "North Carolina",
            "value": "NC",
          },
          Object {
            "text": "North Dakota",
            "value": "ND",
          },
          Object {
            "text": "Ohio",
            "value": "OH",
          },
          Object {
            "text": "Oklahoma",
            "value": "OK",
          },
          Object {
            "text": "Oregon",
            "value": "OR",
          },
          Object {
            "text": "Pennsylvania",
            "value": "PA",
          },
          Object {
            "text": "Rhode Island",
            "value": "RI",
          },
          Object {
            "text": "South Carolina",
            "value": "SC",
          },
          Object {
            "text": "South Dakota",
            "value": "SD",
          },
          Object {
            "text": "Tennessee",
            "value": "TN",
          },
          Object {
            "text": "Texas",
            "value": "TX",
          },
          Object {
            "text": "Utah",
            "value": "UT",
          },
          Object {
            "text": "Vermont",
            "value": "VT",
          },
          Object {
            "text": "Virginia",
            "value": "VA",
          },
          Object {
            "text": "Washington",
            "value": "WA",
          },
          Object {
            "text": "West Virginia",
            "value": "WV",
          },
          Object {
            "text": "Wisconsin",
            "value": "WI",
          },
          Object {
            "text": "Wyoming",
            "value": "WY",
          },
        ]
      }
      defaultSelectedItem={
        Object {
          "text": "Colorado",
          "value": "CO",
        }
      }
      getItemProps={[Function]}
      getMenuProps={[Function]}
      getTriggerProps={[Function]}
      id="select-86"
      isOpen={false}
      modifiers={
        Object {
          "contentWidth": Object {
            "enabled": true,
            "fn": [Function],
          },
        }
      }
      onClose={[Function]}
      onOpen={[Function]}
      placement="bottom-start"
    >
      <Themed(Dropdown)
        className="css-0"
        data={
          Array [
            Object {
              "text": "Alabama",
              "value": "AL",
            },
            Object {
              "text": "Alaska",
              "value": "AK",
            },
            Object {
              "text": "Arizona",
              "value": "AZ",
            },
            Object {
              "text": "Arkansas",
              "value": "AR",
            },
            Object {
              "text": "California",
              "value": "CA",
            },
            Object {
              "text": "Colorado",
              "value": "CO",
            },
            Object {
              "text": "Connecticut",
              "value": "CT",
            },
            Object {
              "text": "Delaware",
              "value": "DE",
            },
            Object {
              "text": "Florida",
              "value": "FL",
            },
            Object {
              "text": "Georgia",
              "value": "GA",
            },
            Object {
              "text": "Hawaii",
              "value": "HI",
            },
            Object {
              "text": "Idaho",
              "value": "ID",
            },
            Object {
              "text": "Illinois",
              "value": "IL",
            },
            Object {
              "text": "Indiana",
              "value": "IN",
            },
            Object {
              "text": "Iowa",
              "value": "IA",
            },
            Object {
              "text": "Kansas",
              "value": "KS",
            },
            Object {
              "text": "Kentucky",
              "value": "KY",
            },
            Object {
              "text": "Louisiana",
              "value": "LA",
            },
            Object {
              "text": "Maine",
              "value": "ME",
            },
            Object {
              "text": "Maryland",
              "value": "MD",
            },
            Object {
              "text": "Massachusetts",
              "value": "MA",
            },
            Object {
              "text": "Michigan",
              "value": "MI",
            },
            Object {
              "text": "Minnesota",
              "value": "MN",
            },
            Object {
              "text": "Mississippi",
              "value": "MS",
            },
            Object {
              "text": "Missouri",
              "value": "MO",
            },
            Object {
              "text": "Montana",
              "value": "MT",
            },
            Object {
              "text": "Nebraska",
              "value": "NE",
            },
            Object {
              "text": "Nevada",
              "value": "NV",
            },
            Object {
              "text": "New Hampshire",
              "value": "NH",
            },
            Object {
              "text": "New Jersey",
              "value": "NJ",
            },
            Object {
              "text": "New Mexico",
              "value": "NM",
            },
            Object {
              "text": "New York",
              "value": "NY",
            },
            Object {
              "text": "North Carolina",
              "value": "NC",
            },
            Object {
              "text": "North Dakota",
              "value": "ND",
            },
            Object {
              "text": "Ohio",
              "value": "OH",
            },
            Object {
              "text": "Oklahoma",
              "value": "OK",
            },
            Object {
              "text": "Oregon",
              "value": "OR",
            },
            Object {
              "text": "Pennsylvania",
              "value": "PA",
            },
            Object {
              "text": "Rhode Island",
              "value": "RI",
            },
            Object {
              "text": "South Carolina",
              "value": "SC",
            },
            Object {
              "text": "South Dakota",
              "value": "SD",
            },
            Object {
              "text": "Tennessee",
              "value": "TN",
            },
            Object {
              "text": "Texas",
              "value": "TX",
            },
            Object {
              "text": "Utah",
              "value": "UT",
            },
            Object {
              "text": "Vermont",
              "value": "VT",
            },
            Object {
              "text": "Virginia",
              "value": "VA",
            },
            Object {
              "text": "Washington",
              "value": "WA",
            },
            Object {
              "text": "West Virginia",
              "value": "WV",
            },
            Object {
              "text": "Wisconsin",
              "value": "WI",
            },
            Object {
              "text": "Wyoming",
              "value": "WY",
            },
          ]
        }
        defaultSelectedItem={
          Object {
            "text": "Colorado",
            "value": "CO",
          }
        }
        getItemProps={[Function]}
        getMenuProps={[Function]}
        getTriggerProps={[Function]}
        id="select-86"
        isOpen={false}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placement="bottom-start"
      >
        <ThemeProvider>
          <ThemeProvider>
            <Dropdown
              className="css-0"
              data={
                Array [
                  Object {
                    "text": "Alabama",
                    "value": "AL",
                  },
                  Object {
                    "text": "Alaska",
                    "value": "AK",
                  },
                  Object {
                    "text": "Arizona",
                    "value": "AZ",
                  },
                  Object {
                    "text": "Arkansas",
                    "value": "AR",
                  },
                  Object {
                    "text": "California",
                    "value": "CA",
                  },
                  Object {
                    "text": "Colorado",
                    "value": "CO",
                  },
                  Object {
                    "text": "Connecticut",
                    "value": "CT",
                  },
                  Object {
                    "text": "Delaware",
                    "value": "DE",
                  },
                  Object {
                    "text": "Florida",
                    "value": "FL",
                  },
                  Object {
                    "text": "Georgia",
                    "value": "GA",
                  },
                  Object {
                    "text": "Hawaii",
                    "value": "HI",
                  },
                  Object {
                    "text": "Idaho",
                    "value": "ID",
                  },
                  Object {
                    "text": "Illinois",
                    "value": "IL",
                  },
                  Object {
                    "text": "Indiana",
                    "value": "IN",
                  },
                  Object {
                    "text": "Iowa",
                    "value": "IA",
                  },
                  Object {
                    "text": "Kansas",
                    "value": "KS",
                  },
                  Object {
                    "text": "Kentucky",
                    "value": "KY",
                  },
                  Object {
                    "text": "Louisiana",
                    "value": "LA",
                  },
                  Object {
                    "text": "Maine",
                    "value": "ME",
                  },
                  Object {
                    "text": "Maryland",
                    "value": "MD",
                  },
                  Object {
                    "text": "Massachusetts",
                    "value": "MA",
                  },
                  Object {
                    "text": "Michigan",
                    "value": "MI",
                  },
                  Object {
                    "text": "Minnesota",
                    "value": "MN",
                  },
                  Object {
                    "text": "Mississippi",
                    "value": "MS",
                  },
                  Object {
                    "text": "Missouri",
                    "value": "MO",
                  },
                  Object {
                    "text": "Montana",
                    "value": "MT",
                  },
                  Object {
                    "text": "Nebraska",
                    "value": "NE",
                  },
                  Object {
                    "text": "Nevada",
                    "value": "NV",
                  },
                  Object {
                    "text": "New Hampshire",
                    "value": "NH",
                  },
                  Object {
                    "text": "New Jersey",
                    "value": "NJ",
                  },
                  Object {
                    "text": "New Mexico",
                    "value": "NM",
                  },
                  Object {
                    "text": "New York",
                    "value": "NY",
                  },
                  Object {
                    "text": "North Carolina",
                    "value": "NC",
                  },
                  Object {
                    "text": "North Dakota",
                    "value": "ND",
                  },
                  Object {
                    "text": "Ohio",
                    "value": "OH",
                  },
                  Object {
                    "text": "Oklahoma",
                    "value": "OK",
                  },
                  Object {
                    "text": "Oregon",
                    "value": "OR",
                  },
                  Object {
                    "text": "Pennsylvania",
                    "value": "PA",
                  },
                  Object {
                    "text": "Rhode Island",
                    "value": "RI",
                  },
                  Object {
                    "text": "South Carolina",
                    "value": "SC",
                  },
                  Object {
                    "text": "South Dakota",
                    "value": "SD",
                  },
                  Object {
                    "text": "Tennessee",
                    "value": "TN",
                  },
                  Object {
                    "text": "Texas",
                    "value": "TX",
                  },
                  Object {
                    "text": "Utah",
                    "value": "UT",
                  },
                  Object {
                    "text": "Vermont",
                    "value": "VT",
                  },
                  Object {
                    "text": "Virginia",
                    "value": "VA",
                  },
                  Object {
                    "text": "Washington",
                    "value": "WA",
                  },
                  Object {
                    "text": "West Virginia",
                    "value": "WV",
                  },
                  Object {
                    "text": "Wisconsin",
                    "value": "WI",
                  },
                  Object {
                    "text": "Wyoming",
                    "value": "WY",
                  },
                ]
              }
              defaultSelectedItem={
                Object {
                  "text": "Colorado",
                  "value": "CO",
                }
              }
              getItemProps={[Function]}
              getMenuProps={[Function]}
              getTriggerProps={[Function]}
              id="select-86"
              isOpen={false}
              modifiers={
                Object {
                  "contentWidth": Object {
                    "enabled": true,
                    "fn": [Function],
                  },
                }
              }
              onClose={[Function]}
              onOpen={[Function]}
              placement="bottom-start"
            >
              <Popover
                className="css-0"
                content={
                  <DropdownContent
                    data={
                      Array [
                        Object {
                          "text": "Alabama",
                          "value": "AL",
                        },
                        Object {
                          "text": "Alaska",
                          "value": "AK",
                        },
                        Object {
                          "text": "Arizona",
                          "value": "AZ",
                        },
                        Object {
                          "text": "Arkansas",
                          "value": "AR",
                        },
                        Object {
                          "text": "California",
                          "value": "CA",
                        },
                        Object {
                          "text": "Colorado",
                          "value": "CO",
                        },
                        Object {
                          "text": "Connecticut",
                          "value": "CT",
                        },
                        Object {
                          "text": "Delaware",
                          "value": "DE",
                        },
                        Object {
                          "text": "Florida",
                          "value": "FL",
                        },
                        Object {
                          "text": "Georgia",
                          "value": "GA",
                        },
                        Object {
                          "text": "Hawaii",
                          "value": "HI",
                        },
                        Object {
                          "text": "Idaho",
                          "value": "ID",
                        },
                        Object {
                          "text": "Illinois",
                          "value": "IL",
                        },
                        Object {
                          "text": "Indiana",
                          "value": "IN",
                        },
                        Object {
                          "text": "Iowa",
                          "value": "IA",
                        },
                        Object {
                          "text": "Kansas",
                          "value": "KS",
                        },
                        Object {
                          "text": "Kentucky",
                          "value": "KY",
                        },
                        Object {
                          "text": "Louisiana",
                          "value": "LA",
                        },
                        Object {
                          "text": "Maine",
                          "value": "ME",
                        },
                        Object {
                          "text": "Maryland",
                          "value": "MD",
                        },
                        Object {
                          "text": "Massachusetts",
                          "value": "MA",
                        },
                        Object {
                          "text": "Michigan",
                          "value": "MI",
                        },
                        Object {
                          "text": "Minnesota",
                          "value": "MN",
                        },
                        Object {
                          "text": "Mississippi",
                          "value": "MS",
                        },
                        Object {
                          "text": "Missouri",
                          "value": "MO",
                        },
                        Object {
                          "text": "Montana",
                          "value": "MT",
                        },
                        Object {
                          "text": "Nebraska",
                          "value": "NE",
                        },
                        Object {
                          "text": "Nevada",
                          "value": "NV",
                        },
                        Object {
                          "text": "New Hampshire",
                          "value": "NH",
                        },
                        Object {
                          "text": "New Jersey",
                          "value": "NJ",
                        },
                        Object {
                          "text": "New Mexico",
                          "value": "NM",
                        },
                        Object {
                          "text": "New York",
                          "value": "NY",
                        },
                        Object {
                          "text": "North Carolina",
                          "value": "NC",
                        },
                        Object {
                          "text": "North Dakota",
                          "value": "ND",
                        },
                        Object {
                          "text": "Ohio",
                          "value": "OH",
                        },
                        Object {
                          "text": "Oklahoma",
                          "value": "OK",
                        },
                        Object {
                          "text": "Oregon",
                          "value": "OR",
                        },
                        Object {
                          "text": "Pennsylvania",
                          "value": "PA",
                        },
                        Object {
                          "text": "Rhode Island",
                          "value": "RI",
                        },
                        Object {
                          "text": "South Carolina",
                          "value": "SC",
                        },
                        Object {
                          "text": "South Dakota",
                          "value": "SD",
                        },
                        Object {
                          "text": "Tennessee",
                          "value": "TN",
                        },
                        Object {
                          "text": "Texas",
                          "value": "TX",
                        },
                        Object {
                          "text": "Utah",
                          "value": "UT",
                        },
                        Object {
                          "text": "Vermont",
                          "value": "VT",
                        },
                        Object {
                          "text": "Virginia",
                          "value": "VA",
                        },
                        Object {
                          "text": "Washington",
                          "value": "WA",
                        },
                        Object {
                          "text": "West Virginia",
                          "value": "WV",
                        },
                        Object {
                          "text": "Wisconsin",
                          "value": "WI",
                        },
                        Object {
                          "text": "Wyoming",
                          "value": "WY",
                        },
                      ]
                    }
                    getItemProps={[Function]}
                    getMenuProps={[Function]}
                    id="select-86-content"
                    modifiers={
                      Object {
                        "contentWidth": Object {
                          "enabled": true,
                          "fn": [Function],
                        },
                      }
                    }
                    placement="bottom-start"
                    wide={undefined}
                  />
                }
                defaultSelectedItem={
                  Object {
                    "text": "Colorado",
                    "value": "CO",
                  }
                }
                focusTriggerOnClose={true}
                getItemProps={[Function]}
                getMenuProps={[Function]}
                getTriggerProps={[Function]}
                hasArrow={true}
                id="select-86"
                isOpen={false}
                onClose={[Function]}
                onOpen={[Function]}
                placement="bottom"
                triggerRef={[Function]}
                wrapContent={false}
              >
                <Popover
                  className="css-0"
                  content={
                    <DropdownContent
                      data={
                        Array [
                          Object {
                            "text": "Alabama",
                            "value": "AL",
                          },
                          Object {
                            "text": "Alaska",
                            "value": "AK",
                          },
                          Object {
                            "text": "Arizona",
                            "value": "AZ",
                          },
                          Object {
                            "text": "Arkansas",
                            "value": "AR",
                          },
                          Object {
                            "text": "California",
                            "value": "CA",
                          },
                          Object {
                            "text": "Colorado",
                            "value": "CO",
                          },
                          Object {
                            "text": "Connecticut",
                            "value": "CT",
                          },
                          Object {
                            "text": "Delaware",
                            "value": "DE",
                          },
                          Object {
                            "text": "Florida",
                            "value": "FL",
                          },
                          Object {
                            "text": "Georgia",
                            "value": "GA",
                          },
                          Object {
                            "text": "Hawaii",
                            "value": "HI",
                          },
                          Object {
                            "text": "Idaho",
                            "value": "ID",
                          },
                          Object {
                            "text": "Illinois",
                            "value": "IL",
                          },
                          Object {
                            "text": "Indiana",
                            "value": "IN",
                          },
                          Object {
                            "text": "Iowa",
                            "value": "IA",
                          },
                          Object {
                            "text": "Kansas",
                            "value": "KS",
                          },
                          Object {
                            "text": "Kentucky",
                            "value": "KY",
                          },
                          Object {
                            "text": "Louisiana",
                            "value": "LA",
                          },
                          Object {
                            "text": "Maine",
                            "value": "ME",
                          },
                          Object {
                            "text": "Maryland",
                            "value": "MD",
                          },
                          Object {
                            "text": "Massachusetts",
                            "value": "MA",
                          },
                          Object {
                            "text": "Michigan",
                            "value": "MI",
                          },
                          Object {
                            "text": "Minnesota",
                            "value": "MN",
                          },
                          Object {
                            "text": "Mississippi",
                            "value": "MS",
                          },
                          Object {
                            "text": "Missouri",
                            "value": "MO",
                          },
                          Object {
                            "text": "Montana",
                            "value": "MT",
                          },
                          Object {
                            "text": "Nebraska",
                            "value": "NE",
                          },
                          Object {
                            "text": "Nevada",
                            "value": "NV",
                          },
                          Object {
                            "text": "New Hampshire",
                            "value": "NH",
                          },
                          Object {
                            "text": "New Jersey",
                            "value": "NJ",
                          },
                          Object {
                            "text": "New Mexico",
                            "value": "NM",
                          },
                          Object {
                            "text": "New York",
                            "value": "NY",
                          },
                          Object {
                            "text": "North Carolina",
                            "value": "NC",
                          },
                          Object {
                            "text": "North Dakota",
                            "value": "ND",
                          },
                          Object {
                            "text": "Ohio",
                            "value": "OH",
                          },
                          Object {
                            "text": "Oklahoma",
                            "value": "OK",
                          },
                          Object {
                            "text": "Oregon",
                            "value": "OR",
                          },
                          Object {
                            "text": "Pennsylvania",
                            "value": "PA",
                          },
                          Object {
                            "text": "Rhode Island",
                            "value": "RI",
                          },
                          Object {
                            "text": "South Carolina",
                            "value": "SC",
                          },
                          Object {
                            "text": "South Dakota",
                            "value": "SD",
                          },
                          Object {
                            "text": "Tennessee",
                            "value": "TN",
                          },
                          Object {
                            "text": "Texas",
                            "value": "TX",
                          },
                          Object {
                            "text": "Utah",
                            "value": "UT",
                          },
                          Object {
                            "text": "Vermont",
                            "value": "VT",
                          },
                          Object {
                            "text": "Virginia",
                            "value": "VA",
                          },
                          Object {
                            "text": "Washington",
                            "value": "WA",
                          },
                          Object {
                            "text": "West Virginia",
                            "value": "WV",
                          },
                          Object {
                            "text": "Wisconsin",
                            "value": "WI",
                          },
                          Object {
                            "text": "Wyoming",
                            "value": "WY",
                          },
                        ]
                      }
                      getItemProps={[Function]}
                      getMenuProps={[Function]}
                      id="select-86-content"
                      modifiers={
                        Object {
                          "contentWidth": Object {
                            "enabled": true,
                            "fn": [Function],
                          },
                        }
                      }
                      placement="bottom-start"
                      wide={undefined}
                    />
                  }
                  defaultSelectedItem={
                    Object {
                      "text": "Colorado",
                      "value": "CO",
                    }
                  }
                  focusTriggerOnClose={true}
                  getItemProps={[Function]}
                  getMenuProps={[Function]}
                  getTriggerProps={[Function]}
                  hasArrow={true}
                  id="select-86"
                  isOpen={false}
                  onClose={[Function]}
                  onOpen={[Function]}
                  placement="bottom"
                  tag="span"
                  triggerRef={[Function]}
                  wrapContent={false}
                >
                  <Manager
                    className="css-1"
                    id="select-86"
                    tag="span"
                  >
                    <span
                      className="css-1"
                      id="select-86"
                    >
                      <PopoverTrigger
                        aria-describedby="select-86-content"
                        aria-expanded={false}
                        aria-haspopup="listbox"
                        aria-owns="select-86-content"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        role="button"
                        tabIndex={0}
                      >
                        <PopoverTrigger
                          component="span"
                        >
                          <Target
                            className="css-2"
                            component="span"
                          >
                            <span
                              className="css-2"
                            >
                              <SelectTrigger
                                aria-describedby="select-86-content"
                                aria-expanded={false}
                                aria-haspopup="listbox"
                                aria-owns="select-86-content"
                                isOpen={false}
                                item={
                                  Object {
                                    "text": "Colorado",
                                    "value": "CO",
                                  }
                                }
                                name="state"
                                onBlur={[Function]}
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                placeholder="Select..."
                                role="button"
                                size="large"
                                tabIndex={0}
                                triggerRef={[Function]}
                              >
                                <SelectTrigger
                                  afterItems={
                                    Array [
                                      <IconArrowDropdownDown
                                        css={
                                          Object {
                                            "margin": "0.5em",
                                          }
                                        }
                                        size="1.5em"
                                      />,
                                      <input
                                        name="state"
                                        type="hidden"
                                        value="CO"
                                      />,
                                    ]
                                  }
                                  aria-describedby="select-86-content"
                                  aria-expanded={false}
                                  aria-haspopup="listbox"
                                  aria-owns="select-86-content"
                                  control={[Function]}
                                  controlProps={
                                    Object {
                                      "hasPlaceholder": false,
                                      "variant": undefined,
                                    }
                                  }
                                  fauxControlRef={[Function]}
                                  item={
                                    Object {
                                      "text": "Colorado",
                                      "value": "CO",
                                    }
                                  }
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  role="button"
                                  size="large"
                                  tabIndex={0}
                                >
                                  <FauxControl
                                    afterItems={
                                      Array [
                                        <IconArrowDropdownDown
                                          css={
                                            Object {
                                              "margin": "0.5em",
                                            }
                                          }
                                          size="1.5em"
                                        />,
                                        <input
                                          name="state"
                                          type="hidden"
                                          value="CO"
                                        />,
                                      ]
                                    }
                                    aria-describedby="select-86-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-86-content"
                                    className="css-3"
                                    control={[Function]}
                                    controlProps={
                                      Object {
                                        "hasPlaceholder": false,
                                        "variant": undefined,
                                      }
                                    }
                                    fauxControlRef={[Function]}
                                    item={
                                      Object {
                                        "text": "Colorado",
                                        "value": "CO",
                                      }
                                    }
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                  >
                                    <FauxControl
                                      aria-describedby="select-86-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-86-content"
                                      className="css-3"
                                      control={[Function]}
                                      innerRef={[Function]}
                                      item={
                                        Object {
                                          "text": "Colorado",
                                          "value": "CO",
                                        }
                                      }
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      tabIndex={0}
                                    >
                                      <div
                                        aria-describedby="select-86-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-86-content"
                                        className="css-7"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        <glamorous(Trigger)
                                          controlPropsIn={
                                            Object {
                                              "hasPlaceholder": false,
                                              "variant": undefined,
                                            }
                                          }
                                          hasPlaceholder={false}
                                          key="control"
                                          size="large"
                                        >
                                          <div
                                            className="css-23"
                                          >
                                            <TriggerContent>
                                              <span
                                                className="css-20"
                                              >
                                                Colorado
                                              </span>
                                            </TriggerContent>
                                          </div>
                                        </glamorous(Trigger)>
                                        <IconArrowDropdownDown
                                          css={
                                            Object {
                                              "margin": "0.5em",
                                            }
                                          }
                                          key="arrow"
                                          size="1.5em"
                                        >
                                          <Icon
                                            css={
                                              Object {
                                                "margin": "0.5em",
                                              }
                                            }
                                            rtl={false}
                                            size="1.5em"
                                          >
                                            <glamorous(svg)
                                              aria-hidden={true}
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              role="img"
                                              rtl={false}
                                              size="1.5em"
                                              viewBox="0 0 24 24"
                                            >
                                              <svg
                                                aria-hidden={true}
                                                className="css-21"
                                                role="img"
                                                viewBox="0 0 24 24"
                                              >
                                                <g>
                                                  <path
                                                    d="M12 17.5l-8-8h16z"
                                                  />
                                                </g>
                                              </svg>
                                            </glamorous(svg)>
                                          </Icon>
                                        </IconArrowDropdownDown>
                                        <input
                                          key="input"
                                          name="state"
                                          type="hidden"
                                          value="CO"
                                        />
                                        <Underlay>
                                          <div
                                            className="css-22"
                                          />
                                        </Underlay>
                                      </div>
                                    </FauxControl>
                                  </FauxControl>
                                </SelectTrigger>
                              </SelectTrigger>
                            </span>
                          </Target>
                        </PopoverTrigger>
                      </PopoverTrigger>
                    </span>
                  </Manager>
                </Popover>
              </Popover>
            </Dropdown>
          </ThemeProvider>
        </ThemeProvider>
      </Themed(Dropdown)>
    </ThemedComponent>
  </Select>
</Select>
`;

exports[`Select demo examples variants 1`] = `
.css-0,
[data-css-0] {
  width: 100%;
}

.css-0 > span,
[data-css-0] > span {
  width: 100%;
}

.css-1,
[data-css-1] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: inline-block;
  width: 100%;
}

.css-1 *,
[data-css-1] *,
.css-1 *::before,
[data-css-1] *::before,
.css-1 *::after,
[data-css-1] *::after {
  box-sizing: inherit;
}

.css-1 > span,
[data-css-1] > span {
  width: 100%;
}

.css-2,
[data-css-2] {
  display: inline-block;
}

.css-3,
[data-css-3] {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  user-select: none;
  width: 100%;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.css-4,
[data-css-4] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.css-5,
[data-css-5] {
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-5 [role="img"],
[data-css-5] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-5 [role="img"]:first-child,
[data-css-5] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-5 :not([role="img"]) ~ [role="img"],
[data-css-5] :not([role="img"]) ~ [role="img"] {
  fill: #db2929;
}

.css-5 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-5] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #db2929;
  margin-left: 0.5em;
}

.css-9,
[data-css-9] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-9 *,
[data-css-9] *,
.css-9 *::before,
[data-css-9] *::before,
.css-9 *::after,
[data-css-9] *::after {
  box-sizing: inherit;
}

.css-9:hover > div:last-child,
[data-css-9]:hover > div:last-child,
.css-9[data-simulate-hover] > div:last-child,
[data-css-9][data-simulate-hover] > div:last-child {
  border-color: #c71818;
}

.css-9:focus > div:last-child,
[data-css-9]:focus > div:last-child,
.css-9[data-simulate-focus] > div:last-child,
[data-css-9][data-simulate-focus] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #db2929;
}

.css-9:active > div:last-child,
[data-css-9]:active > div:last-child,
.css-9[data-simulate-active] > div:last-child,
[data-css-9][data-simulate-active] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #db2929;
}

.css-9 [role="img"],
[data-css-9] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-9 [role="img"]:first-child,
[data-css-9] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-9 :not([role="img"]) ~ [role="img"],
[data-css-9] :not([role="img"]) ~ [role="img"] {
  fill: #db2929;
}

.css-9 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-9] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #db2929;
  margin-left: 0.5em;
}

.css-22,
[data-css-22] {
  align-items: center;
  color: #8e99ab;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  font-style: italic;
  height: 2.857142857142857em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 0;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-22::placeholder,
[data-css-22]::placeholder,
.css-22[data-simulate-placeholder],
[data-css-22][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-22::-ms-input-placeholder,
[data-css-22]::-ms-input-placeholder,
.css-22[data-simulate-msinputplaceholder],
[data-css-22][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-22:-ms-input-placeholder,
[data-css-22]:-ms-input-placeholder,
.css-22[data-simulate-msinputplaceholder],
[data-css-22][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-22::-ms-clear,
[data-css-22]::-ms-clear,
.css-22[data-simulate-msclear],
[data-css-22][data-simulate-msclear] {
  display: none;
}

.css-22:focus ~ div:last-child,
[data-css-22]:focus ~ div:last-child,
.css-22[data-simulate-focus] ~ div:last-child,
[data-css-22][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #db2929;
}

.css-36,
[data-css-36] {
  fill: #8e99ab;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
}

.css-37,
[data-css-37] {
  background-color: #fff;
  border-color: #db2929;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.css-38,
[data-css-38] {
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-38 [role="img"],
[data-css-38] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-38 [role="img"]:first-child,
[data-css-38] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-38 :not([role="img"]) ~ [role="img"],
[data-css-38] :not([role="img"]) ~ [role="img"] {
  fill: #06783f;
}

.css-38 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-38] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #06783f;
  margin-left: 0.5em;
}

.css-42,
[data-css-42] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-42 *,
[data-css-42] *,
.css-42 *::before,
[data-css-42] *::before,
.css-42 *::after,
[data-css-42] *::after {
  box-sizing: inherit;
}

.css-42:hover > div:last-child,
[data-css-42]:hover > div:last-child,
.css-42[data-simulate-hover] > div:last-child,
[data-css-42][data-simulate-hover] > div:last-child {
  border-color: #0a8f4c;
}

.css-42:focus > div:last-child,
[data-css-42]:focus > div:last-child,
.css-42[data-simulate-focus] > div:last-child,
[data-css-42][data-simulate-focus] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #10a35a;
}

.css-42:active > div:last-child,
[data-css-42]:active > div:last-child,
.css-42[data-simulate-active] > div:last-child,
[data-css-42][data-simulate-active] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #10a35a;
}

.css-42 [role="img"],
[data-css-42] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-42 [role="img"]:first-child,
[data-css-42] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-42 :not([role="img"]) ~ [role="img"],
[data-css-42] :not([role="img"]) ~ [role="img"] {
  fill: #06783f;
}

.css-42 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-42] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #06783f;
  margin-left: 0.5em;
}

.css-55,
[data-css-55] {
  align-items: center;
  color: #8e99ab;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  font-style: italic;
  height: 2.857142857142857em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 0;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-55::placeholder,
[data-css-55]::placeholder,
.css-55[data-simulate-placeholder],
[data-css-55][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-55::-ms-input-placeholder,
[data-css-55]::-ms-input-placeholder,
.css-55[data-simulate-msinputplaceholder],
[data-css-55][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-55:-ms-input-placeholder,
[data-css-55]:-ms-input-placeholder,
.css-55[data-simulate-msinputplaceholder],
[data-css-55][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-55::-ms-clear,
[data-css-55]::-ms-clear,
.css-55[data-simulate-msclear],
[data-css-55][data-simulate-msclear] {
  display: none;
}

.css-55:focus ~ div:last-child,
[data-css-55]:focus ~ div:last-child,
.css-55[data-simulate-focus] ~ div:last-child,
[data-css-55][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #10a35a;
}

.css-69,
[data-css-69] {
  background-color: #fff;
  border-color: #10a35a;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.css-70,
[data-css-70] {
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-70 [role="img"],
[data-css-70] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-70 [role="img"]:first-child,
[data-css-70] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-70 :not([role="img"]) ~ [role="img"],
[data-css-70] :not([role="img"]) ~ [role="img"] {
  fill: #cf4615;
}

.css-70 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-70] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #cf4615;
  margin-left: 0.5em;
}

.css-74,
[data-css-74] {
  box-sizing: border-box;
  color: #333840;
  font-family: Open Sans, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%;
  -webkit-box-align: center;
  -webkit-align-items: center;
}

.css-74 *,
[data-css-74] *,
.css-74 *::before,
[data-css-74] *::before,
.css-74 *::after,
[data-css-74] *::after {
  box-sizing: inherit;
}

.css-74:hover > div:last-child,
[data-css-74]:hover > div:last-child,
.css-74[data-simulate-hover] > div:last-child,
[data-css-74][data-simulate-hover] > div:last-child {
  border-color: #cf4615;
}

.css-74:focus > div:last-child,
[data-css-74]:focus > div:last-child,
.css-74[data-simulate-focus] > div:last-child,
[data-css-74][data-simulate-focus] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #e05b2b;
}

.css-74:active > div:last-child,
[data-css-74]:active > div:last-child,
.css-74[data-simulate-active] > div:last-child,
[data-css-74][data-simulate-active] > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #e05b2b;
}

.css-74 [role="img"],
[data-css-74] [role="img"] {
  display: block;
  fill: #2e6fd9;
  flex: 0 0 auto;
  -webkit-flex: 0 0 auto;
}

.css-74 [role="img"]:first-child,
[data-css-74] [role="img"]:first-child {
  fill: #2e6fd9;
  margin: 0 0.5em;
}

.css-74 :not([role="img"]) ~ [role="img"],
[data-css-74] :not([role="img"]) ~ [role="img"] {
  fill: #cf4615;
}

.css-74 :not([role="img"]) + [role="img"]:not(:last-of-type),
[data-css-74] :not([role="img"]) + [role="img"]:not(:last-of-type) {
  fill: #cf4615;
  margin-left: 0.5em;
}

.css-87,
[data-css-87] {
  align-items: center;
  color: #8e99ab;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex: 1 1 auto;
  min-width: 0;
  font-size: 0.875em;
  font-style: italic;
  height: 2.857142857142857em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 0;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -webkit-flex: 1 1 auto;
}

.css-87::placeholder,
[data-css-87]::placeholder,
.css-87[data-simulate-placeholder],
[data-css-87][data-simulate-placeholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-87::-ms-input-placeholder,
[data-css-87]::-ms-input-placeholder,
.css-87[data-simulate-msinputplaceholder],
[data-css-87][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-87:-ms-input-placeholder,
[data-css-87]:-ms-input-placeholder,
.css-87[data-simulate-msinputplaceholder],
[data-css-87][data-simulate-msinputplaceholder] {
  color: #8e99ab;
  font-style: italic;
}

.css-87::-ms-clear,
[data-css-87]::-ms-clear,
.css-87[data-simulate-msclear],
[data-css-87][data-simulate-msclear] {
  display: none;
}

.css-87:focus ~ div:last-child,
[data-css-87]:focus ~ div:last-child,
.css-87[data-simulate-focus] ~ div:last-child,
[data-css-87][data-simulate-focus] ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #fff, 0 0 0 2px #e05b2b;
}

.css-101,
[data-css-101] {
  background-color: #fff;
  border-color: #e05b2b;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

<glamorous(div)>
  <div
    className="css-1p1xtzc"
  >
    <Select
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      placeholder="Select..."
      placement="bottom-start"
      size="large"
      variant="danger"
    >
      <Select
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        getItemProps={[Function]}
        getMenuProps={[Function]}
        getTriggerProps={[Function]}
        id="select-110"
        isOpen={false}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placement="bottom-start"
      >
        <ThemedComponent
          className="css-0"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          getItemProps={[Function]}
          getMenuProps={[Function]}
          getTriggerProps={[Function]}
          id="select-110"
          isOpen={false}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placement="bottom-start"
        >
          <Themed(Dropdown)
            className="css-0"
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            getItemProps={[Function]}
            getMenuProps={[Function]}
            getTriggerProps={[Function]}
            id="select-110"
            isOpen={false}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onClose={[Function]}
            onOpen={[Function]}
            placement="bottom-start"
          >
            <ThemeProvider>
              <ThemeProvider>
                <Dropdown
                  className="css-0"
                  data={
                    Array [
                      Object {
                        "text": "Alpha",
                        "value": "alpha",
                      },
                      Object {
                        "text": "Beta",
                        "value": "beta",
                      },
                      Object {
                        "text": "Gamma",
                        "value": "gamma",
                      },
                    ]
                  }
                  getItemProps={[Function]}
                  getMenuProps={[Function]}
                  getTriggerProps={[Function]}
                  id="select-110"
                  isOpen={false}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placement="bottom-start"
                >
                  <Popover
                    className="css-0"
                    content={
                      <DropdownContent
                        data={
                          Array [
                            Object {
                              "text": "Alpha",
                              "value": "alpha",
                            },
                            Object {
                              "text": "Beta",
                              "value": "beta",
                            },
                            Object {
                              "text": "Gamma",
                              "value": "gamma",
                            },
                          ]
                        }
                        getItemProps={[Function]}
                        getMenuProps={[Function]}
                        id="select-110-content"
                        modifiers={
                          Object {
                            "contentWidth": Object {
                              "enabled": true,
                              "fn": [Function],
                            },
                          }
                        }
                        placement="bottom-start"
                        wide={undefined}
                      />
                    }
                    focusTriggerOnClose={true}
                    getItemProps={[Function]}
                    getMenuProps={[Function]}
                    getTriggerProps={[Function]}
                    hasArrow={true}
                    id="select-110"
                    isOpen={false}
                    onClose={[Function]}
                    onOpen={[Function]}
                    placement="bottom"
                    triggerRef={[Function]}
                    wrapContent={false}
                  >
                    <Popover
                      className="css-0"
                      content={
                        <DropdownContent
                          data={
                            Array [
                              Object {
                                "text": "Alpha",
                                "value": "alpha",
                              },
                              Object {
                                "text": "Beta",
                                "value": "beta",
                              },
                              Object {
                                "text": "Gamma",
                                "value": "gamma",
                              },
                            ]
                          }
                          getItemProps={[Function]}
                          getMenuProps={[Function]}
                          id="select-110-content"
                          modifiers={
                            Object {
                              "contentWidth": Object {
                                "enabled": true,
                                "fn": [Function],
                              },
                            }
                          }
                          placement="bottom-start"
                          wide={undefined}
                        />
                      }
                      focusTriggerOnClose={true}
                      getItemProps={[Function]}
                      getMenuProps={[Function]}
                      getTriggerProps={[Function]}
                      hasArrow={true}
                      id="select-110"
                      isOpen={false}
                      onClose={[Function]}
                      onOpen={[Function]}
                      placement="bottom"
                      tag="span"
                      triggerRef={[Function]}
                      wrapContent={false}
                    >
                      <Manager
                        className="css-1"
                        id="select-110"
                        tag="span"
                      >
                        <span
                          className="css-1"
                          id="select-110"
                        >
                          <PopoverTrigger
                            aria-describedby="select-110-content"
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            aria-owns="select-110-content"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            <PopoverTrigger
                              component="span"
                            >
                              <Target
                                className="css-2"
                                component="span"
                              >
                                <span
                                  className="css-2"
                                >
                                  <SelectTrigger
                                    aria-describedby="select-110-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-110-content"
                                    isOpen={false}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    placeholder="Select..."
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                    triggerRef={[Function]}
                                    variant="danger"
                                  >
                                    <SelectTrigger
                                      afterItems={
                                        Array [
                                          <IconArrowDropdownDown
                                            css={
                                              Object {
                                                "margin": "0.5em",
                                              }
                                            }
                                            size="1.5em"
                                          />,
                                          <input
                                            name={undefined}
                                            type="hidden"
                                            value=""
                                          />,
                                        ]
                                      }
                                      aria-describedby="select-110-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-110-content"
                                      control={[Function]}
                                      controlProps={
                                        Object {
                                          "hasPlaceholder": true,
                                          "variant": undefined,
                                        }
                                      }
                                      fauxControlRef={[Function]}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                      variant="danger"
                                    >
                                      <FauxControl
                                        afterItems={
                                          Array [
                                            <IconArrowDropdownDown
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              size="1.5em"
                                            />,
                                            <input
                                              name={undefined}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-110-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-110-content"
                                        className="css-5"
                                        control={[Function]}
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                        variant="danger"
                                      >
                                        <FauxControl
                                          aria-describedby="select-110-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-110-content"
                                          className="css-5"
                                          control={[Function]}
                                          innerRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          tabIndex={0}
                                          variant="danger"
                                        >
                                          <div
                                            aria-describedby="select-110-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-110-content"
                                            className="css-9"
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            tabIndex={0}
                                          >
                                            <glamorous(Trigger)
                                              controlPropsIn={
                                                Object {
                                                  "hasPlaceholder": true,
                                                  "variant": undefined,
                                                }
                                              }
                                              hasPlaceholder={true}
                                              key="control"
                                              size="large"
                                              variant="danger"
                                            >
                                              <div
                                                className="css-22"
                                              >
                                                <TriggerContent>
                                                  <span
                                                    className="css-3"
                                                  >
                                                    Select...
                                                  </span>
                                                </TriggerContent>
                                              </div>
                                            </glamorous(Trigger)>
                                            <IconDanger
                                              key="iconEnd"
                                              size="1.5em"
                                            >
                                              <Icon
                                                rtl={false}
                                                size="1.5em"
                                              >
                                                <glamorous(svg)
                                                  aria-hidden={true}
                                                  role="img"
                                                  rtl={false}
                                                  size="1.5em"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="css-36"
                                                    role="img"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <g>
                                                      <path
                                                        d="M3.94 19.49h16.118a1 1 0 0 0 .866-1.498l-8.06-13.99a.996.996 0 0 0-1.732-.001L3.074 17.993a.998.998 0 0 0 .867 1.499zM12 17a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm1-3.503h-2v-5h2v5z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </glamorous(svg)>
                                              </Icon>
                                            </IconDanger>
                                            <IconArrowDropdownDown
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              key="arrow"
                                              size="1.5em"
                                            >
                                              <Icon
                                                css={
                                                  Object {
                                                    "margin": "0.5em",
                                                  }
                                                }
                                                rtl={false}
                                                size="1.5em"
                                              >
                                                <glamorous(svg)
                                                  aria-hidden={true}
                                                  css={
                                                    Object {
                                                      "margin": "0.5em",
                                                    }
                                                  }
                                                  role="img"
                                                  rtl={false}
                                                  size="1.5em"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="css-4"
                                                    role="img"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <g>
                                                      <path
                                                        d="M12 17.5l-8-8h16z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </glamorous(svg)>
                                              </Icon>
                                            </IconArrowDropdownDown>
                                            <input
                                              key="input"
                                              type="hidden"
                                              value=""
                                            />
                                            <Underlay
                                              variant="danger"
                                            >
                                              <div
                                                className="css-37"
                                              />
                                            </Underlay>
                                          </div>
                                        </FauxControl>
                                      </FauxControl>
                                    </SelectTrigger>
                                  </SelectTrigger>
                                </span>
                              </Target>
                            </PopoverTrigger>
                          </PopoverTrigger>
                        </span>
                      </Manager>
                    </Popover>
                  </Popover>
                </Dropdown>
              </ThemeProvider>
            </ThemeProvider>
          </Themed(Dropdown)>
        </ThemedComponent>
      </Select>
    </Select>
    <Select
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      placeholder="Select..."
      placement="bottom-start"
      size="large"
      variant="success"
    >
      <Select
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        getItemProps={[Function]}
        getMenuProps={[Function]}
        getTriggerProps={[Function]}
        id="select-113"
        isOpen={false}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placement="bottom-start"
      >
        <ThemedComponent
          className="css-0"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          getItemProps={[Function]}
          getMenuProps={[Function]}
          getTriggerProps={[Function]}
          id="select-113"
          isOpen={false}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placement="bottom-start"
        >
          <Themed(Dropdown)
            className="css-0"
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            getItemProps={[Function]}
            getMenuProps={[Function]}
            getTriggerProps={[Function]}
            id="select-113"
            isOpen={false}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onClose={[Function]}
            onOpen={[Function]}
            placement="bottom-start"
          >
            <ThemeProvider>
              <ThemeProvider>
                <Dropdown
                  className="css-0"
                  data={
                    Array [
                      Object {
                        "text": "Alpha",
                        "value": "alpha",
                      },
                      Object {
                        "text": "Beta",
                        "value": "beta",
                      },
                      Object {
                        "text": "Gamma",
                        "value": "gamma",
                      },
                    ]
                  }
                  getItemProps={[Function]}
                  getMenuProps={[Function]}
                  getTriggerProps={[Function]}
                  id="select-113"
                  isOpen={false}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placement="bottom-start"
                >
                  <Popover
                    className="css-0"
                    content={
                      <DropdownContent
                        data={
                          Array [
                            Object {
                              "text": "Alpha",
                              "value": "alpha",
                            },
                            Object {
                              "text": "Beta",
                              "value": "beta",
                            },
                            Object {
                              "text": "Gamma",
                              "value": "gamma",
                            },
                          ]
                        }
                        getItemProps={[Function]}
                        getMenuProps={[Function]}
                        id="select-113-content"
                        modifiers={
                          Object {
                            "contentWidth": Object {
                              "enabled": true,
                              "fn": [Function],
                            },
                          }
                        }
                        placement="bottom-start"
                        wide={undefined}
                      />
                    }
                    focusTriggerOnClose={true}
                    getItemProps={[Function]}
                    getMenuProps={[Function]}
                    getTriggerProps={[Function]}
                    hasArrow={true}
                    id="select-113"
                    isOpen={false}
                    onClose={[Function]}
                    onOpen={[Function]}
                    placement="bottom"
                    triggerRef={[Function]}
                    wrapContent={false}
                  >
                    <Popover
                      className="css-0"
                      content={
                        <DropdownContent
                          data={
                            Array [
                              Object {
                                "text": "Alpha",
                                "value": "alpha",
                              },
                              Object {
                                "text": "Beta",
                                "value": "beta",
                              },
                              Object {
                                "text": "Gamma",
                                "value": "gamma",
                              },
                            ]
                          }
                          getItemProps={[Function]}
                          getMenuProps={[Function]}
                          id="select-113-content"
                          modifiers={
                            Object {
                              "contentWidth": Object {
                                "enabled": true,
                                "fn": [Function],
                              },
                            }
                          }
                          placement="bottom-start"
                          wide={undefined}
                        />
                      }
                      focusTriggerOnClose={true}
                      getItemProps={[Function]}
                      getMenuProps={[Function]}
                      getTriggerProps={[Function]}
                      hasArrow={true}
                      id="select-113"
                      isOpen={false}
                      onClose={[Function]}
                      onOpen={[Function]}
                      placement="bottom"
                      tag="span"
                      triggerRef={[Function]}
                      wrapContent={false}
                    >
                      <Manager
                        className="css-1"
                        id="select-113"
                        tag="span"
                      >
                        <span
                          className="css-1"
                          id="select-113"
                        >
                          <PopoverTrigger
                            aria-describedby="select-113-content"
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            aria-owns="select-113-content"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            <PopoverTrigger
                              component="span"
                            >
                              <Target
                                className="css-2"
                                component="span"
                              >
                                <span
                                  className="css-2"
                                >
                                  <SelectTrigger
                                    aria-describedby="select-113-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-113-content"
                                    isOpen={false}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    placeholder="Select..."
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                    triggerRef={[Function]}
                                    variant="success"
                                  >
                                    <SelectTrigger
                                      afterItems={
                                        Array [
                                          <IconArrowDropdownDown
                                            css={
                                              Object {
                                                "margin": "0.5em",
                                              }
                                            }
                                            size="1.5em"
                                          />,
                                          <input
                                            name={undefined}
                                            type="hidden"
                                            value=""
                                          />,
                                        ]
                                      }
                                      aria-describedby="select-113-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-113-content"
                                      control={[Function]}
                                      controlProps={
                                        Object {
                                          "hasPlaceholder": true,
                                          "variant": undefined,
                                        }
                                      }
                                      fauxControlRef={[Function]}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                      variant="success"
                                    >
                                      <FauxControl
                                        afterItems={
                                          Array [
                                            <IconArrowDropdownDown
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              size="1.5em"
                                            />,
                                            <input
                                              name={undefined}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-113-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-113-content"
                                        className="css-38"
                                        control={[Function]}
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                        variant="success"
                                      >
                                        <FauxControl
                                          aria-describedby="select-113-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-113-content"
                                          className="css-38"
                                          control={[Function]}
                                          innerRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          tabIndex={0}
                                          variant="success"
                                        >
                                          <div
                                            aria-describedby="select-113-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-113-content"
                                            className="css-42"
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            tabIndex={0}
                                          >
                                            <glamorous(Trigger)
                                              controlPropsIn={
                                                Object {
                                                  "hasPlaceholder": true,
                                                  "variant": undefined,
                                                }
                                              }
                                              hasPlaceholder={true}
                                              key="control"
                                              size="large"
                                              variant="success"
                                            >
                                              <div
                                                className="css-55"
                                              >
                                                <TriggerContent>
                                                  <span
                                                    className="css-3"
                                                  >
                                                    Select...
                                                  </span>
                                                </TriggerContent>
                                              </div>
                                            </glamorous(Trigger)>
                                            <IconSuccess
                                              key="iconEnd"
                                              size="1.5em"
                                            >
                                              <Icon
                                                rtl={false}
                                                size="1.5em"
                                              >
                                                <glamorous(svg)
                                                  aria-hidden={true}
                                                  role="img"
                                                  rtl={false}
                                                  size="1.5em"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="css-36"
                                                    role="img"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <g>
                                                      <path
                                                        d="M12 3c4.968 0 9 4.032 9 9s-4.032 9-9 9-9-4.032-9-9 4.032-9 9-9zm-4.247 8.445L6.5 12.698l3.838 3.838 7.198-7.198-1.253-1.254-5.945 5.945-2.585-2.585z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </glamorous(svg)>
                                              </Icon>
                                            </IconSuccess>
                                            <IconArrowDropdownDown
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              key="arrow"
                                              size="1.5em"
                                            >
                                              <Icon
                                                css={
                                                  Object {
                                                    "margin": "0.5em",
                                                  }
                                                }
                                                rtl={false}
                                                size="1.5em"
                                              >
                                                <glamorous(svg)
                                                  aria-hidden={true}
                                                  css={
                                                    Object {
                                                      "margin": "0.5em",
                                                    }
                                                  }
                                                  role="img"
                                                  rtl={false}
                                                  size="1.5em"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="css-4"
                                                    role="img"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <g>
                                                      <path
                                                        d="M12 17.5l-8-8h16z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </glamorous(svg)>
                                              </Icon>
                                            </IconArrowDropdownDown>
                                            <input
                                              key="input"
                                              type="hidden"
                                              value=""
                                            />
                                            <Underlay
                                              variant="success"
                                            >
                                              <div
                                                className="css-69"
                                              />
                                            </Underlay>
                                          </div>
                                        </FauxControl>
                                      </FauxControl>
                                    </SelectTrigger>
                                  </SelectTrigger>
                                </span>
                              </Target>
                            </PopoverTrigger>
                          </PopoverTrigger>
                        </span>
                      </Manager>
                    </Popover>
                  </Popover>
                </Dropdown>
              </ThemeProvider>
            </ThemeProvider>
          </Themed(Dropdown)>
        </ThemedComponent>
      </Select>
    </Select>
    <Select
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      placeholder="Select..."
      placement="bottom-start"
      size="large"
      variant="warning"
    >
      <Select
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        getItemProps={[Function]}
        getMenuProps={[Function]}
        getTriggerProps={[Function]}
        id="select-116"
        isOpen={false}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placement="bottom-start"
      >
        <ThemedComponent
          className="css-0"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          getItemProps={[Function]}
          getMenuProps={[Function]}
          getTriggerProps={[Function]}
          id="select-116"
          isOpen={false}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placement="bottom-start"
        >
          <Themed(Dropdown)
            className="css-0"
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            getItemProps={[Function]}
            getMenuProps={[Function]}
            getTriggerProps={[Function]}
            id="select-116"
            isOpen={false}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onClose={[Function]}
            onOpen={[Function]}
            placement="bottom-start"
          >
            <ThemeProvider>
              <ThemeProvider>
                <Dropdown
                  className="css-0"
                  data={
                    Array [
                      Object {
                        "text": "Alpha",
                        "value": "alpha",
                      },
                      Object {
                        "text": "Beta",
                        "value": "beta",
                      },
                      Object {
                        "text": "Gamma",
                        "value": "gamma",
                      },
                    ]
                  }
                  getItemProps={[Function]}
                  getMenuProps={[Function]}
                  getTriggerProps={[Function]}
                  id="select-116"
                  isOpen={false}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placement="bottom-start"
                >
                  <Popover
                    className="css-0"
                    content={
                      <DropdownContent
                        data={
                          Array [
                            Object {
                              "text": "Alpha",
                              "value": "alpha",
                            },
                            Object {
                              "text": "Beta",
                              "value": "beta",
                            },
                            Object {
                              "text": "Gamma",
                              "value": "gamma",
                            },
                          ]
                        }
                        getItemProps={[Function]}
                        getMenuProps={[Function]}
                        id="select-116-content"
                        modifiers={
                          Object {
                            "contentWidth": Object {
                              "enabled": true,
                              "fn": [Function],
                            },
                          }
                        }
                        placement="bottom-start"
                        wide={undefined}
                      />
                    }
                    focusTriggerOnClose={true}
                    getItemProps={[Function]}
                    getMenuProps={[Function]}
                    getTriggerProps={[Function]}
                    hasArrow={true}
                    id="select-116"
                    isOpen={false}
                    onClose={[Function]}
                    onOpen={[Function]}
                    placement="bottom"
                    triggerRef={[Function]}
                    wrapContent={false}
                  >
                    <Popover
                      className="css-0"
                      content={
                        <DropdownContent
                          data={
                            Array [
                              Object {
                                "text": "Alpha",
                                "value": "alpha",
                              },
                              Object {
                                "text": "Beta",
                                "value": "beta",
                              },
                              Object {
                                "text": "Gamma",
                                "value": "gamma",
                              },
                            ]
                          }
                          getItemProps={[Function]}
                          getMenuProps={[Function]}
                          id="select-116-content"
                          modifiers={
                            Object {
                              "contentWidth": Object {
                                "enabled": true,
                                "fn": [Function],
                              },
                            }
                          }
                          placement="bottom-start"
                          wide={undefined}
                        />
                      }
                      focusTriggerOnClose={true}
                      getItemProps={[Function]}
                      getMenuProps={[Function]}
                      getTriggerProps={[Function]}
                      hasArrow={true}
                      id="select-116"
                      isOpen={false}
                      onClose={[Function]}
                      onOpen={[Function]}
                      placement="bottom"
                      tag="span"
                      triggerRef={[Function]}
                      wrapContent={false}
                    >
                      <Manager
                        className="css-1"
                        id="select-116"
                        tag="span"
                      >
                        <span
                          className="css-1"
                          id="select-116"
                        >
                          <PopoverTrigger
                            aria-describedby="select-116-content"
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            aria-owns="select-116-content"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            <PopoverTrigger
                              component="span"
                            >
                              <Target
                                className="css-2"
                                component="span"
                              >
                                <span
                                  className="css-2"
                                >
                                  <SelectTrigger
                                    aria-describedby="select-116-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-116-content"
                                    isOpen={false}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    placeholder="Select..."
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                    triggerRef={[Function]}
                                    variant="warning"
                                  >
                                    <SelectTrigger
                                      afterItems={
                                        Array [
                                          <IconArrowDropdownDown
                                            css={
                                              Object {
                                                "margin": "0.5em",
                                              }
                                            }
                                            size="1.5em"
                                          />,
                                          <input
                                            name={undefined}
                                            type="hidden"
                                            value=""
                                          />,
                                        ]
                                      }
                                      aria-describedby="select-116-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-116-content"
                                      control={[Function]}
                                      controlProps={
                                        Object {
                                          "hasPlaceholder": true,
                                          "variant": undefined,
                                        }
                                      }
                                      fauxControlRef={[Function]}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                      variant="warning"
                                    >
                                      <FauxControl
                                        afterItems={
                                          Array [
                                            <IconArrowDropdownDown
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              size="1.5em"
                                            />,
                                            <input
                                              name={undefined}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-116-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-116-content"
                                        className="css-70"
                                        control={[Function]}
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                        variant="warning"
                                      >
                                        <FauxControl
                                          aria-describedby="select-116-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-116-content"
                                          className="css-70"
                                          control={[Function]}
                                          innerRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          tabIndex={0}
                                          variant="warning"
                                        >
                                          <div
                                            aria-describedby="select-116-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-116-content"
                                            className="css-74"
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            tabIndex={0}
                                          >
                                            <glamorous(Trigger)
                                              controlPropsIn={
                                                Object {
                                                  "hasPlaceholder": true,
                                                  "variant": undefined,
                                                }
                                              }
                                              hasPlaceholder={true}
                                              key="control"
                                              size="large"
                                              variant="warning"
                                            >
                                              <div
                                                className="css-87"
                                              >
                                                <TriggerContent>
                                                  <span
                                                    className="css-3"
                                                  >
                                                    Select...
                                                  </span>
                                                </TriggerContent>
                                              </div>
                                            </glamorous(Trigger)>
                                            <IconWarning
                                              key="iconEnd"
                                              size="1.5em"
                                            >
                                              <Icon
                                                rtl={false}
                                                size="1.5em"
                                              >
                                                <glamorous(svg)
                                                  aria-hidden={true}
                                                  role="img"
                                                  rtl={false}
                                                  size="1.5em"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="css-36"
                                                    role="img"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <g>
                                                      <path
                                                        d="M13.414 2.718l7.868 7.868c.78.78.78 2.047 0 2.828l-7.868 7.868c-.78.78-2.047.78-2.828 0l-7.868-7.868a2.001 2.001 0 0 1 0-2.828l7.868-7.868c.78-.78 2.047-.78 2.828 0zM12 17a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm1-3.958V8h-2v5.042h2z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </glamorous(svg)>
                                              </Icon>
                                            </IconWarning>
                                            <IconArrowDropdownDown
                                              css={
                                                Object {
                                                  "margin": "0.5em",
                                                }
                                              }
                                              key="arrow"
                                              size="1.5em"
                                            >
                                              <Icon
                                                css={
                                                  Object {
                                                    "margin": "0.5em",
                                                  }
                                                }
                                                rtl={false}
                                                size="1.5em"
                                              >
                                                <glamorous(svg)
                                                  aria-hidden={true}
                                                  css={
                                                    Object {
                                                      "margin": "0.5em",
                                                    }
                                                  }
                                                  role="img"
                                                  rtl={false}
                                                  size="1.5em"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="css-4"
                                                    role="img"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <g>
                                                      <path
                                                        d="M12 17.5l-8-8h16z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </glamorous(svg)>
                                              </Icon>
                                            </IconArrowDropdownDown>
                                            <input
                                              key="input"
                                              type="hidden"
                                              value=""
                                            />
                                            <Underlay
                                              variant="warning"
                                            >
                                              <div
                                                className="css-101"
                                              />
                                            </Underlay>
                                          </div>
                                        </FauxControl>
                                      </FauxControl>
                                    </SelectTrigger>
                                  </SelectTrigger>
                                </span>
                              </Target>
                            </PopoverTrigger>
                          </PopoverTrigger>
                        </span>
                      </Manager>
                    </Popover>
                  </Popover>
                </Dropdown>
              </ThemeProvider>
            </ThemeProvider>
          </Themed(Dropdown)>
        </ThemedComponent>
      </Select>
    </Select>
  </div>
</glamorous(div)>
`;
