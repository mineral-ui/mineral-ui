// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App renders correctly 1`] = `
<glamorous(div)>
  <ThemeProvider
    theme={
      Object {
        "backgroundColor": "#f6f6f6",
      }
    }
  >
    <glamorous(Nav)
      demos={
        Object {
          "button": Object {
            "behavior": "behavior dummy text for the Button component",
            "design": "Lofty design theory about Button",
            "doc": Object {
              "default": Object {},
            },
            "examples": Array [
              Object {
                "component": [Function],
                "source": "<Button>Do Something</Button>",
                "title": "Button",
              },
              Object {
                "component": [Function],
                "source": "<Button primary>Do Something</Button>",
                "title": "Primary",
              },
              Object {
                "component": [Function],
                "source": "<Button minimal>Do Something</Button>",
                "title": "Minimal",
              },
              Object {
                "component": [Function],
                "source": "<div>
          <Button variant=\\"danger\\">Regular</Button>
          <Button variant=\\"danger\\" primary>Primary</Button>
          <Button variant=\\"danger\\" minimal>Minimal</Button>
        </div>",
                "title": "Danger",
              },
              Object {
                "component": [Function],
                "source": "<div>
          <Button variant=\\"success\\">Regular</Button>
          <Button variant=\\"success\\" primary>Primary</Button>
          <Button variant=\\"success\\" minimal>Minimal</Button>
        </div>",
                "title": "Success",
              },
              Object {
                "component": [Function],
                "source": "<div>
          <Button variant=\\"warning\\">Regular</Button>
          <Button variant=\\"warning\\" primary>Primary</Button>
          <Button variant=\\"warning\\" minimal>Minimal</Button>
        </div>",
                "title": "Warning",
              },
              Object {
                "component": [Function],
                "source": "<div>
          <Button size=\\"small\\">Small</Button>
          <Button>Medium</Button>
          <Button size=\\"large\\">Large</Button>
        </div>",
                "title": "Sizes",
              },
              Object {
                "component": [Function],
                "source": "<div>
          <Button disabled>Regular</Button>
          <Button disabled primary>Primary</Button>
          <Button disabled minimal>Minimal</Button>
        </div>",
                "title": "Disabled",
              },
              Object {
                "component": [Function],
                "source": "<Button fullWidth>Do Something</Button>",
                "title": "Full Width",
              },
              Object {
                "component": [Function],
                "description": "Long button text is truncated when necessary",
                "source": "<Button>Do Something</Button>",
                "title": "Truncation",
              },
              Object {
                "component": [Function],
                "source": "",
                "title": "States",
              },
            ],
            "slug": "button",
            "title": "Button",
          },
          "component-utils": Object {
            "behavior": "some cool behavior info",
            "design": "Lofty design theory about the component-utils",
            "doc": Object {
              "description": "Sample implementations of various methods of styling and style overrides.",
            },
            "examples": Array [
              Object {
                "component": [Function],
                "description": "Just a simple sample component to demonstrate the styling below.",
                "title": "Default",
              },
              Object {
                "component": [Function],
                "description": "This will affect all components inside this ThemeProvider that use this variable.",
                "source": "<ThemeProvider theme={{ color_primary: 'mediumvioletred' }}>
        <Sample />
        </ThemeProvider>",
                "title": "Global theme var override",
              },
              Object {
                "component": [Function],
                "description": "This will affect all components inside this ThemeProvider that use this variable, which should only be Sample components due to the namespace.",
                "source": "<ThemeProvider theme={{ Sample_color: 'mediumvioletred' }}>
        <Sample />
        </ThemeProvider>",
                "title": "Component theme var override",
              },
              Object {
                "component": [Function],
                "description": "When a nested ThemeProvider provides the same variable, the merge works as expected and the most deeply-nested theme wins.",
                "source": "<ThemeProvider theme={{ color_primary: 'cyan' }}>
        <ThemeProvider theme={{ color_primary: 'mediumvioletred' }}>
          <Sample />
        </ThemeProvider>
        </ThemeProvider>",
                "title": "Nested global theme var override",
              },
              Object {
                "component": [Function],
                "description": "When a nested ThemeProvider provides a different variable, the merge works as expected.",
                "source": "<ThemeProvider theme={{ color_primary: 'mediumvioletred' }}>
        <ThemeProvider theme={{ color_warning: 'tomato' }}>
          <Sample />
        </ThemeProvider>
        </ThemeProvider>",
                "title": "Shallow merged global theme var override",
              },
              Object {
                "component": [Function],
                "description": "If you need to overwrite a theme variable, either global or component-specific, for a specific component.",
                "source": "const MyThemedSample = createThemedComponent(Sample, {
        color_primary: 'mediumvioletred'
        });
        
        <MyThemedSample />",
                "title": "Local theme var override via createThemedComponent",
              },
              Object {
                "component": [Function],
                "description": "If you need to use completely custom styles (which can still reference the props & theme) on a component.",
                "source": "const MyStyledSample = createStyledComponent(Sample, (props, theme) => ({
          outline: '3px dashed mediumvioletred',
          fontSize: theme.fontSize_h1
        }));
        
        <MyStyledSample />",
                "title": "Style override via createStyledComponent",
              },
            ],
            "slug": "component-utils",
            "title": "ComponentUtils",
          },
          "hello": Object {
            "behavior": "behavior dummy text for the hello component",
            "design": "Lofty design theory about hello",
            "doc": Object {
              "default": Object {},
            },
            "examples": Array [
              Object {
                "component": [Function],
                "source": "<Hello />",
                "title": "Default",
              },
            ],
            "slug": "hello",
            "title": "Hello",
          },
          "hello-world": Object {
            "behavior": "behavior dummy text for the HelloWorld component",
            "design": "Lofty design theory about the helloworld",
            "doc": Object {
              "default": Object {},
            },
            "examples": Array [
              Object {
                "component": [Function],
                "source": "<HelloWorld />",
                "title": "Default",
              },
            ],
            "slug": "hello-world",
            "title": "HelloWorld",
          },
          "world": Object {
            "behavior": "behavior dummy text for the world component",
            "design": "Lofty design theory about the world",
            "doc": Object {
              "default": Object {},
            },
            "examples": Array [
              Object {
                "component": [Function],
                "title": "Default",
              },
              Object {
                "component": [Function],
                "title": "Custom Text",
              },
            ],
            "slug": "world",
            "title": "World",
          },
        }
      }
    />
  </ThemeProvider>
  <glamorous(main)>
    <Switch>
      <Route
        path="/components/:componentId"
        render={[Function]}
      />
      <Redirect
        from="/"
        push={false}
        to="/components/hello"
      />
    </Switch>
    <Footer />
  </glamorous(main)>
</glamorous(div)>
`;
